from tau_bench.types import Action, Task

TASKS = [
    Task(
        annotator="faris",
        user_id="faris_1",
        instruction="Handle the onboarding of a new Software Engineer, Alex Chen. Their start date is 2024-09-01, their email is alex.chen@example.com, and their manager is jane.doe@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Alex Chen', 'role_title': 'Software Engineer', 'start_date': '2024-09-01', 'candidate_email': 'alex.chen@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['alex.chen@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_2",
        instruction="Coordinate the hiring of a new Product Manager, Brenda Starr. Their start date is 2024-09-01, their email is brenda.starr@example.com, and their manager is john.smith@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Brenda Starr', 'role_title': 'Product Manager', 'start_date': '2024-09-01', 'candidate_email': 'brenda.starr@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['brenda.starr@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_3",
        instruction="Coordinate the onboarding of a new Data Analyst, Carlos Diaz. His starting date is 2024-09-08, his email address is carlos.diaz@example.com, and his manager is jane.doe@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Carlos Diaz', 'role_title': 'Data Analyst', 'start_date': '2024-09-08', 'candidate_email': 'carlos.diaz@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['carlos.diaz@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_4",
        instruction="Manage the setup for the new UX Designer, Diana Prince, in anticipation of her start date on 2024-09-08. Her email address is diana.prince@example.com, and her manager is john.smith@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Diana Prince', 'role_title': 'UX Designer', 'start_date': '2024-09-08', 'candidate_email': 'diana.prince@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['diana.prince@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_5",
        instruction="Ensure the onboarding of a new Marketing Specialist, Edward Nygma. The start date is 2024-09-15, his email address is edward.nygma@example.com, and his manager is jane.doe@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Edward Nygma', 'role_title': 'Marketing Specialist', 'start_date': '2024-09-15', 'candidate_email': 'edward.nygma@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['edward.nygma@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_6",
        instruction="You are required to handle the onboarding of a senior software engineer, Felicia Hardy. Her start date will be 2024-09-15, her email is felicia.hardy@example.com, and her manager is john.smith@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Felicia Hardy', 'role_title': 'senior software engineer', 'start_date': '2024-09-15', 'candidate_email': 'felicia.hardy@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['felicia.hardy@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_7",
        instruction="Ensure the onboarding process is coordinated for George Stacy, a junior product manager. His start date is 2024-09-22, his email is george.stacy@example.com, and his manager is jane.doe@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'George Stacy', 'role_title': 'junior product manager', 'start_date': '2024-09-22', 'candidate_email': 'george.stacy@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['george.stacy@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_8",
        instruction="Coordinate the new hire procedures for Helen Cho, who holds the position of data scientist. Her start date is 2024-09-22, her email is helen.cho@example.com, and her manager is john.smith@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Helen Cho', 'role_title': 'data scientist', 'start_date': '2024-09-22', 'candidate_email': 'helen.cho@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['helen.cho@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_9",
        instruction="Handle the onboarding process for the new UI designer, Ivan Vanko. Their start date is 2024-09-29, their email is ivan.vanko@example.com, and their manager is jane.doe@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Ivan Vanko', 'role_title': 'UI designer', 'start_date': '2024-09-29', 'candidate_email': 'ivan.vanko@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['ivan.vanko@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_10",
        instruction="Coordinate the setup for the new SEO specialist, Jessica Jones. Her start date is 2024-09-29, her email is jessica.jones@example.com, and her manager is john.smith@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Jessica Jones', 'role_title': 'SEO specialist', 'start_date': '2024-09-29', 'candidate_email': 'jessica.jones@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['jessica.jones@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),

    Task(
        annotator="faris",
        user_id="faris_11",
        instruction="Coordinate the onboarding of two new Financial Analysts, Sarah Chen and Michael Rodriguez, who are set to begin on 2024-10-08. Sarah's email address is sarah.chen@example.com, and Michael's is michael.rodriguez@example.com. Avoid sending emails to Michael Rodriguez. Their supervisor's contact is iris.west@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Sarah Chen', 'role_title': 'Financial Analyst', 'start_date': '2024-10-08', 'candidate_email': 'sarah.chen@example.com', 'manager_email': 'iris.west@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Michael Rodriguez', 'role_title': 'Financial Analyst', 'start_date': '2024-10-08', 'candidate_email': 'michael.rodriguez@example.com', 'manager_email': 'iris.west@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['sarah.chen@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_12",
        instruction="Contact candidates who are delayed by more than 3 days with their tasks. The threshold to apply is 3. Focus on individuals whose onboarding status is 'Started'.",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Started'}),
            Action(name="GetOverdueChecklistItems", kwargs={'days_overdue_threshold': 3}),
            Action(name="SendBatchReminderEmails", kwargs={'candidate_ids': ['cand_6'], 'days_overdue_threshold': 3}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_6'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_6'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_13",
        instruction="Ensure that you verify and alert candidates about overdue checklist items using a 3 day threshold. Focus on those whose onboarding status is 'Started'.",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Started'}),
            Action(name="GetOverdueChecklistItems", kwargs={'days_overdue_threshold': 3}),
            Action(name="SendBatchReminderEmails", kwargs={'candidate_ids': ['cand_6'], 'days_overdue_threshold': 3}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_6'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_6'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_14",
        instruction="Make sure to escalate system access issues for every candidate with an onboarding status of 'Access Issues'. Apply failure notes SSO access failure.",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="AnalyzeSystemAccessFailures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'failure_notes': "SSO access failure"}}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'cand_4'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_4'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_15",
        instruction="Handle the escalation of onboarding issues for candidates whose items are 10 days overdue. Ensure they are in the 'Onboarded' status.",
        actions=[
            Action(name="GetOverdueChecklistItems", kwargs={'days_overdue_threshold': 10}),
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Onboarded'}),
            Action(name="AnalyzeSystemAccessFailures", kwargs={'candidate_id': 'cand_3'}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_3', 'notification_type': 'overdue_escalation'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'cand_3'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_3'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_3'}),
        ],
        outputs=[],
    ),

    Task(
        annotator="faris",
        user_id="faris_16",
        instruction="Arrange orientation for all new hires commencing in the next 14 days. Subsequently, apply label_6 to the emails sent to the users.",
        actions=[
            Action(name="GetCandidatesNeedingOrientationScheduling", kwargs={'days_until_start': 14}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_5', 'cand_2', 'cand_1']}),
            Action(name="ApplyEmailLabelsAndThreading", kwargs={'label_assignments': {'msg_015': ['label_6'], 'msg_017': ['label_6'], 'msg_019': ['label_6']}}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_5', 'cand_2', 'cand_1'], 'fields_to_update': {'onboarding_status': 'Packet Sent', 'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_17",
        instruction="Ensure to dispatch orientation invites to all cand_2, cand_1, and cand_4, cand_6, cand_7, along with any additional individuals beginning within 7 days.",
        actions=[
            Action(name="GetCandidatesNeedingOrientationScheduling", kwargs={'days_until_start': 7}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_4', 'cand_6', 'cand_7']}),
            Action(name="ApplyEmailLabelsAndThreading", kwargs={'label_assignments': {'msg_015': ['label_4'], 'msg_017': ['label_4'], 'msg_019': ['label_4'], 'msg_021': ['label_4'], 'msg_023': ['label_4'], 'msg_025': ['label_4']}}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_4', 'cand_6', 'cand_7'], 'fields_to_update': {'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_18",
        instruction="Make sure to complete the orientation schedule for new hires arriving next week, covering anyone starting in the upcoming 7 days. Label the orientation invitation emails with 'Orientation-Invite' (label_4) and 'Welcome-Packet' (label_6). Lastly, provide the full name of any candidate with a pending asset request.",
        actions=[
            Action(name="GetCandidatesNeedingOrientationScheduling", kwargs={'days_until_start': 7}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_5']}),
            Action(name="ApplyEmailLabelsAndThreading", kwargs={'label_assignments': {'msg_015': ['label_4', 'label_6']}}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'cand_5', 'new_status': 'Packet Sent'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_5'}),
            Action(name="GetEmailThreadConversations", kwargs={'candidate_id': 'cand_5'}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'expected_email_types': ['orientation invitation']}),
            Action(name="GetPendingAssetRequests", kwargs={'status_filter': 'Pending'}),
        ],
        outputs=[{"full_name": "Raj Patel"}],
    ),
    Task(
        annotator="faris",
        user_id="faris_19",
        instruction="Handle the distribution of orientation invites to all eligible candidates beginning in the subsequent 19 days. Subsequently, attach label_4 to each of the orientation invite emails dispatched to the users.",
        actions=[
            Action(name="GetCandidatesNeedingOrientationScheduling", kwargs={'days_until_start': 19}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_7']}),
            Action(name="ApplyEmailLabelsAndThreading", kwargs={'label_assignments': {'msg_015': ['label_4'], 'msg_017': ['label_4'], 'msg_019': ['label_4'], 'msg_021': ['label_4']}}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_7'], 'fields_to_update': {'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_20",
        instruction="Coordinate the commencement of the orientation and manager introduction process for every candidate slated to start in the next 30 days. Next, apply label_4 to the emails sent to the users.",
        actions=[
            Action(name="GetCandidatesNeedingOrientationScheduling", kwargs={'days_until_start': 30}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_7']}),
            Action(name="ApplyEmailLabelsAndThreading", kwargs={'label_assignments': {'msg_015': ['label_4'], 'msg_017': ['label_4'], 'msg_019': ['label_4'], 'msg_021': ['label_4']}}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_7'], 'fields_to_update': {'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),

    Task(
        annotator="faris",
        user_id="faris_21",
        instruction="Handle the investigation and settlement of SSO access failures for candidates labeled with the 'Access Issues' status. Set the note as 'Resolved by IT.' and select the notification type 'access_issue'. Provide the full name of the candidate with an outstanding asset request.",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="AnalyzeSystemAccessFailures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {"Email": {"failure_notes": ["Mailbox creation failed. Exchange server issue reported."]},"SSO": {"failure_notes": ["Identity provider sync pending. Expected resolution by 2024-08-10."]},"Slack": {"failure_notes": ["Account depends on SSO resolution."]}}}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="ResolveSsoAccessIssue", kwargs={'candidate_id': 'cand_4'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_4'}),
            Action(name="GetPendingAssetRequests", kwargs={'status_filter': 'Pending'}),
        ],
        outputs=[{"full_name": "Raj Patel"}],
    ),
    Task(
        annotator="faris",
        user_id="faris_22",
        instruction="Attend to GitHub access issues for candidate cand_3. Examine the 'GitHub' system, inform the manager, update the records, and record the note as 'Resolved by IT.'",
        actions=[
            Action(name="AnalyzeSystemAccessFailures", kwargs={'system_name': 'GitHub'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_3', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'GitHub': {'failure_notes': ['Account not yet provisioned. IT ticket #12345 created.']}}}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_3', 'notification_type': 'access_issue'}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_3', 'system_name': 'GitHub', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_3'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_3'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_23",
        instruction="Handle access issues for candidates marked with an 'Access Issues' status. Ensure to update the note to 'Resolved by IT.' and apply the notification type 'access_issue'.",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="AnalyzeSystemAccessFailures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {"Email": {"failure_notes": ["Mailbox creation failed. Exchange server issue reported."]},"SSO": {"failure_notes": ["Identity provider sync pending. Expected resolution by 2024-08-10."]},"Slack": {"failure_notes": ["Account depends on SSO resolution."]}}}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_4', 'system_name': 'Email', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_4', 'system_name': 'SSO', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_4', 'system_name': 'Slack', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_4'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_24",
        instruction="Coordinate a diagnostic and resolve Email access for candidate cand_1. Make sure to update the note to 'Resolved by IT.' and utilize the notification type 'access_issue'. Incorporate failure notes Email access failure.",
        actions=[
            Action(name="AnalyzeSystemAccessFailures", kwargs={'candidate_id': 'cand_1'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_1', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'failure_notes': 'Email access failure'}}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_1', 'notification_type': 'access_issue'}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_1', 'system_name': 'Email', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_1'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_1'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_25",
        instruction="Handle the clearing of all candidates presently in the 'Access Issues' state by addressing their SSO issues. Ensure you set the failure notes to 'SSO access failure' and select the notification type 'access_issue'.",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="AnalyzeSystemAccessFailures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'failure_notes': 'SSO access failure'}}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="ResolveSsoAccessIssue", kwargs={'candidate_id': 'cand_4'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_4'}),
        ],
        outputs=[],
    ),

    Task(
        annotator="faris",
        user_id="faris_26",
        instruction="Coordinate the retrieval, processing, and fulfillment of all pending hardware requests listed as 'Pending'. Apply the asset_fulfillment_notification template to inform the candidate and manager.",
        actions=[
            Action(name="GetPendingAssetRequests", kwargs={'status_filter': 'Pending'}),
            Action(name="QueryAvailableAssetsByType", kwargs={'asset_type': 'Laptop', 'status_filter': 'Available'}),
            Action(name="AssignAssetToCandidate", kwargs={'asset_request_id': 'asset_req_5', 'asset_tag': 'LT-MBP-001'}),
            Action(name="UpdateAssetRequestStatus", kwargs={'request_id': 'asset_req_5', 'new_status': 'Completed'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_7'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_7', 'template_name': 'asset_fulfillment_notification', 'to_emails': ['robert.singh@example.com'], 'cc_emails': ['sarah.wilson@example.com'], 'template_context': {'asset_name': 'MacBook Pro 16-inch M3, 32GB RAM, 1TB SSD', 'asset_tag': 'LT-MBP-001'}}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_27",
        instruction="Handle a High priority Laptop (MacBook) asset request for Michael Anderson (cand_1). Subsequently, address any 'Pending' asset requests. Avoid notifying the candidate (cand_1) for the newly created asset request.",
        actions=[
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'cand_1', 'asset_type': 'Laptop', 'urgency_level': 'High'}),
            Action(name="GetPendingAssetRequests", kwargs={'status_filter': 'Pending'}),
            Action(name="QueryAvailableAssetsByType", kwargs={'asset_type': 'Laptop', 'status_filter': 'Available'}),
            Action(name="AssignAssetToCandidate", kwargs={'asset_request_id': 'asset_req_5', 'asset_tag': 'LT-MBP-001'}),
            Action(name="AssignAssetToCandidate", kwargs={'asset_request_id': 'asset_req_007', 'asset_tag': 'LT-MBP-002'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_7'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_7', 'template_name': 'asset_fulfillment_notification', 'to_emails': ['robert.singh@example.com'], 'cc_emails': ['sarah.wilson@example.com'], 'template_context': {'asset_name': 'MacBook Pro 16-inch M3, 32GB RAM, 1TB SSD', 'asset_tag': 'LT-MBP-001'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_1'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_28",
        instruction="Coordinate a Medium priority Laptop (MacBook) asset request for Emma Thompson (cand_2). Thereafter, complete the newly created asset request.",
        actions=[
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'cand_2', 'asset_type': 'Laptop', 'urgency_level': 'Medium'}),
            Action(name="GetPendingAssetRequests", kwargs={'status_filter': 'Pending'}),
            Action(name="QueryAvailableAssetsByType", kwargs={'asset_type': 'Laptop', 'status_filter': 'Available'}),
            Action(name="AssignAssetToCandidate", kwargs={'asset_request_id': 'asset_req_007', 'asset_tag': 'LT-MBP-001'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_2'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_2', 'template_name': 'asset_fulfillment_notification', 'to_emails': ['jane.smith@example.com'], 'cc_emails': ['mike.chen@example.com'], 'template_context': {'asset_name': 'MacBook Pro 16-inch M3, 32GB RAM, 1TB SSD', 'asset_tag': 'LT-MBP-001'}}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_29",
        instruction="Initiate a Medium priority Keyboard asset request for Lily Zhang (cand_6). Subsequently, fulfill the asset request you initiated.",
        actions=[
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'cand_6', 'asset_type': 'Keyboard', 'urgency_level': 'Medium'}),
            Action(name="GetPendingAssetRequests", kwargs={'status_filter': 'Pending'}),
            Action(name="QueryAvailableAssetsByType", kwargs={'asset_type': 'Keyboard', 'status_filter': 'Available'}),
            Action(name="AssignAssetToCandidate", kwargs={'asset_request_id': 'asset_req_007', 'asset_tag': 'KB-LOGI-001'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_6'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_6', 'template_name': 'asset_fulfillment_notification', 'to_emails': ['emily.chen@example.com'], 'cc_emails': ['jennifer.davis@example.com'], 'template_context': {'asset_name': 'Logitech MX Keys Advanced Wireless', 'asset_tag': 'KB-LOGI-001'}}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_30",
        instruction="Initiate a Medium priority Keyboard asset request for Lily Zhang (cand_6). Subsequently, fulfill the asset request you initiated.",
        actions=[
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'cand_6', 'asset_type': 'Keyboard', 'urgency_level': 'Medium'}),
            Action(name="GetPendingAssetRequests", kwargs={'status_filter': 'Pending'}),
            Action(name="QueryAvailableAssetsByType", kwargs={'asset_type': 'Keyboard', 'status_filter': 'Available'}),
            Action(name="AssignAssetToCandidate", kwargs={'asset_request_id': 'asset_req_007', 'asset_tag': 'KB-LOGI-001'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_6'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_6', 'template_name': 'asset_fulfillment_notification', 'to_emails': ['emily.chen@example.com'], 'cc_emails': ['jennifer.davis@example.com'], 'template_context': {'asset_name': 'Logitech MX Keys Advanced Wireless', 'asset_tag': 'KB-LOGI-001'}}),
        ],
        outputs=[],
    ),

    Task(
        annotator="faris",
        user_id="faris_31",
        instruction="Handle the evaluation of onboarding progress for all new hires overseen by rachel.taylor@example.com. Subsequently, address any discovered gaps by preparing missing checklists for Michael Anderson (cand_1) and by reviewing the other candidates.",
        actions=[
            Action(name="GetManagerCandidateAssignments", kwargs={'manager_email': 'sarah.wilson@example.com'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_1'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'cand_1'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_1'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_5'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_7'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_32",
        instruction="Confirm that 'michael.anderson@example.com' does not hold a managerial position. Next, coordinate the essential onboarding steps for the candidate Michael Anderson (cand_1), which include drafting his checklist, dispatching his welcome packet, and updating his status.",
        actions=[
            Action(name="GetManagerCandidateAssignments", kwargs={'manager_email': 'john.doe@example.com'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_1'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'cand_1'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'cand_1'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_1', 'template_name': 'welcome', 'to_emails': ['john.doe@example.com'], 'cc_emails': ['sarah.wilson@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'cand_1', 'new_status': 'Packet Sent'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_33",
        instruction="Handle the verification of assignments for the manager 'jane.doe@example.com'. If this manager is not found, you are required to initiate the initial onboarding steps for the candidate Emma Thompson (cand_2).",
        actions=[
            Action(name="GetManagerCandidateAssignments", kwargs={'manager_email': 'jane.doe@example.com'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_2'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'cand_2'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'cand_2'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_2', 'template_name': 'welcome', 'to_emails': ['jane.smith@example.com'], 'cc_emails': ['mike.chen@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'cand_2', 'new_status': 'Packet Sent'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_34",
        instruction="Coordinate an audit of the hires linked to 'kevin.liu@example.com'. Following this, arrange orientation for all candidates who are ready. The session is scheduled for 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="GetManagerCandidateAssignments", kwargs={'manager_email': 'mike.chen@example.com'}),
            Action(name="GetCandidatesNeedingOrientationScheduling", kwargs={'days_until_start': 30}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_7'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_7'], 'fields_to_update': {'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_35",
        instruction="Make sure to prepare everything for the new UX Designer, Doono Price, to begin on her start date of 2024-09-08. Her email address is doono.price@example.com, and her supervisor is john.smith@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Doono Price', 'role_title': 'UX Designer', 'start_date': '2024-09-08', 'candidate_email': 'doono.price@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['doono.price@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_36",
        instruction="Ensure the onboarding process for the new Software Engineer, Victor Frankenstein. Their start date is 2024-09-01, their email address is victor.frankenstein@example.com, and their supervisor is mary.shelley@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Victor Frankenstein', 'role_title': 'Software Engineer', 'start_date': '2024-09-01', 'candidate_email': 'victor.frankenstein@example.com', 'manager_email': 'mary.shelley@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['victor.frankenstein@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_37",
        instruction="You need to manage the recruitment of a new Product Manager, Elizabeth Bennet. The start date is 2024-09-01, the email is elizabeth.bennet@example.com, and the manager is jane.austen@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Elizabeth Bennet', 'role_title': 'Product Manager', 'start_date': '2024-09-01', 'candidate_email': 'elizabeth.bennet@example.com', 'manager_email': 'jane.austen@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['elizabeth.bennet@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_38",
        instruction="You are required to facilitate the orientation of a new Data Analyst, Jay Gatsby. The start date is 2024-09-08, the email is jay.gatsby@example.com, and the manager is f.scott.fitzgerald@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Jay Gatsby', 'role_title': 'Data Analyst', 'start_date': '2024-09-08', 'candidate_email': 'jay.gatsby@example.com', 'manager_email': 'f.scott.fitzgerald@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['jay.gatsby@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_39",
        instruction="Ensure that the new UX Designer, Hester Prynne, is ready for her start date of 2024-09-08. Her email is hester.prynne@example.com, and her manager is nathaniel.hawthorne@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Hester Prynne', 'role_title': 'UX Designer', 'start_date': '2024-09-08', 'candidate_email': 'hester.prynne@example.com', 'manager_email': 'nathaniel.hawthorne@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['hester.prynne@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_40",
        instruction="Handle the onboarding of the new Marketing Specialist, Holden Caulfield, scheduled to start on 2024-09-15. Their email is holden.caulfield@example.com, and their manager is j.d.salinger@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Holden Caulfield', 'role_title': 'Marketing Specialist', 'start_date': '2024-09-15', 'candidate_email': 'holden.caulfield@example.com', 'manager_email': 'j.d.salinger@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['holden.caulfield@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_41",
        instruction="Coordinate the onboarding process for a senior software engineer, Captain Ahab. Her start date is 2024-09-15, her email is captain.ahab@example.com, and her manager is herman.melville@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Captain Ahab', 'role_title': 'senior software engineer', 'start_date': '2024-09-15', 'candidate_email': 'captain.ahab@example.com', 'manager_email': 'herman.melville@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['captain.ahab@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_42",
        instruction="Ensure the onboarding of a junior product manager, Atticus Finch. Their start date is 2024-09-22, their email is atticus.finch@example.com, and their manager is harper.lee@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Atticus Finch', 'role_title': 'junior product manager', 'start_date': '2024-09-22', 'candidate_email': 'atticus.finch@example.com', 'manager_email': 'harper.lee@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['atticus.finch@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_43",
        instruction="Handle the onboarding for a new hire, Jane Eyre, who is a data scientist. Her start date is 2024-09-22, her email is jane.eyre@example.com, and her manager is charlotte.bronte@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Jane Eyre', 'role_title': 'data scientist', 'start_date': '2024-09-22', 'candidate_email': 'jane.eyre@example.com', 'manager_email': 'charlotte.bronte@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['jane.eyre@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_44",
        instruction="Coordinate the onboarding of the new UI designer, Ishmael. Their start date is 2024-09-29, their email is ishmael@example.com, and their manager is herman.melville@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Ishmael', 'role_title': 'UI designer', 'start_date': '2024-09-29', 'candidate_email': 'ishmael@example.com', 'manager_email': 'herman.melville@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['ishmael@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_45",
        instruction="Handle the setup for our new SEO specialist, Scout Finch. Her employment commences on 2024-09-29, her email address is scout.finch@example.com, and her supervisor is harper.lee@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Scout Finch', 'role_title': 'SEO specialist', 'start_date': '2024-09-29', 'candidate_email': 'scout.finch@example.com', 'manager_email': 'harper.lee@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['scout.finch@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_46",
        instruction="Ensure to tackle all pending onboarding tasks. For any candidate whose items are overdue by 1 day or more, send them a reminder and record a follow-up in their documentation, then confirm that all overdue tasks have been resolved by reviewing their entire context.",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Started'}),
            Action(name="GetOverdueChecklistItems", kwargs={'days_overdue_threshold': 1}),
            Action(name="SendBatchReminderEmails", kwargs={'candidate_ids': ['cand_2', 'cand_3', 'cand_4', 'cand_5', 'cand_6', 'cand_7'], 'days_overdue_threshold': 1}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_2', 'cand_3', 'cand_4', 'cand_5', 'cand_6', 'cand_7'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_2'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_3'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_4'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_5'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_6'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_7'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_47",
        instruction="Handle all GitHub access failures. For any candidate whose GitHub access check has failed, submit a support request to IT, inform the manager, adjust the access check status to 'Success', and record the resolution. Lastly, verify if there are any pending asset requests left.",
        actions=[
            Action(name="AnalyzeSystemAccessFailures", kwargs={'system_name': 'GitHub'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_3'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_3', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'failure_notes': 'Account not yet provisioned. IT ticket #12345 created.'}}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_3', 'notification_type': 'access_issue'}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_3', 'system_name': 'GitHub', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_3'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_3'}),
            Action(name="GetPendingAssetRequests", kwargs={'status_filter': 'Pending'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_48",
        instruction="Ensure every new hire has received a welcome packet. For candidates in the 'Started' status lacking a welcome email, create their welcome file, dispatch the email, and change their status to 'Packet Sent'.",
        actions=[
            Action(name="CheckEmailCommunicationGaps", kwargs={'expected_email_types': ['welcome']}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['cand_1', 'cand_6']}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_1'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_6'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_1', 'template_name': 'welcome', 'to_emails': ['john.doe@example.com'], 'cc_emails': ['sarah.wilson@example.com']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_6', 'template_name': 'welcome', 'to_emails': ['emily.chen@example.com'], 'cc_emails': ['jennifer.davis@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['cand_1', 'cand_6'], 'new_status': 'Packet Sent'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_49",
        instruction="Ensure orientation is scheduled for any candidates who require it. For candidates lacking an orientation invite, send the invitation email, assign the appropriate label, and log their record with the invitation timestamp. The meeting is scheduled for 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="GetCandidatesNeedingOrientationScheduling", kwargs={'days_until_start': 30}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_1'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="ApplyEmailLabelsAndThreading", kwargs={'label_assignments': {'msg_015': ['label_4']}}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_1'], 'fields_to_update': {'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_50",
        instruction="Handle all outstanding asset requests for candidates marked as 'Asset Pending'. Verify the asset's availability, allocate it to the candidate, dispatch a fulfillment notification, and change the candidate's status to 'Onboarded'. Finally, confirm that no asset requests are still pending.",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Asset Pending'}),
            Action(name="GetPendingAssetRequests", kwargs={'candidate_id': 'cand_7'}),
            Action(name="QueryAvailableAssetsByType", kwargs={'asset_type': 'Laptop', 'status_filter': 'Available'}),
            Action(name="AssignAssetToCandidate", kwargs={'asset_request_id': 'asset_req_5', 'asset_tag': 'LT-MBP-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_7', 'template_name': 'asset_fulfillment_notification', 'to_emails': ['robert.singh@example.com'], 'cc_emails': ['sarah.wilson@example.com'], 'template_context': {'asset_name': 'MacBook Pro 16-inch M3, 32GB RAM, 1TB SSD', 'asset_tag': 'LT-MBP-001'}}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'cand_7', 'new_status': 'Onboarded'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_7'}),
            Action(name="GetPendingAssetRequests", kwargs={'status_filter': 'Pending'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_51",
        instruction="Handle the onboarding of a new Data Analyst, Carlos Diaz, who will begin on 2024-09-08. His email address is carlos.diaz@example.com, and he will report to jane.doe@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Carlos Diaz', 'role_title': 'Data Analyst', 'start_date': '2024-09-08', 'candidate_email': 'carlos.diaz@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['carlos.diaz@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_52",
        instruction="Arrange for the new UX Designer, Diana Prince, to be set up by her start date of 2024-09-08. Her email is diana.prince@example.com, and her manager is john.smith@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Diana Prince', 'role_title': 'UX Designer', 'start_date': '2024-09-08', 'candidate_email': 'diana.prince@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['diana.prince@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_53",
        instruction="Handle the onboarding of a new Marketing Specialist, Edward Nygma. Their start date is 2024-09-15, and they can be reached at edward.nygma@example.com. Their manager is jane.doe@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Edward Nygma', 'role_title': 'Marketing Specialist', 'start_date': '2024-09-15', 'candidate_email': 'edward.nygma@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['edward.nygma@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_54",
        instruction="Coordinate the onboarding of a senior software engineer, Felicia Hardy. Her joining date is 2024-09-15, her contact email is felicia.hardy@example.com, and she will report to john.smith@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Felicia Hardy', 'role_title': 'senior software engineer', 'start_date': '2024-09-15', 'candidate_email': 'felicia.hardy@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['felicia.hardy@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_55",
        instruction="You are required to manage the onboarding process for a junior product manager, George Stacy. Their start date is 2024-09-22, their email is george.stacy@example.com, and their manager is jane.doe@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'George Stacy', 'role_title': 'junior product manager', 'start_date': '2024-09-22', 'candidate_email': 'george.stacy@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['george.stacy@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_56",
        instruction="You are assigned to handle the hiring of a new Product Manager, Brenda Starr. Their start date is 2024-09-01, their email is brenda.starr@example.com, and their manager is john.smith@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Brenda Starr', 'role_title': 'Product Manager', 'start_date': '2024-09-01', 'candidate_email': 'brenda.starr@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['brenda.starr@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
        Task(
        annotator="faris",
        user_id="faris_57",
        instruction="Handle the onboarding of two new DevOps Engineers, Bruce Wayne and Dick Grayson. Their start date is 2024-10-01. Bruce's email is bruce.wayne@example.com and Dick's is dick.grayson@example.com. Ensure not to send an email to Bruce Wayne. Their manager is alfred.pennyworth@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Bruce Wayne', 'role_title': 'DevOps Engineer', 'start_date': '2024-10-01', 'candidate_email': 'bruce.wayne@example.com', 'manager_email': 'alfred.pennyworth@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Dick Grayson', 'role_title': 'DevOps Engineer', 'start_date': '2024-10-01', 'candidate_email': 'dick.grayson@example.com', 'manager_email': 'alfred.pennyworth@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-002', 'template_name': 'welcome', 'to_emails': ['dick.grayson@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_58",
        instruction="Facilitate the onboarding of two new Sales Representatives, Clark Kent and Lois Lane. Their start date is 2024-10-01. Clark's email is clark.kent@example.com and Lois's is lois.lane@example.com. Make sure not to email Lois. Their manager is perry.white@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Clark Kent', 'role_title': 'Sales Representative', 'start_date': '2024-10-01', 'candidate_email': 'clark.kent@example.com', 'manager_email': 'perry.white@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Lois Lane', 'role_title': 'Sales Representative', 'start_date': '2024-10-01', 'candidate_email': 'lois.lane@example.com', 'manager_email': 'perry.white@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['clark.kent@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_59",
        instruction="Handle the onboarding of two new HR Specialists, Diana Prince and Steve Trevor, who will start on 2024-10-08. Diana's email is diana.prince@example.com, while Steve's is steve.trevor@example.com. Refrain from sending emails to Steve. Their manager can be reached at hippolyta@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Diana Prince', 'role_title': 'HR Specialist', 'start_date': '2024-10-08', 'candidate_email': 'diana.prince@example.com', 'manager_email': 'hippolyta@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Steve Trevor', 'role_title': 'HR Specialist', 'start_date': '2024-10-08', 'candidate_email': 'steve.trevor@example.com', 'manager_email': 'hippolyta@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['diana.prince@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_60",
        instruction="Coordinate the onboarding for two new Financial Analysts, Barry Allen and Wally West. They will commence on 2024-10-08. Barry's email is barry.allen@example.com and Wally's is wally.west@example.com. Avoid emailing Wally West. Their manager's contact is iris.west@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Barry Allen', 'role_title': 'Financial Analyst', 'start_date': '2024-10-08', 'candidate_email': 'barry.allen@example.com', 'manager_email': 'iris.west@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Wally West', 'role_title': 'Financial Analyst', 'start_date': '2024-10-08', 'candidate_email': 'wally.west@example.com', 'manager_email': 'iris.west@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['barry.allen@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_61",
        instruction="Coordinate the onboarding of two new Content Writers, Arthur Curry and Garth. Their starting date is 2024-10-15. Arthur's email is arthur.curry@example.com, and Garth's email is garth@example.com. Refrain from emailing Garth. Reach out to their manager at mera@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Arthur Curry', 'role_title': 'Content Writer', 'start_date': '2024-10-15', 'candidate_email': 'arthur.curry@example.com', 'manager_email': 'mera@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Garth', 'role_title': 'Content Writer', 'start_date': '2024-10-15', 'candidate_email': 'garth@example.com', 'manager_email': 'mera@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['arthur.curry@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_62",
        instruction="Manage the onboarding process for two new Customer Success Managers, Hal Jordan and John Stewart, beginning their roles on 2024-10-15. Hal can be contacted at hal.jordan@example.com, and John's email is john.stewart@example.com. Avoid sending emails to John Stewart. Their manager's contact is carol.ferris@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Hal Jordan', 'role_title': 'Customer Success Manager', 'start_date': '2024-10-15', 'candidate_email': 'hal.jordan@example.com', 'manager_email': 'carol.ferris@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'John Stewart', 'role_title': 'Customer Success Manager', 'start_date': '2024-10-15', 'candidate_email': 'john.stewart@example.com', 'manager_email': 'carol.ferris@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['hal.jordan@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_63",
        instruction="Make sure to onboard two new QA Engineers, Jonn Jonzz and Mgann Morzz. Their start date is 2024-10-22. Jonn's email is jonn.jonzz@example.com and Mgann's is mgann.morzz@example.com. Refrain from emailing Mgann. Their manager is silas.stone@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Jonn Jonzz', 'role_title': 'QA Engineer', 'start_date': '2024-10-22', 'candidate_email': 'jonn.jonzz@example.com', 'manager_email': 'silas.stone@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Mgann Morzz', 'role_title': 'QA Engineer', 'start_date': '2024-10-22', 'candidate_email': 'mgann.morzz@example.com', 'manager_email': 'silas.stone@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['jonn.jonzz@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_64",
        instruction="Ensure you onboard two new Business Analysts, Oliver Queen and Roy Harper. Their start date is 2024-10-22. Oliver's email is oliver.queen@example.com and Roy's is roy.harper@example.com. Avoid sending an email to Roy. Their manager is dinah.lance@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Oliver Queen', 'role_title': 'Business Analyst', 'start_date': '2024-10-22', 'candidate_email': 'oliver.queen@example.com', 'manager_email': 'dinah.lance@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Roy Harper', 'role_title': 'Business Analyst', 'start_date': '2024-10-22', 'candidate_email': 'roy.harper@example.com', 'manager_email': 'dinah.lance@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['oliver.queen@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_65",
        instruction="Handle the onboarding of two new Graphic Designers, Selina Kyle and Pamela Isley. They are starting on 2024-10-29. Selina's email address is selina.kyle@example.com while Pamela's email is pamela.isley@example.com. Avoid emailing Pamela. Their manager can be reached at holly.robinson@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Selina Kyle', 'role_title': 'Graphic Designer', 'start_date': '2024-10-29', 'candidate_email': 'selina.kyle@example.com', 'manager_email': 'holly.robinson@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Pamela Isley', 'role_title': 'Graphic Designer', 'start_date': '2024-10-29', 'candidate_email': 'pamela.isley@example.com', 'manager_email': 'holly.robinson@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['selina.kyle@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_66",
        instruction="Coordinate the onboarding for two new Project Managers, Carter Hall and Kendra Saunders. Their employment begins on 2024-10-29. Carter's email is carter.hall@example.com and Kendra can be reached at kendra.saunders@example.com. Refrain from sending emails to Kendra. Their manager's contact is shiera.sanders@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Carter Hall', 'role_title': 'Project Manager', 'start_date': '2024-10-29', 'candidate_email': 'carter.hall@example.com', 'manager_email': 'shiera.sanders@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Kendra Saunders', 'role_title': 'Project Manager', 'start_date': '2024-10-29', 'candidate_email': 'kendra.saunders@example.com', 'manager_email': 'shiera.sanders@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['carter.hall@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_67",
        instruction="You need to contact candidates with tasks that have been overdue for 3 days or more. Concentrate on new hires who are currently in the 'Started' phase of onboarding.",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Started'}),
            Action(name="GetOverdueChecklistItems", kwargs={'days_overdue_threshold': 3}),
            Action(name="SendBatchReminderEmails", kwargs={'candidate_ids': ['cand_6'], 'days_overdue_threshold': 3}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_6'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_6'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_68",
        instruction="You are responsible for dealing with escalations related to candidates marked with an 'Access Issues' status. Communicate with IT using the failure note 'SSO access failure'.",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="AnalyzeSystemAccessFailures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'failure_notes': "SSO access failure"}}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'cand_4'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_4'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_69",
        instruction="Ensure you escalate issues concerning 'Onboarded' candidates with tasks that are overdue by 10 days or more.",
        actions=[
            Action(name="GetOverdueChecklistItems", kwargs={'days_overdue_threshold': 10}),
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Onboarded'}),
            Action(name="AnalyzeSystemAccessFailures", kwargs={'candidate_id': 'cand_3'}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_3', 'notification_type': 'overdue_escalation'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'cand_3'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_3'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_3'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_70",
        instruction="Address the GitHub access issue for candidate cand_3 by examining the failure, notifying the manager, updating the records, and marking the issue as 'Resolved by IT.'",
        actions=[
            Action(name="AnalyzeSystemAccessFailures", kwargs={'system_name': 'GitHub'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_3', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'GitHub': {'failure_notes': ['Account not yet provisioned. IT ticket #12345 created.']}}}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_3', 'notification_type': 'access_issue'}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_3', 'system_name': 'GitHub', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_3'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_3'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_71",
        instruction="Handle the task of identifying and fixing the Email access issue for candidate cand_1. Apply the note 'Resolved by IT.' and select the 'access_issue' notification type. The failure note should be 'Email access failure'.",
        actions=[
            Action(name="AnalyzeSystemAccessFailures", kwargs={'candidate_id': 'cand_1'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_1', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'failure_notes': 'Email access failure'}}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_1', 'notification_type': 'access_issue'}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_1', 'system_name': 'Email', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_1'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_1'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_72",
        instruction="Address all SSO issues for candidates in the 'Access Issues' state. Use 'SSO access failure' as the failure note and apply the 'access_issue' notification type for manager communications.",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="AnalyzeSystemAccessFailures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'failure_notes': 'SSO access failure'}}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="ResolveSsoAccessIssue", kwargs={'candidate_id': 'cand_4'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_4'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_73",
        instruction="Coordinate the onboarding of two new Financial Analysts, Emma Thompson and Daniel Lee. Their start date is 2024-10-08. Emma's email is emma.thompson@example.com and David's is daniel.lee@example.com. Refrain from emailing Daniel Lee. Their manager is iris.west@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Emma Thompson', 'role_title': 'Financial Analyst', 'start_date': '2024-10-08', 'candidate_email': 'emma.thompson@example.com', 'manager_email': 'iris.west@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Daniel Lee', 'role_title': 'Financial Analyst', 'start_date': '2024-10-08', 'candidate_email': 'daniel.lee@example.com', 'manager_email': 'iris.west@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['emma.thompson@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_74",
        instruction="Oversee the sending of orientation invitations to cand_2, cand_1, and cand_4, cand_6, cand_7 and any others who are scheduled to start in the coming 7 days.",
        actions=[
            Action(name="GetCandidatesNeedingOrientationScheduling", kwargs={'days_until_start': 7}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_4', 'cand_6', 'cand_7']}),
            Action(name="ApplyEmailLabelsAndThreading", kwargs={'label_assignments': {'msg_015': ['label_4'], 'msg_017': ['label_4'], 'msg_019': ['label_4'], 'msg_021': ['label_4'], 'msg_023': ['label_4'], 'msg_025': ['label_4']}}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_4', 'cand_6', 'cand_7'], 'fields_to_update': {'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_75",
        instruction="Handle the task of making sure all cand_2, cand_1, cand_4, cand_6, cand_7, and any others beginning within one week are sent their orientation invitations. Ensure you send the invites and afterwards confirm that there isn't any remaining communication gap.",
        actions=[
            Action(name="GetCandidatesNeedingOrientationScheduling", kwargs={'days_until_start': 7}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_4', 'cand_6', 'cand_7']}),
            Action(name="ApplyEmailLabelsAndThreading", kwargs={'label_assignments': {'msg_015': ['label_4'], 'msg_017': ['label_4'], 'msg_019': ['label_4'], 'msg_021': ['label_4'], 'msg_023': ['label_4'], 'msg_025': ['label_4']}}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_4', 'cand_6', 'cand_7'], 'fields_to_update': {'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_76",
        instruction="Address the task of resolving access problems for candidates in the 'Access Issues' state. Set the note to 'Resolved by IT.' and choose 'access_issue' as the notification type when escalating.",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="AnalyzeSystemAccessFailures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {"Email": {"failure_notes": ["Mailbox creation failed. Exchange server issue reported."]},"SSO": {"failure_notes": ["Identity provider sync pending. Expected resolution by 2024-08-10."]},"Slack": {"failure_notes": ["Account depends on SSO resolution."]}}}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_4', 'system_name': 'Email', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_4', 'system_name': 'SSO', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_4', 'system_name': 'Slack', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_4'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_77",
        instruction="Your role is to address all access problems for new hires classified under the 'Access Issues' status. Ensure you set the resolution note to 'Resolved by IT.'",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="AnalyzeSystemAccessFailures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {"Email": {"failure_notes": ["Mailbox creation failed. Exchange server issue reported."]},"SSO": {"failure_notes": ["Identity provider sync pending. Expected resolution by 2024-08-10."]},"Slack": {"failure_notes": ["Account depends on SSO resolution."]}}}),
            Action(name="NotifyManager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_4', 'system_name': 'Email', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_4', 'system_name': 'SSO', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_4', 'system_name': 'Slack', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_4'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_78",
        instruction="You need to manage all overdue tasks. For any candidate with items overdue by one day or more, it is required to send a reminder and document the follow-up action.",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Started'}),
            Action(name="GetOverdueChecklistItems", kwargs={'days_overdue_threshold': 1}),
            Action(name="SendBatchReminderEmails", kwargs={'candidate_ids': ['cand_2', 'cand_3', 'cand_4', 'cand_5', 'cand_6', 'cand_7'], 'days_overdue_threshold': 1}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_2', 'cand_3', 'cand_4', 'cand_5', 'cand_6', 'cand_7'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_2'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_3'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_4'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_5'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_6'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_7'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_79",
        instruction="Coordinate the onboarding process for two new DevOps Engineers, Tim Drake and Jason Todd, who will start on 2024-10-01. Tim's contact email is tim.drake@example.com, while Jason's is jason.todd@example.com. Avoid emailing Tim Drake. Their manager can be reached at barbara.gordon@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Tim Drake', 'role_title': 'DevOps Engineer', 'start_date': '2024-10-01', 'candidate_email': 'tim.drake@example.com', 'manager_email': 'barbara.gordon@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Jason Todd', 'role_title': 'DevOps Engineer', 'start_date': '2024-10-01', 'candidate_email': 'jason.todd@example.com', 'manager_email': 'barbara.gordon@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-002', 'template_name': 'welcome', 'to_emails': ['jason.todd@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_80",
        instruction="Focus on clearing the overdue task queue. Handle all items that are overdue by at least one day by sending reminders, documenting the action, and checking the context for all involved candidates.",
        actions=[
            Action(name="FindCandidatesByOnboardingStatus", kwargs={'onboarding_status': 'Started'}),
            Action(name="GetOverdueChecklistItems", kwargs={'days_overdue_threshold': 1}),
            Action(name="SendBatchReminderEmails", kwargs={'candidate_ids': ['cand_2', 'cand_3', 'cand_4', 'cand_5', 'cand_6', 'cand_7'], 'days_overdue_threshold': 1}),
            Action(name="UpdateCandidatesRecord", kwargs={'candidate_ids': ['cand_2', 'cand_3', 'cand_4', 'cand_5', 'cand_6', 'cand_7'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_2'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_3'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_4'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_5'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_6'}),
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_7'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_81",
        instruction="Handle the hiring of two DevOps Engineers, Damian Wayne and Cassandra Cain. They are expected to start on 2024-10-01. Damian's email is damian.wayne@example.com and Cassandra's is cassandra.cain@example.com. Refrain from emailing Cassandra Cain. Their manager is selina.kyle@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Damian Wayne', 'role_title': 'DevOps Engineer', 'start_date': '2024-10-01', 'candidate_email': 'damian.wayne@example.com', 'manager_email': 'selina.kyle@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Cassandra Cain', 'role_title': 'DevOps Engineer', 'start_date': '2024-10-01', 'candidate_email': 'cassandra.cain@example.com', 'manager_email': 'selina.kyle@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['damian.wayne@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_82",
        instruction="Coordinate the onboarding of two new Business Analysts, Lex Luthor and Mercy Graves. Their start date is set for 2024-11-22. Lex's email is lex.luthor@example.com and Mercy's is mercy.graves@example.com. Avoid emailing Mercy Graves. Their manager is lionel.luthor@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Lex Luthor', 'role_title': 'Business Analyst', 'start_date': '2024-11-22', 'candidate_email': 'lex.luthor@example.com', 'manager_email': 'lionel.luthor@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Mercy Graves', 'role_title': 'Business Analyst', 'start_date': '2024-11-22', 'candidate_email': 'mercy.graves@example.com', 'manager_email': 'lionel.luthor@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['lex.luthor@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_83",
        instruction="Handle the onboarding process for a new Sales Representative, Peter Parker. Their starting date is 2024-11-01, their email is peter.parker@example.com, and their supervisor is may.parker@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Peter Parker', 'role_title': 'Sales Representative', 'start_date': '2024-11-01', 'candidate_email': 'peter.parker@example.com', 'manager_email': 'may.parker@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['peter.parker@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_84",
        instruction="Manage the onboarding of a new HR Specialist, Mary Jane Watson. Their starting date is 2024-11-01, their email is mary.jane.watson@example.com, and their supervisor is anna.watson@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Mary Jane Watson', 'role_title': 'HR Specialist', 'start_date': '2024-11-01', 'candidate_email': 'mary.jane.watson@example.com', 'manager_email': 'anna.watson@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['mary.jane.watson@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_85",
        instruction="Ensure the onboarding of a new Financial Analyst, Harry Osborn. The start date is 2024-11-08, with the email address harry.osborn@example.com, and the manager's email is norman.osborn@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Harry Osborn', 'role_title': 'Financial Analyst', 'start_date': '2024-11-08', 'candidate_email': 'harry.osborn@example.com', 'manager_email': 'norman.osborn@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['harry.osborn@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_86",
        instruction="Coordinate the onboarding process for a new Content Writer, Gwen Stacy. The starting date is 2024-11-08; their email is gwen.stacy@example.com, and their supervisor's contact is george.stacy@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Gwen Stacy', 'role_title': 'Content Writer', 'start_date': '2024-11-08', 'candidate_email': 'gwen.stacy@example.com', 'manager_email': 'george.stacy@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['gwen.stacy@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_87",
        instruction="Ensure the onboarding of a new Customer Success Manager, Miles Morales. The starting date is 2024-11-15, their contact email is miles.morales@example.com, and they will report to jefferson.davis@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Miles Morales', 'role_title': 'Customer Success Manager', 'start_date': '2024-11-15', 'candidate_email': 'miles.morales@example.com', 'manager_email': 'jefferson.davis@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['miles.morales@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_88",
        instruction="Facilitate the onboarding of a new QA Engineer, Cindy Moon. The commencement date is 2024-11-15, their email is cindy.moon@example.com, and their supervisor is albert.moon@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Cindy Moon', 'role_title': 'QA Engineer', 'start_date': '2024-11-15', 'candidate_email': 'cindy.moon@example.com', 'manager_email': 'albert.moon@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['cindy.moon@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_89 ",
        instruction="Handle the final audit process for candidate cand_3. Address any remaining issues, such as sending any missing emails, fulfilling overdue tasks, and fixing system access glitches, then modify their status to 'Onboarded'. The meeting is scheduled for 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_3'}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'candidate_id': 'cand_3', 'expected_email_types': ['welcome', 'orientation invitation', 'introduction']}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_3'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="UpdateTaskCompletionStatus", kwargs={'item_ids': ['item_3']}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_3', 'system_name': 'GitHub', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'cand_3', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_90",
        instruction="Coordinate the final audit for candidate cand_5. Resolve any pending issues, including completing all outstanding tasks, then change their status to 'Onboarded'.",
        actions=[
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_5'}),
            Action(name="GetOverdueChecklistItems", kwargs={'candidate_id': 'cand_5', 'days_overdue_threshold': 0}),
            Action(name="UpdateTaskCompletionStatus", kwargs={'item_ids': ['item_13', 'item_14']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'cand_5', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_91",
        instruction="Ensure you handle a final audit for candidate cand_1. Address any remaining issues, such as dispatching missing emails and settling pending system access, before updating their status to 'Onboarded'. The meeting is scheduled for 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_1'}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'candidate_id': 'cand_1', 'expected_email_types': ['welcome', 'orientation invitation', 'introduction']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_1', 'template_name': 'welcome', 'to_emails': ['john.doe@example.com'], 'cc_emails': ['sarah.wilson@example.com']}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_1'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_1', 'system_name': 'Email', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'cand_1', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_92",
        instruction="Ensure you coordinate a final audit for candidate cand_2. Address any remaining issues, including dispatching missing emails and completing pending tasks, before updating their status to 'Onboarded'. The meeting is scheduled for 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_2'}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'candidate_id': 'cand_2', 'expected_email_types': ['orientation invitation', 'introduction']}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_2'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="UpdateTaskCompletionStatus", kwargs={'item_ids': ['item_4', 'item_5', 'item_6', 'item_7']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'cand_2', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_93",
        instruction="You are required to handle the final audit for candidate cand_3. Ensure every unresolved matter is addressed, such as dispatching missing emails, finalizing overdue tasks, and addressing system access breakdowns, and subsequently change their status to 'Onboarded'. The session is scheduled for 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_3'}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'candidate_id': 'cand_3', 'expected_email_types': ['orientation invitation', 'introduction']}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_3'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="UpdateTaskCompletionStatus", kwargs={'item_ids': ['item_3']}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_3', 'system_name': 'GitHub', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'cand_3', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_94",
        instruction="You need to coordinate the final audit for candidate cand_4. Make sure all unresolved issues are dealt with, such as sending outstanding emails, completing pending tasks, and fixing system access issues, then switch their status to 'Onboarded'. The meeting takes place at 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_4'}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'candidate_id': 'cand_4', 'expected_email_types': ['orientation invitation', 'introduction']}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_4'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="UpdateTaskCompletionStatus", kwargs={'item_ids': ['item_8', 'item_9', 'item_10']}),
            Action(name="ResolveSsoAccessIssue", kwargs={'candidate_id': 'cand_4'}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'cand_4', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_95",
        instruction="You need to bring two new Project Managers, Steve Rogers and Bucky Barnes, onboard. They are scheduled to start on 2024-11-29. Steve's email is steve.rogers@example.com, while Bucky's is bucky.barnes@example.com. Avoid sending emails to Bucky Barnes. Their superior is peggy.carter@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Steve Rogers', 'role_title': 'Project Manager', 'start_date': '2024-11-29', 'candidate_email': 'steve.rogers@example.com', 'manager_email': 'peggy.carter@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Bucky Barnes', 'role_title': 'Project Manager', 'start_date': '2024-11-29', 'candidate_email': 'bucky.barnes@example.com', 'manager_email': 'peggy.carter@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['steve.rogers@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),

    Task(
        annotator="faris",
        user_id="faris_96",
        instruction="Coordinate a final audit for candidate cand_6. Ensure you address any pending issues by sending missing emails and completing any overdue tasks, then change their status to 'Onboarded'. The meeting is set for 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_6'}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'candidate_id': 'cand_6', 'expected_email_types': ['welcome', 'orientation invitation', 'introduction']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_6', 'template_name': 'welcome', 'to_emails': ['emily.chen@example.com'], 'cc_emails': ['jennifer.davis@example.com']}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_6'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="UpdateTaskCompletionStatus", kwargs={'item_ids': ['item_17']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'cand_6', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_97",
        instruction="Ensure you handle a concluding audit for candidate cand_7. Make sure to address any unresolved issues, which include completing all outstanding tasks and fulfilling their asset request, and then change their status to 'Onboarded'.",
        actions=[
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_7'}),
            Action(name="UpdateTaskCompletionStatus", kwargs={'item_ids': ['item_15', 'item_16']}),
            Action(name="QueryAvailableAssetsByType", kwargs={'asset_type': 'Laptop', 'status_filter': 'Available'}),
            Action(name="AssignAssetToCandidate", kwargs={'asset_request_id': 'asset_req_5', 'asset_tag': 'LT-MBP-001'}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_7', 'template_name': 'asset_fulfillment_notification', 'to_emails': ['robert.singh@example.com'], 'cc_emails': ['sarah.wilson@example.com'], 'template_context': {'asset_name': 'MacBook Pro 16-inch M3, 32GB RAM, 1TB SSD', 'asset_tag': 'LT-MBP-001'}}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'cand_7', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_98",
        instruction="Ensure you handle a concluding audit for candidate cand_1. Make sure to address any unresolved issues, such as sending missing emails and resolving pending system access, and then change their status to 'Onboarded'. The meeting will be at 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_1'}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'candidate_id': 'cand_1', 'expected_email_types': ['welcome', 'orientation invitation', 'introduction']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'cand_1', 'template_name': 'welcome', 'to_emails': ['john.doe@example.com'], 'cc_emails': ['sarah.wilson@example.com']}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_1'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="UpdateAccessCheckStatus", kwargs={'candidate_id': 'cand_1', 'system_name': 'Email', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'cand_1', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_99",
        instruction="Ensure to handle a final audit for candidate cand_2. Attend to any unresolved issues, such as sending missing emails and completing pending tasks, then update their status to 'Onboarded'. The meeting is scheduled for 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="GetCandidateWithFullContext", kwargs={'candidate_id': 'cand_2'}),
            Action(name="GetAvailableEmailTypes", kwargs={}),
            Action(name="CheckEmailCommunicationGaps", kwargs={'candidate_id': 'cand_2', 'expected_email_types': ['orientation invitation', 'introduction']}),
            Action(name="CreateOrientationInvitationEmails", kwargs={'ready_candidate_ids': ['cand_2'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="UpdateTaskCompletionStatus", kwargs={'item_ids': ['item_4', 'item_5', 'item_6', 'item_7']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_id': 'cand_2', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_89",
        instruction="Coordinate the onboarding of two new Graphic Designers, Tony Stark and Pepper Potts. Their start date remains set for 2024-11-29. Tony's email is tony.stark@example.com while Pepper's is pepper.potts@example.com. Do not send any emails to Pepper Potts. Their manager is happy.hogan@example.com.",
        actions=[
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Tony Stark', 'role_title': 'Graphic Designer', 'start_date': '2024-11-29', 'candidate_email': 'tony.stark@example.com', 'manager_email': 'happy.hogan@example.com'}),
            Action(name="CreateNewCandidateRecord", kwargs={'candidate_name': 'Pepper Potts', 'role_title': 'Graphic Designer', 'start_date': '2024-11-29', 'candidate_email': 'pepper.potts@example.com', 'manager_email': 'happy.hogan@example.com'}),
            Action(name="GeneratePersonalizedWelcomeFile", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateRoleBasedChecklistTasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="CreateAssetRequestWithNotification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="SendEmailWithAttachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['tony.stark@example.com']}),
            Action(name="UpdateCandidateOnboardingStatus", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="RunAndRecordSystemAccessChecks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
]
