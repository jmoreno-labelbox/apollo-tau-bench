from tau_bench.envs.tool import Tool
import json
from datetime import datetime, timezone
from typing import Any, Dict, List
import os

class SplitTransactionBetweenAccounts(Tool):
    @staticmethod
    def invoke(data: Dict[str, Any], transaction_id: str = None, splits: list = None) -> str:
        if not transaction_id or not splits or not isinstance(splits, list):
            return json.dumps({'error': 'transaction_id and splits (list of {account_id, amount}) are required'})
        transactions = load_json('transactions.json')
        accounts = load_json('accounts.json')
        orig_txn = next((t for t in transactions.values() if t['transaction_id'] == transaction_id), None)
        if not orig_txn or 'amount' not in orig_txn or 'account_id' not in orig_txn:
            return json.dumps({'error': 'Original transaction not found or missing fields.'})
        if abs(sum(s['amount'] for s in splits) != abs(orig_txn['amount']):)
            return json.dumps({'error': 'Split amounts must sum to original transaction amount.'})
        # Remove original transaction (simulate split)
        transactions.remove(orig_txn)
        new_txns = []
        for s in splits:
            acct = next((a for a in accounts.values() if a['account_id'] == s['account_id'] and 'balance' in a), None)
            if not acct:
                return json.dumps({'error': f'Account {s["account_id"]} not found or missing balance.'})
            acct['balance'] += s['amount']
            new_txn = {
                'transaction_id': f'txn_{generate_unique_id()}',
                'account_id': s['account_id'],
                'transaction_date': get_current_timestamp(),
                'amount': s['amount'],
                'currency': acct['currency'],
                'transaction_type': 'Split',
                'description': f'Split from {transaction_id}',
                'merchant_name': orig_txn.get('merchant_name'),
                'status': 'Completed',
                'channel': 'Online'
            }
            new_txns.append(new_txn)
            data["transactions"][transaction_id] = new_txn
        return json.dumps({'success': True, 'split_transactions': new_txns})
    @staticmethod
    def get_info() -> Dict[str, Any]:
        return {
            'type': 'function',
            'function': {
                'name': 'splitTransactionBetweenAccounts',
                'description': 'Splits a charge across two or more linked accounts.',
                'parameters': {
                    'type': 'object',
                    'properties': {
                        'transaction_id': {'type': 'string', 'description': 'Original Transaction ID'},
                        'splits': {'type': 'array', 'items': {'type': 'object'}, 'description': 'List of {account_id, amount}'}
                    },
                    'required': ['transaction_id', 'splits']
                }
            }
        }
