from tau_bench.envs.tool import Tool
import json
from collections import Counter, defaultdict
from typing import Any

class AddLabelToIssue(Tool):
    """Attaches a label to the specified issue. Accommodates both aggregated and flat issue formats."""

    @staticmethod
    def invoke(data: dict[str, Any], repo_name: str = None, issue_number: int = None, label: str = None) -> str:
        if not all([repo_name, issue_number, label]):
            payload = {"error": "repo_name, issue_number, and label are required."}
            out = json.dumps(
                payload, indent=2
            )
            return out

        target = int(issue_number)

        #1) Facilitate aggregated blocks (original dataset structure)
        for block in _issues(data):
            if block.get("repo_name") != repo_name:
                continue
            if "issue_numbers" in block and "labels" in block:
                issue_numbers = block["issue_numbers"]
                if target in issue_numbers:
                    idx = issue_numbers.index(target)
                    labels_at_idx = list(set(block["labels"][idx] + [label]))
                    block["labels"][idx] = labels_at_idx
                    payload = {"message": f"Label '{label}' added."}
                    out = json.dumps(payload, indent=2)
                    return out

        #2) Facilitate flat rows (generated by CreateIssue)
        for row in _issues(data):
            if row.get("repo_name") == repo_name and row.get("number") == target:
                cur = set(row.get("labels", []))
                cur.add(label)
                row["labels"] = list(cur)
                payload = {"message": f"Label '{label}' added."}
                out = json.dumps(payload, indent=2)
                return out
        payload = {"error": "Issue not found."}
        out = json.dumps(payload, indent=2)
        return out
    @staticmethod
    def get_info():
        pass
        return {
            "type": "function",
            "function": {
                "name": "AddLabelToIssue",
                "description": "Adds a label to an issue.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "repo_name": {"type": "string"},
                        "issue_number": {"type": "integer"},
                        "label": {"type": "string"},
                    },
                    "required": ["repo_name", "issue_number", "label"],
                },
            },
        }
