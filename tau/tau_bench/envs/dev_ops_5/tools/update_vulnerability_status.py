from tau_bench.envs.tool import Tool
import json
from typing import Any



def _convert_db_to_list(db):
    """Convert database from dict format to list format."""
    if isinstance(db, dict):
        return list(db.values())
    return db

class UpdateVulnerabilityStatus(Tool):
    """Modifies the status of a vulnerability."""

    @staticmethod
    def invoke(
        data: dict[str, Any],
        id: Any = None,
        new_status: str = None,
        vuln_id: str = None,
        status: str = None
    ) -> str:
        # Support 'status' as an alternative to 'new_status'
        if status is not None:
            new_status = status
        vulnerabilities = data.get("vulnerabilities", [])
        for vuln in vulnerabilities:
            if vuln.get("id") == vuln_id:
                vuln["status"] = new_status
                payload = {
                    "status": "success",
                    "message": f"Status for vulnerability '{vuln_id}' updated to '{new_status}'.",
                }
                out = json.dumps(payload)
                return out
        payload = {"error": f"Vulnerability with ID '{vuln_id}' not found."}
        out = json.dumps(payload)
        return out
    @staticmethod
    def get_info() -> dict[str, Any]:
        return {
            "type": "function",
            "function": {
                "name": "UpdateVulnerabilityStatus",
                "description": "Updates the status of a vulnerability.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "id": {"type": "string"},
                        "status": {
                            "type": "string",
                            "description": "The new status (e.g., 'triaged', 'open', 'fixed').",
                        },
                    },
                    "required": ["id", "status"],
                },
            },
        }
