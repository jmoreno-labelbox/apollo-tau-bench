# Copyright Sierra

import json
from typing import Any, Dict, List, Optional
from tau_bench.envs.tool import Tool


class UpdateVulnerabilityStatus(Tool):
    """Updates the status of a vulnerability."""
    @staticmethod
    def invoke(data: Dict[str, Any], **kwargs) -> str:
        vuln_id = kwargs.get("id")
        new_status = kwargs.get("status")
        vulnerabilities = data.get("vulnerabilities", [])
        for vuln in vulnerabilities:
            if vuln.get("id") == vuln_id:
                vuln["status"] = new_status
                return json.dumps({"status": "success", "message": f"Status for vulnerability '{vuln_id}' updated to '{new_status}'."})
        return json.dumps({"error": f"Vulnerability with ID '{vuln_id}' not found."})
    @staticmethod
    def get_info() -> Dict[str, Any]:
        return {
            "type": "function",
            "function": {
                "name": "update_vulnerability_status",
                "description": "Updates the status of a vulnerability.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "id": {"type": "string"},
                        "status": {"type": "string", "description": "The new status (e.g., 'triaged', 'open', 'fixed')."}
                    },
                    "required": ["id", "status"],
                },
            },
        }
