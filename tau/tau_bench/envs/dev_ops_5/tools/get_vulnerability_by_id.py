from tau_bench.envs.tool import Tool
import json
from typing import Any



def _convert_db_to_list(db):
    """Convert database from dict format to list format."""
    if isinstance(db, dict):
        return list(db.values())
    return db

class GetVulnerabilityById(Tool):
    """Fetches a vulnerability using its ID."""

    @staticmethod
    def invoke(data: dict[str, Any], id: str = None) -> str:
        vuln_id = id
        vulnerabilities = data.get("vulnerabilities", [])
        for vuln in vulnerabilities:
            if vuln.get("id") == vuln_id:
                payload = vuln
                out = json.dumps(payload)
                return out
        payload = {"error": f"Vulnerability with ID '{vuln_id}' not found."}
        out = json.dumps(payload)
        return out
    @staticmethod
    def get_info() -> dict[str, Any]:
        return {
            "type": "function",
            "function": {
                "name": "getVulnerabilityById",
                "description": "Retrieves a vulnerability by its ID.",
                "parameters": {
                    "type": "object",
                    "properties": {"id": {"type": "string"}},
                    "required": ["id"],
                },
            },
        }
