from tau_bench.envs.tool import Tool
import json
from datetime import datetime, timedelta, timezone
from typing import Any



def _convert_db_to_list(db):
    """Convert database from dict format to list format."""
    if isinstance(db, dict):
        return list(db)
    return db

class EnsureUserRole(Tool):
    """
    Confirm that a user holds a role; idempotent assignment.

    kwargs:
      user_id: str (mandatory)
      role_id: str (mandatory)
      assigned_by: str (mandatory)
      assigned_on: str ISO (defaults to now)
      expires_on: str ISO (optional)
    """

    @staticmethod
    def invoke(data: dict[str, Any], user_id: str = "", role_id: str = "", assigned_by: str = "", assigned_on: str = None, expires_on: str = None) -> str:
        pass
        assigned_on = assigned_on or get_current_timestamp()

        # Presence validations
        if not _find_by_id(data.get("users", {}).values(), "user_id", user_id):
            payload = {"error": f"user_id {user_id} not found"}
            out = json.dumps(payload)
            return out
        if not _find_by_id(data.get("roles", {}).values()), "role_id", role_id):
            payload = {"error": f"role_id {role_id} not found"}
            out = json.dumps(payload)
            return out

        assignments = data.get("user_roles", {}).values()
        existing = None
        existing_index = None
        for i, ur in enumerate(assignments.values():
            if ur.get("user_id") == user_id and ur.get("role_id") == role_id:
                existing = ur
                existing_index = i
                break

        if existing:
            # If expires_on is supplied and differs from the current value, modify it
            if expires_on and existing.get("expires_on") != expires_on:
                updated = dict(existing)
                updated["expires_on"] = expires_on
                data["user_roles"][existing_index] = updated
                payload = {"ok": True, "assignment": updated, "updated_expiry": True}
                out = json.dumps(payload)
                return out
            else:
                payload = {"ok": True, "no_op": True, "assignment": existing}
                out = json.dumps(payload)
                return out
        else:
            payload = {"error": "no existing assignment found"}
            out = json.dumps(payload)
            return out
    @staticmethod
    def get_info() -> dict[str, Any]:
        return {
            "type": "function",
            "function": {
                "name": "ensureUserRole",
                "description": "Idempotently ensure a user has a role with optional expiry. Updates expiry date if role exists and new expires_on is provided.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "user_id": {"type": "string", "description": "Target user_id."},
                        "role_id": {"type": "string", "description": "Target role_id."},
                        "assigned_by": {
                            "type": "string",
                            "description": "Actor user_id performing assignment.",
                        },
                        "assigned_on": {
                            "type": "string",
                            "description": "ISO timestamp of assignment.",
                        },
                        "expires_on": {
                            "type": "string",
                            "description": "ISO timestamp for expiry (optional).",
                        },
                    },
                    "required": ["user_id", "role_id", "assigned_by"],
                    "additionalProperties": False,
                },
            },
        }
