# Copyright Sierra

import json
from typing import Any, Dict, List, Optional
from tau_bench.envs.tool import Tool


class SummarizeArticle(Tool):
    @staticmethod
    def invoke(data: Dict[str, Any], **kwargs) -> str:
        """
        Finds an article by its ID and returns a summary of its full text.
        The summary is generated by extracting the first three sentences.
        """
        article_id = kwargs.get('article_id')

        if not article_id:
            return json.dumps({"error": "article_id is required."})

        articles = list(data.get('articles', {}).values())
        for article in articles:
            if article.get('article_id') == article_id:
                full_text = article.get('full_text')
                if not full_text:
                    return json.dumps({"error": f"Article with ID '{article_id}' has no full text to summarize."})

                # Basic summarization method: extract the first three sentences.
                sentences = full_text.split('.')
                summary = ". ".join(sentences[:3]).strip()
                if summary:
                    summary += "."

                return json.dumps({"success": True, "article_id": article_id, "summary": summary})

        return json.dumps({"error": f"Article with ID '{article_id}' not found."})

    @staticmethod
    def get_info() -> Dict[str, Any]:
        """
        Returns the function schema for the language model.
        """
        return {
            "type": "function",
            "function": {
                "name": "summarize_article",
                "description": "Generates a concise summary of an article's full text using its ID.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "article_id": {"type": "string", "description": "The unique ID of the article to summarize."}
                    },
                    "required": ["article_id"]
                }
            }
        }
