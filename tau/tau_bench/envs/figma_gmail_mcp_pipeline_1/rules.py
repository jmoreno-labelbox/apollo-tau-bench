RULES = [
    "WORKFLOW 1a - DESIGN REVIEW STEP 1. Locate figma artifacts with a particular tag Apply filter_figma_artifacts_by_tags, with required kwargs: 'tags': <list_of_tags_to_filter_by> STEP 2. Export the located figma artifacts as assets Invoke export_figma_artifacts_to_assets, with required kwargs: 'artifact_ids': <list_of_artifacts_to_export>, 'export_profile': {'format': <one_of_['PNG', 'JPG', 'SVG', 'PDF']>, 'scale': <'1x', '2x' or '4x'>} STEP 3. Generate a gmail_threads record Call create_gmail_thread, with required kwargs: 'sender_email': <email_of_sender>, 'recipients_emails': ['design-review@company.com', 'ux-team@company.com'], 'workflow_type': <One of ['review', 'release']>, 'current_labels': <list_of_labels_to_apply_from: ['design-review', 'urgent', 'figma', 'mobile', 'feedback', 'ux', 'marketing', 'approval', 'launch', 'accessibility', 'audit', 'admin', 'brand', 'guidelines', 'update', 'design_system', 'components', 'library', 'implementation', 'profile', 'pricing', 'ab_testing', 'results', 'component', 'review', 'data_table', 'navigation', 'responsive', 'design_needs_review', 'design_approved', 'design_changes_requested', 'design_escalation', 'design_release']> STEP 4. For each artifact, create a review_cycles record Use create_review_cycle, with required kwargs: 'artifact_id': <artifact_id>, 'status': <one_of_['NEEDS_REVIEW', 'APPROVED', 'CHANGES_REQUESTED', 'ESCALATED', 'IN_FLIGHT']>, 'thread_id_nullable': <gmail_thread_id> STEP 5. Create a gmail_messages record Execute create_gmail_message, with required kwargs: 'sender_email': <email_of_sender>, 'workflow_type': 'review', 'thread_id': <gmail_thread_id>, 'attachments_asset_ids': <list_of_asset_ids> PARAMETER SOURCES Parameters for 'tags', 'export_profile', 'sender_email', 'current_labels', and 'status' (must be 'NEEDS_REVIEW') should be provided by the instructions. All other parameters must be taken from the outputs of previous steps. WORKFLOW 1b - DESIGN APPROVAL STEP 1. Generate a figma comment record from a gmail message Use create_figma_comment_from_gmail_message, with required kwargs: 'artifact_id': <artifact_id>, 'gmail_message_id': <gmail_message_id> STEP 2. Update the corresponding review cycle Call update_review_cycle_status, with required kwargs: 'cycle_id': <review_cycle_id>, 'new_status': <one_of_['NEEDS_REVIEW', 'APPROVED', 'CHANGES_REQUESTED', 'ESCALATED', 'IN_FLIGHT']> STEP 3. If the status is approved, create a review approval record Invoke create_review_approval, with required kwargs: 'cycle_id': <review_cycle_id>, and either or both 'approval_comment_id': <approval_comment_id> and/or 'approver_email': <approver_email> WORKFLOW 2 - DESIGN RELEASE STEP 1. Determine if the version is a release version (proceed with the workflow regardless) Use detect_release_version, with required kwargs: 'release_id': <release_id> STEP 2. Calculate differences Apply compute_release_diffs, with required kwargs: 'release_id': <release_id>, 'changelog_highlights': <a list of short (3-6 words) descriptions of release changes> STEP 3. Store the calculated differences Use save_release_diffs, with required kwargs: 'release_id': <release_id>, 'prior_release_id_nullable': <prior_release_id>, 'frames_added': <frames_added>, 'frames_updated': <frames_updated>, 'frames_removed': <frames_removed>, 'component_version_bumps': <component_version_bumps>, 'changelog_highlights': <changelog_highlights> STEP 4. Retrieve frames tagged as 'hero' Call filter_figma_artifacts_by_tags, with required kwargs: 'tags': ['hero'] STEP 5. Export 'hero' frames as assets Invoke export_figma_artifacts_to_assets, with required kwargs: 'artifact_ids': <list_of_hero_artifact_ids>, 'export_profile': {'format': <one_of_['PNG', 'JPG', 'SVG', 'PDF']>, 'scale': <'1x', '2x' or '4x'>} STEP 6. Produce before/after visuals Execute generate_before_after_visuals, with required kwargs: 'release_id': <release_id>, 'hero_artifact_ids': <list_of_hero_artifact_ids> STEP 7. Create a release gmail_message Use create_gmail_message, with required kwargs: 'sender_email': <email_of_sender>, 'workflow_type': 'release', 'thread_id': <gmail_thread_id>, 'attachments_asset_ids': <list_of_asset_ids> STEP 8. Generate a gmail_threads record Call create_gmail_thread, with required kwargs: 'sender_email': <email_of_sender>, 'recipients_emails': <list_of_recipient_emails>, 'workflow_type': 'release', 'current_labels': <list_of_current_labels> PARAMETER SOURCES The instructions must provide: release_id, changelog_highlights, sender_email, recipients_emails. All other parameters are to be derived from prior outputs. WORKFLOW 3a - DESIGN SYSTEM AUDIT STEP 1. Initiate an audit session Use create_audit_session, with required kwargs: 'artifact_id': <artifact_id>, 'audit_type': 'DS_MAPPING' STEP 2. Detect custom groups and map them to DS components Invoke identify_custom_groups_and_map_to_ds_components, with required kwargs: 'audit_id': <audit_id> STEP 3. Log findings in audit_findings_ds Apply record_ds_audit_findings, with required kwargs: 'audit_id': <audit_id>, 'layer_id': <layer_id>, 'layer_name': <layer_name>, 'finding_type': <finding_type>, 'recommended_component_id_nullable': <recommended_component_id_nullable>, 'severity': <severity> STEP 4. Create a PDF report Use generate_audit_report, with required kwargs: 'audit_id': <audit_id> STEP 5. Set audit status Call update_audit_status, with required kwargs: 'audit_id': <audit_id>, 'status': 'COMPLETED' STEP 6. Associate audit report asset Invoke link_audit_report_asset, with required kwargs: 'audit_id': <audit_id>, 'report_asset_id': <asset_id> PARAMETER SOURCES Instructions should ONLY provide: artifact_id. All other parameters must be sourced from previous outputs. OUTPUTS Return only the IDs of newly created database records. WORKFLOW 3b - ACCESSIBILITY CHECK/AUDIT STEP 1. Obtain artifact_id using artifact_name Call get_artifact_id_from_name, with required kwargs: 'artifact_name': <artifact_name> STEP 2. Start an audit session Use create_audit_session, with required kwargs: 'artifact_id': <artifact_id>, 'audit_type': 'A11Y' STEP 3. Assess accessibility Invoke evaluate_accessibility, with required kwargs: 'artifact_id': <artifact_id> STEP 4. Document findings in audit_findings_a11y Apply record_accessibility_audit_findings, with required kwargs: 'audit_id': <audit_id>, 'layer_id': <layer_id>, 'layer_name': <layer_name>, 'violation_type': <violation_type>, 'violation_details_json': <violation_details_json>, 'severity': <severity>, 'recommended_fix_summary': <recommended_fix_summary> STEP 5. Produce a PDF report Use generate_audit_report, with required kwargs: 'audit_id': <audit_id> STEP 6. Change audit status Call update_audit_status, with required kwargs: 'audit_id': <audit_id>, 'status': 'COMPLETED' STEP 7. Link the audit report asset Invoke link_audit_report_asset, with required kwargs: 'audit_id': <audit_id>, 'report_asset_id': <asset_id> PARAMETER SOURCES Instructions must ONLY supply: artifact_name. All other parameters are to be obtained from previous action outputs. OUTPUTS Return only the IDs of new database entries. WORKFLOW 3c - COMBINED DESIGN SYSTEM AND ACCESSIBILITY AUDIT STEP 1. Retrieve artifact_id from artifact_name Execute get_artifact_id_from_name, with required kwargs: 'artifact_name': <artifact_name> STEP 2. Begin an audit session Use create_audit_session, with required kwargs: 'artifact_id': <artifact_id>, 'audit_type': 'COMBINED_DS_A11Y' STEP 3. Detect custom groups and map to DS components Invoke identify_custom_groups_and_map_to_ds_components, with required kwargs: 'audit_id': <audit_id> STEP 4. Record findings in audit_findings_ds Apply record_ds_audit_findings, with required kwargs: 'audit_id': <audit_id>, 'layer_id': <layer_id>, 'layer_name': <layer_name>, 'finding_type': <finding_type>, 'recommended_component_id_nullable': <recommended_component_id_nullable>, 'severity': <severity> STEP 5. Perform accessibility evaluation Use evaluate_accessibility, with required kwargs: 'artifact_id': <artifact_id> STEP 6. Log findings in audit_findings_a11y Call record_accessibility_audit_findings, with required kwargs: 'audit_id': <audit_id>, 'layer_id': <layer_id>, 'layer_name': <layer_name>, 'violation_type': <violation_type>, 'violation_details_json': <violation_details_json>, 'severity': <severity>, 'recommended_fix_summary': <recommended_fix_summary> STEP 8. Generate a PDF report Invoke generate_audit_report, with required kwargs: 'audit_id': <audit_id> STEP 9. Update the audit status Use update_audit_status, with required kwargs: 'audit_id': <audit_id>, 'status': 'COMPLETED' STEP 10. Link the audit report asset Call link_audit_report_asset, with required kwargs: 'audit_id': <audit_id>, 'report_asset_id': <asset_id> OUTPUTS Return only the IDs of new database records. PARAMETER SOURCES Instructions should ONLY provide: artifact_id. All other parameters must be sourced from previous steps. WORKFLOW 4 - FIX PLAN AND HANDOFF STEP 1. Retrieve audit findings Use load_audit_findings, with required kwargs: 'audit_id': <audit_id> STEP 2. Rank findings by priority Invoke prioritize_audit_findings, with required kwargs: 'finding_ids_list': <finding_ids_list> STEP 3. Generate a fix plan Apply create_fix_plan, with required kwargs: 'audit_id': <audit_id>, 'owner_email': <owner_email> STEP 4. Create fix items sequentially Use create_fix_item, with required kwargs: 'plan_id': <plan_id>, 'finding_id': <finding_id> STEP 5. Create and send the fix plan Call create_and_deliver_fix_plan, with required kwargs: 'plan_id': <plan_id> STEP 6. Inform stakeholders Invoke notify_stakeholders, with required kwargs: 'plan_id': <plan_id>, 'stakeholder_emails': <list_of_stakeholder_emails>, 'audit_id': <audit_id>, 'status': <status>, 'owner_email': <owner_email> PARAMETER SOURCES Instructions must ONLY provide: audit_id, owner_email. All other parameters are to be derived from outputs of previous steps. OUTPUTS Return only the IDs of newly created database records.",
]

# **Sample Workflow:**
# 1. Retrieve audit results from Tasks 3.
# 2. Rank based on severity, impact, and simplicity of resolution.
# 3. Implement change budget (maximum of 5 items per frame)
# 4. Create repair recommendations in `fix_items`
# 5. Send using selected approach:
# - **COMMENTS:** Comments anchored in Figma after posting
# - **TICKETS:** Generate tickets for external tracking
# - **PDF:** Generate handoff document for export
# 6. Inform owners and arrange subsequent meetings.
