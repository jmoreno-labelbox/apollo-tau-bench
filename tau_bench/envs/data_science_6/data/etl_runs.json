{
  "etl_001": {
    "run_id": "etl_001",
    "input_paths": [
      "/data/raw/weather_sf_20240315.json",
      "/data/raw/tide_pred_9414290.json"
    ],
    "output_paths": [
      "/data/processed/timeseries_sf_weather.csv",
      "/processed_data/merged_timeseries.csv"
    ],
    "status": "succeeded",
    "started_ts": "2024-03-16T14:00:00Z",
    "finished_ts_nullable": "2024-03-16T14:22:00Z",
    "messages": [
      "Starting ETL pipeline for Oakland weather data",
      "Processing weather forecast data: 168 records",
      "Processing tide prediction data: 168 records",
      "Joining datasets on timestamp",
      "Applied data cleaning rules: filled 3 missing precipitation values",
      "Output saved to processed timeseries file",
      "Generated merged_timeseries.csv with required columns: timestamp, precipitation_mm_hr, temperature_2m_c, wind_speed_10m_ms, tide_pred_m, water_level_m, pressure_hpa",
      "Created QC figures: precip_vs_tide.png and water_level_vs_pressure.png"
    ],
    "script_inline_nullable": "import pandas as pd\nimport json\n\ndef process_weather_data(weather_path, tide_path, output_path):\n    # Load data\n    with open(weather_path) as f:\n        weather = json.load(f)\n    # Process and join...\n    return output_path"
  },
  "etl_002": {
    "run_id": "etl_002",
    "input_paths": [
      "/data/raw/weather_miami_20240201.json",
      "/data/raw/tide_pred_8723214.json"
    ],
    "output_paths": [
      "/data/processed/timeseries_miami_weather.csv"
    ],
    "status": "failed",
    "started_ts": "2024-02-02T10:30:00Z",
    "finished_ts_nullable": "2024-02-02T10:35:00Z",
    "messages": [
      "Starting ETL pipeline for Orlando weather data",
      "ERROR: Tide prediction file missing required timestamps",
      "Pipeline failed: timestamp alignment error"
    ],
    "script_inline_nullable": null
  },
  "etl_003": {
    "run_id": "etl_003",
    "input_paths": [
      "/data/processed/timeseries_sf_weather.csv"
    ],
    "output_paths": [
      "/data/processed/features_sf.csv",
      "/data/processed/targets_sf.csv"
    ],
    "status": "started",
    "started_ts": "2024-03-18T09:00:00Z",
    "finished_ts_nullable": null,
    "messages": [
      "Starting feature engineering pipeline",
      "Generating lag features for precipitation and tide height"
    ],
    "script_inline_nullable": "import pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n\ndef create_features(df):\n    # Feature engineering logic\n    pass"
  },
  "etl_004": {
    "run_id": "etl_004",
    "input_paths": [
      "/data/raw/weather_boston_20240301.json",
      "/data/raw/coastal_met_8443970.json"
    ],
    "output_paths": [
      "/data/processed/timeseries_boston_weather.csv"
    ],
    "status": "succeeded",
    "started_ts": "2024-03-01T13:00:00Z",
    "finished_ts_nullable": "2024-03-01T13:18:00Z",
    "messages": [
      "Starting ETL pipeline for Providence weather data",
      "Processing weather forecast data: 96 records",
      "Processing coastal meteorology data: 120 records",
      "Successfully merged datasets",
      "Applied data validation rules: removed 2 outlier values",
      "Output saved to processed timeseries file"
    ],
    "script_inline_nullable": "import pandas as pd\nimport numpy as np\n\ndef process_boston_data(weather_path, met_path, output_path):\n    # Data processing pipeline\n    return output_path"
  },
  "etl_005": {
    "run_id": "etl_005",
    "input_paths": [
      "/data/raw/weather_seattle_20240201.json",
      "/data/raw/coastal_met_9447130.json"
    ],
    "output_paths": [
      "/data/processed/timeseries_seattle_weather.csv"
    ],
    "status": "succeeded",
    "started_ts": "2024-02-01T15:00:00Z",
    "finished_ts_nullable": "2024-02-01T15:25:00Z",
    "messages": [
      "Starting ETL pipeline for Portland weather data",
      "Processing weather forecast data: 240 records",
      "Processing coastal meteorology data: 96 records",
      "Time-aligned datasets successfully",
      "Applied regional correction factors for Pacific Northwest",
      "Output saved to processed timeseries file"
    ],
    "script_inline_nullable": "import pandas as pd\nfrom datetime import datetime\n\ndef process_seattle_data(weather_path, met_path, output_path):\n    # Regional processing logic\n    return output_path"
  }
}