from tau_bench.envs.tool import Tool
import json
from collections import Counter, defaultdict
from typing import Any

class UpdateIssue(Tool):
    """Modifies the fields of an issue. Accommodates both aggregated blocks and flat issue rows."""

    @staticmethod
    def invoke(
        data: dict[str, Any],
        repo_name: str = None,
        issue_number: int = None,
        state: str = None,
        updates: str = None,
        title: str = None,
        body: str = None,
        labels: list = None
    ) -> str:
        # Allow either `state` or legacy `updates` for compatibility
        new_state = state or updates
        new_title = title
        new_body = body
        new_labels = labels  # substitute the complete label list if supplied

        if not repo_name or issue_number is None:
            payload = {"error": "repo_name and issue_number are required."}
            out = json.dumps(
                payload, indent=2
            )
            return out

        target = int(issue_number)

        # 1) Aggregated blocks (shape of the original dataset)
        for block in _issues(data):
            if block.get("repo_name") != repo_name:
                continue

            nums = block.get("issue_numbers")
            if isinstance(nums, list) and target in nums:
                idx = nums.index(target)

                # Verify that parallel arrays are present and sufficiently long, then update them in place
                def _ensure_len(lst, fill, n):
                    if lst is None or not isinstance(lst, list):
                        lst = []
                    if len(lst) < n:
                        lst += [fill] * (n - len(lst))
                    return lst

                n = len(nums)

                if new_state is not None:
                    states = _ensure_len(block.get("issue_states"), "open", n)
                    states[idx] = new_state
                    block["issue_states"] = states

                if new_title is not None:
                    titles = _ensure_len(block.get("issue_titles"), "", n)
                    titles[idx] = new_title
                    block["issue_titles"] = titles

                if new_body is not None:
                    bodies = _ensure_len(block.get("issue_bodies"), "", n)
                    bodies[idx] = new_body
                    block["issue_bodies"] = bodies

                if new_labels is not None:
                    labels = _ensure_len(block.get("labels"), [], n)
                    labels[idx] = list(new_labels)
                    block["labels"] = labels

                # Update updated_ts if it exists
                if "updated_ts" in block and isinstance(block["updated_ts"], list):
                    from datetime import datetime, timezone

                    iso = (
                        datetime.now(timezone.utc)
                        .isoformat(timespec="seconds")
                        .replace("+00:00", "Z")
                    )
                    uts = _ensure_len(block.get("updated_ts"), iso, n)
                    uts[idx] = iso
                    block["updated_ts"] = uts
                payload = {
                    "message": "Issue updated",
                    "number": target,
                    "state": (new_state or block.get("issue_states", [None])[idx]),
                }
                out = json.dumps(
                    payload, indent=2,
                )
                return out

        # 2) Flat rows (generated by CreateIssue)
        for row in _issues(data):
            if row.get("repo_name") == repo_name and row.get("number") == target:
                if new_state is not None:
                    row["state"] = new_state
                if new_title is not None:
                    row["title"] = new_title
                if new_body is not None:
                    row["body"] = new_body
                if new_labels is not None:
                    row["labels"] = list(new_labels)
                payload = {
                    "message": "Issue updated",
                    "number": target,
                    "state": row.get("state"),
                }
                out = json.dumps(
                    payload, indent=2,
                )
                return out
        payload = {"error": "Issue not found."}
        out = json.dumps(payload, indent=2)
        return out
    @staticmethod
    def get_info():
        pass
        return {
            "type": "function",
            "function": {
                "name": "UpdateIssue",
                "description": "Updates an issue's fields (state/title/body/labels).",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "repo_name": {"type": "string"},
                        "issue_number": {"type": "integer"},
                        "state": {"type": "string"},
                        "title": {"type": "string"},
                        "body": {"type": "string"},
                        "labels": {"type": "array", "items": {"type": "string"}},
                        "updates": {"type": "string"},  #historical alias for state
                    },
                    "required": ["repo_name", "issue_number"],
                },
            },
        }
