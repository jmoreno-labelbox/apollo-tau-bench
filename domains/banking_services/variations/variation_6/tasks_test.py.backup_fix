from tau_bench.types import Action, Task

TASKS = [
        Task(
                annotator="0",
                user_id="task_01",
                instruction="Being an existing bank customer, Kenji Tanaka, your aim is to check the current balance for both your checking and savings accounts, as well as the total balance across all accounts. Also, confirm the rewards points on your credit card account. Conclude by transferring $100 from your checking account to your savings account with 'Personal transfer' noted in the description.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="CalculateSum", kwargs={"values": ["5230.5", "15780.0"]}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_crd_1003"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_1001", "destination_account_id": "acc_sav_1002", "amount": 100.0, "description": "Personal transfer"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                ],
                outputs=['"account_id": "acc_chk_1001", "balance": 5230.5, "currency": "USD"', '"account_id": "acc_sav_1002", "balance": 15780.0, "currency": "USD"',
                         '"total": 21010.5', '"rewards_points": 5200', '"account_id": "acc_chk_1001", "balance": 5130.5', '"account_id": "acc_sav_1002", "balance": 15880.0']
        ),
        Task(
                annotator="0",
                user_id="task_02",
                instruction="Identify yourself as Elena Popescu. Having recently relocated, update your address to 987 Birch St, New City, ON, L1V 2T7, Canada. You also need to revise your primary phone number to 555-999-8888. Following this, review the transaction history for your checking account from the past 30 days. Today is 2023-11-15; disregard other dates as today's date.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="UpdateCustomerAddress",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "street_address": "987 Birch St", "city": "New City", "state": "ON",
                                       "postal_code": "L1V 2T7", "country": "Canada"}),
                        Action(name="UpdateCustomerPhone", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "new_phone_number": "555-999-8888"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetAccountTransactions", kwargs={"account_id": "acc_chk_2001", "days_history": 30, "current_date": "2023-11-15"}),
                ],
                outputs=['"street_address": "987 Birch St", "city": "New City", "postal_code": "L1V 2T7"', '"number": "555-999-8888"',
                         '"transaction_id": "txn_5d4e7g1i-5e7c-8d3g-3e6i-9g1e3f7h8d4d"', '"transaction_id": "txn_4e5f8h2j-6f8d-9e4h-4f7j-1h2f4g8i9e5e"']
        ),
        Task(
                annotator="0",
                user_id="task_03",
                instruction="You are Kenji Tanaka, planning to close your credit card account. First, settle the pending balance using your primary checking account, ensuring 'Pay off credit card balance for closure' is the description in the transaction.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_crd_1003"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_1001", "destination_account_id": "acc_crd_1003", "amount": 2500.00,
                                       "description": "Pay off credit card balance for closure"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_crd_1003", "new_status": "Closed"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_crd_1003"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                ],
                outputs=['"account_id": "acc_crd_1003", "status": "Closed"']
        ),
        Task(
                annotator="0",
                user_id="task_04",
                instruction="As a new customer, Emily Carter, you aim to open a new checking account. Your birthdate is February 14, 1993, your email is emily.c@email.com, your phone number is 555-555-5555, and your address is 456 Birch Street, Springfield, IL 62704, USA. Earning an annual income of $72,000, you seek to apply for a $5,000 personal loan for a vacation over 24 months. Use 'Vacation' as the purpose for the loan application.",
                actions=[
                        Action(name="CreateCustomer",
                               kwargs={"first_name": "Emily", "last_name": "Carter", "dob": "1993-02-14", "email": "emily.c@email.com",
                                       "phone": "555-555-5555", "street": "456 Birch Street", "city": "Springfield", "postal_code": "62704", "country": "USA",
                                       "annual_income": 72000}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "customer_generated_27"}),
                        Action(name="CreateAccount",
                               kwargs={"customer_id": "customer_generated_27", "account_type": "Checking", "currency": "USD"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="CreateLoanApplication",
                               kwargs={"customer_id": "customer_generated_27", "loan_type": "Personal", "amount": 5000, "term": 24,
                                       "purpose": "Vacation", "annual_income": 72000}),
                        Action(name="GetLoanApplicationDetails", kwargs={"application_id": "app_generated_21"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_generated_40"}),
                ],
                outputs=['"application_id": "app_generated_21", "application_status": "Submitted"', '"account_id": "acc_generated_40"']
        ),
        Task(
                annotator="0",
                user_id="task_05",
                instruction="You are Kenji Tanaka, seeking to designate your father, Jean-Pierre Dubois, as a beneficiary. His account is in France with IBAN FR7630002005500000157845Z25 at Societe Generale. After adding him, set up a recurring monthly payment of â‚¬100 from your checking account, starting on the first of next month.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Chloe", "last_name": "Dubois"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                        Action(name="AddBeneficiary",
                               kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2", "name": "Jean-Pierre Dubois",
                                       "relationship": "Father", "iban": "FR7630002005500000157845Z25", "bank_name": "Societe Generale", "country": "France"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_9001"}),
                        Action(name="CreateScheduledPayment",
                               kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2", "source_account_id": "acc_chk_9001",
                                       "beneficiary_id": "bene_generated_11", "amount": 100.00, "frequency": "Monthly", "start_date": "2025-08-01"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_generated_41"}),
                ],
                outputs=['"payment_id": "sp_generated_41", "status": "Active", "amount": 100.00, "beneficiary_id": "bene_generated_11"']
        ),
        Task(
                annotator="0",
                user_id="task_06",
                instruction="Handle a payment of $250 to your friend Kenji Tanaka with the account holder name as Elena Popescu. Start by transferring $300 from your savings to your checking account to ensure adequate funds. Then, execute the payment. Label the first transfer as 'Transfer to checking for payment' and the second transaction as 'Payment to Kenji Tanaka'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_2002"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_sav_2002", "destination_account_id": "acc_chk_2001", "amount": 300.00,
                                       "description": "Transfer to checking for payment"}),
                        Action(name="GetBeneficiaryByName", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "beneficiary_name": "Kenji Tanaka"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_2001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_2001", "destination_account_id": "1122334455", "amount": 250.00,
                                       "description": "Payment to Kenji Tanaka"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_2002"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_2001"}),
                ],
                outputs=['"transaction_id": "txn_generated_41", "amount": -300, "status": "Completed"', '"transaction_id": "txn_generated_42", "amount": -250.0, "status": "Completed"']
        ),
        Task(
                annotator="0",
                user_id="task_07",
                instruction="As customer Zoltan Nagy, you have identified a suspicious transaction with 'E-Trade' associated with transaction ID txn_1h8i2k5m-9i2g-3h7k-7i1m-4k5i7j2l3h8h in your investment account. It is crucial to report this and request that the account be immediately frozen. Include in the ticket the message 'Suspicious transaction detected: txn_1h8i2k5m-9i2g-3h7k-7i1m-4k5i7j2l3h8h'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetTransactionDetails", kwargs={"transaction_id": "txn_1h8i2k5m-9i2g-3h7k-7i1m-4k5i7j2l3h8h"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "category": "Security", "priority": "High",
                                       "details": "Suspicious transaction detected: txn_1h8i2k5m-9i2g-3h7k-7i1m-4k5i7j2l3h8h", "target_entity": "Account",
                                       "target_id": "acc_inv_3002"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_inv_3002", "new_status": "Frozen"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_inv_3002"}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open"', '"account_id": "acc_inv_3002", "status": "Frozen"']
        ),
        Task(
                annotator="0",
                user_id="task_08",
                instruction="You are identified as Kenji Tanaka. Given your outstanding financial status, you intend to request an increase in your credit card limit to $15,000 and submit the request for review. The ticket should state 'Requesting credit limit increase to 15000. Current limit: 10000. Annual Income: 120000. Credit Score: 780.' Furthermore, you plan to transfer $150 from your checking to your savings account. Mark the transfer as 'Transfer to savings'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_crd_1003"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "category": "Account Management",
                                       "priority": "Medium",
                                       "details": "Requesting credit limit increase to 15000. Current limit: 10000. Annual Income: 120000. Credit Score: 780.",
                                       "target_entity": "Account", "target_id": "acc_crd_1003"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_1001", "destination_account_id": "acc_sav_1002", "amount": 150.00, "description": "Transfer to savings"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open", "category": "Account Management", "priority": "Medium"',
                         '"account_id": "acc_chk_1001", "balance": 5080.5', '"account_id": "acc_sav_1002", "balance": 15930.0']
        ),
        Task(
                annotator="0",
                user_id="task_09",
                instruction="You are Kenji Tanaka with an ongoing auto loan. You are contemplating refinancing terms to see what the monthly payment will be if the interest rate reduces to 3.5% for the remaining loan term. Once confirmed, choose to make an additional payment of $100 from your checking account towards this loan and verify the updated loan balance. Tag the transaction as 'Extra auto loan payment'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_auto_002"}),
                        Action(name="CalculateNewLoanPayment", kwargs={"current_balance": 15670.8, "new_interest_rate": 3.5, "remaining_term_months": 18}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_1001", "destination_account_id": "acc_auto_1004", "amount": 100.0, "description": "Extra auto loan payment"}),
                        Action(name="UpdateLoanBalance", kwargs={"loan_id": "loan_auto_002", "amount": -100.0}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_auto_002"}),
                ],
                outputs=['"new_monthly_payment": 894.92', '"loan_id": "loan_auto_002", "current_balance": 15570.8']
        ),
        Task(
                annotator="0",
                user_id="task_10",
                instruction="Your name is Chloe Dubois, a German customer who recently relocated to Manchester, UK. Update your residential address to 15 Abbey Road, Manchester, NW8 9AY, United Kingdom, and also change your phone number to +44 7890 123456. After updating your details, examine the list of account types available in Great British Pounds (GBP) offered by the bank and proceed to open a 'Checking' account in that currency.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Hans", "last_name": "MÃ¼ller"}),
                        Action(name="UpdateCustomerAddress",
                               kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1", "street_address": "15 Abbey Road", "city": "Manchester", "state": "",
                                       "postal_code": "NW8 9AY", "country": "United Kingdom"}),
                        Action(name="UpdateCustomerPhone", kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1", "new_phone_number": "+44 7890 123456"}),
                        Action(name="ListAccountTypesByCurrency", kwargs={"currency": "GBP"}),
                        Action(name="CreateAccount", kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1", "account_type": "Checking", "currency": "GBP"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_generated_40"}),
                ],
                outputs=['"country": "United Kingdom"', '"number": "+44 7890 123456"', '"currency": "GBP", "available_account_types": ["Checking", "Savings", "ISA"]',
                         '"account_id": "acc_generated_40", "status": "Active"']
        ),
        Task(
                annotator="0",
                user_id="task_11",
                instruction="Your name is Zoltan Nagy. You plan to check the status of your mortgage application and also apply an additional payment of $1000 to your ongoing mortgage from your checking account. Use the description 'Extra mortgage payment' for this transaction. Subsequently, confirm the updated balances for both the loan and the checking account.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetCustomerLoanApplications", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetLoanApplicationDetails", kwargs={"application_id": "app_e3a1b4c2-8d7e-4f6a-9c8b-2a1d5e8c7b4f"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_mort_001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_3001", "destination_account_id": "acc_mort_3003", "amount": 1000.00,
                                       "description": "Extra mortgage payment"}),
                        Action(name="UpdateLoanBalance", kwargs={"loan_id": "loan_mort_001", "amount": -1000.00}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_mort_001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                ],
                outputs=['"application_status": "Approved"', '"loan_id": "loan_mort_001", "current_balance": 714240.5', '"account_id": "acc_chk_3001", "balance": 11540.25']
        ),
        Task(
                annotator="0",
                user_id="task_12",
                instruction="You're identified as Sofia Andersson, a current customer. With an annual income of $15,000 as a student, you wish to initiate a new credit card account in USD. Additionally, examine the status and current balance of your existing student loan. Finally, ensure your occupation is updated to 'Graduate Student'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Maria", "last_name": "Garcia"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "f4g5h6i7-j8k9-l0m1-n2o3-p4q5r6s7t8u9"}),
                        Action(name="CreateAccount",
                               kwargs={"customer_id": "f4g5h6i7-j8k9-l0m1-n2o3-p4q5r6s7t8u9", "account_type": "Credit Card", "currency": "USD"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "f4g5h6i7-j8k9-l0m1-n2o3-p4q5r6s7t8u9"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_stud_004"}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "f4g5h6i7-j8k9-l0m1-n2o3-p4q5r6s7t8u9", "field": "occupation", "value": "Graduate Student"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "f4g5h6i7-j8k9-l0m1-n2o3-p4q5r6s7t8u9"}),
                ],
                outputs=['"account_id": "acc_generated_40", "account_type": "Credit Card", "status": "Active"',
                         '"loan_id": "loan_stud_004", "status": "In Grace Period", "current_balance": 25000.0', '"occupation": "Graduate Student"']
        ),
        Task(
                annotator="0",
                user_id="task_13",
                instruction="You are called Adetokunbo Adebayor. Arrange to close your savings account and move its full balance to your checking account. Use the description 'Account closure'. Once done, update your marital status to 'Divorced' and remove Yuki Tanaka, your ex-wife, as a beneficiary. Lastly, request a list of your remaining active accounts along with their balances.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Kenji", "last_name": "Tanaka"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_10002"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_sav_10002", "destination_account_id": "acc_chk_10001", "amount": 15000000.00,
                                       "description": "Account closure"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_sav_10002", "new_status": "Closed"}),
                        Action(name="GetBeneficiaryByName", kwargs={"customer_id": "f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3", "beneficiary_name": "Yuki Tanaka"}),
                        Action(name="RemoveBeneficiary", kwargs={"beneficiary_id": "bene_2b1c9d8e-7f6a-5b4c-3d2e-1f0a9b8c7d6e"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3"}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3", "field": "marital_status", "value": "Divorced"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_10001"}),
                ],
                outputs=['"marital_status": "Divorced"', '"action": "removed"', '"account_id": "acc_chk_10001", "balance": 17500000.0']
        ),
        Task(
                annotator="0",
                user_id="task_14",
                instruction="The name you use is Oliver Williams. Retrieve a list of all your current beneficiaries and then remove 'Dubai International School' from it. Subsequently, organize a transfer of 1000 AED from your checking to your savings account. Use the description 'Transfer to savings'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Fatima", "last_name": "Al-Fassi"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6"}),
                        Action(name="GetBeneficiaryByName", kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6", "beneficiary_name": "Dubai International School"}),
                        Action(name="RemoveBeneficiary", kwargs={"beneficiary_id": "bene_1c9d8e7f-6a5b-4c3d-2e1f-0a9b8c7d6e5f"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_7001", "destination_account_id": "acc_sav_7002", "amount": 1000.0, "description": "Transfer to savings"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_7001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_7002"}),
                ],
                outputs=[
                        '"beneficiary_id": "bene_1c9d8e7f-6a5b-4c3d-2e1f-0a9b8c7d6e5f", "beneficiary_name": "Dubai International School", "beneficiary_type": "Business", "relationship": "School"',
                        '"beneficiary_id": "bene_1c9d8e7f-6a5b-4c3d-2e1f-0a9b8c7d6e5f", "action": "removed"',
                        '"account_id": "acc_chk_7001", "balance": 149000.0',
                        '"account_id": "acc_sav_7002", "balance": 751000.0'
                ],
        ),
        Task(
                annotator="0",
                user_id="task_15",
                instruction="You are recognized as Zoltan Nagy, and you seek a deferral for your forthcoming business loan payment (loan_biz_005). Submit this request through a support ticket and proceed with a minor principal payment of 50 EUR from your checking account to the loan account. Use the description 'Principal payment on business loan' for this transaction. The support ticket should contain the content 'Requesting payment deferral for loan loan_biz_005.'",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Liam", "last_name": "O'Connor"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5-11"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_biz_005"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5-11", "category": "Loan", "priority": "Medium",
                                       "details": "Requesting payment deferral for loan loan_biz_005.", "target_entity": "Loan", "target_id": "loan_biz_005"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_12001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_12001", "destination_account_id": "acc_loan_12002", "amount": 50.00,
                                       "description": "Principal payment on business loan"}),
                        Action(name="UpdateLoanBalance", kwargs={"loan_id": "loan_biz_005", "amount": -50.00}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_biz_005"}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open"', '"current_balance": 45100.9']
        ),
        Task(
                annotator="0",
                user_id="task_16",
                instruction="Manage the transition to paperless billing for yourself, Sofia Andersson, and change your communication preference to 'App'. Report your lost debit card for the checking account and ensure that the account is immediately frozen. The generated support ticket should state 'Customer reported lost debit card for account acc_chk_6001.'",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Oliver", "last_name": "Williams"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5"}),
                        Action(name="UpdateCustomerPreferences",
                               kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5", "paperless_billing": True, "communication_channel": "App"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5", "category": "Security", "priority": "High",
                                       "details": "Customer reported lost debit card for account acc_chk_6001.", "target_entity": "Account", "target_id": "acc_chk_6001"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_chk_6001", "new_status": "Frozen"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_6001"}),
                ],
                outputs=['"paperless_billing": true, "communication_channel": "App"', '"status": "Frozen"']
        ),
        Task(
                annotator="0",
                user_id="task_17",
                instruction="Orchestrate the process of opening a new account for Brian Wilson. Your date of birth is 1970-01-01, with email brian.w@test.com, phone 111-222-3333, and address 10 Beach Rd, LA, 90210, USA. With an annual income of $200,000, proceed to establish both checking and savings accounts in USD, making initial deposits of $10,000 and $25,000 labeled as 'Initial deposit'. Finally, verify the closing balances for each account.",
                actions=[
                        Action(name="CreateCustomer",
                               kwargs={"first_name": "Brian", "last_name": "Wilson", "dob": "1970-01-01", "email": "brian.w@test.com",
                                       "phone": "111-222-3333", "street": "10 Beach Rd", "city": "LA", "postal_code": "90210", "country": "USA", "annual_income": 200000}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "customer_generated_27"}),
                        Action(name="CreateAccount",
                               kwargs={"customer_id": "customer_generated_27", "account_type": "Checking", "currency": "USD"}),
                        Action(name="CreateAccount",
                               kwargs={"customer_id": "customer_generated_27", "account_type": "Savings", "currency": "USD"}),
                        Action(name="CreateDeposit",
                               kwargs={"account_id": "acc_generated_40", "amount": 10000.00, "description": "Initial deposit"}),
                        Action(name="CreateDeposit",
                               kwargs={"account_id": "acc_generated_41", "amount": 25000.00, "description": "Initial deposit"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_generated_41"}),
                ],
                outputs=['"account_id": "acc_generated_40", "balance": 10000.0', '"account_id": "acc_generated_41", "balance": 25000.0']
        ),
        Task(
                annotator="0",
                user_id="task_18",
                instruction="Acting as Gabriel Silva, request the transaction history for your checking account over the past two years. Identify the unrecognized transaction: 'txn_d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1-19' concerning a new phone, and dispute this transaction. The support ticket should use the wording 'Gabriel Silva is disputing unauthorized transaction txn_d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1-19.'",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Aisha", "last_name": "Khan"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6-12"}),
                        Action(name="GetAccountTransactions", kwargs={"account_id": "acc_chk_13001", "days_history": 730, "current_date": "2025-07-22"}),
                        Action(name="GetTransactionDetails", kwargs={"transaction_id": "txn_d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1-19"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6-12", "category": "Security",
                                       "priority": "High", "details": "Gabriel Silva is disputing unauthorized transaction txn_d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1-19.",
                                       "target_entity": "Transaction", "target_id": "txn_d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1-19"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                ],
                outputs=[
                        '"transaction_id": "txn_d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1-19", "transaction_date": "2023-10-27T10:10:10Z", "amount": -15000.0, "description": "New Phone"',
                        '"ticket_id": "tkt_generated_10", "status": "Open", "category": "Security"'
                ]
        ),
        Task(
                annotator="0",
                user_id="task_19",
                instruction="As Oliver Williams, first stop the recurring payment to the utility provider Manchester Electricity Co. in the United Kingdom, whose bank is Barclays with account number '12345678' and sort code '20-00-00'. Then, organize a single payment of 50,000 NGN from your savings account to the same recipient, scheduled for August 1st, 2025. Lastly, check the current balance of your business loan (loan_biz_009).",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Adetokunbo", "last_name": "Adebayor"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5-23"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5-23"}),
                        Action(name="GetScheduledPayments", kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5-23"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_f4n6a5m7-l2m1-n0o9-p8q7-r6s5t4u3v2w1"}),
                        Action(name="UpdateScheduledPaymentStatus", kwargs={"payment_id": "sp_f4n6a5m7-l2m1-n0o9-p8q7-r6s5t4u3v2w1", "new_status": "Cancelled"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_f4n6a5m7-l2m1-n0o9-p8q7-r6s5t4u3v2w1"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_sav_24002"}),
                        Action(name="AddBeneficiary",
                               kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5-23", "name": "London Electricity Co.", "relationship": "Utility Provider", "account_number": "12345678",
                                        "sort_code": "20-00-00", "bank_name": "Barclays", "country": "United Kingdom"}),
                        Action(name="CreateScheduledPayment",
                               kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5-23", "source_account_id": "acc_sav_24002",
                                       "beneficiary_id": "bene_generated_11", "amount": 50000.00, "frequency": "One-Time", "start_date": "2025-08-01"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_generated_41"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_biz_009"}),
                ],
                outputs=['"status": "Cancelled"', '"payment_id": "sp_generated_41", "status": "Active"', '"current_balance": 7500000.0']
        ),
        Task(
                annotator="0",
                user_id="task_20",
                instruction="On behalf of Kenji Tanaka, start the transfer of $500 from your checking account to your savings account, noting it as 'Transfer to savings'. Next, review the interest rate applicable to your savings account. Apply for a new personal loan of $2000 with a 12-month term specified for 'Home Improvement'. Finally, verify the updated balances for your checking and savings accounts.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_1001", "destination_account_id": "acc_sav_1002", "amount": 500.00,
                                       "description": "Transfer to savings"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="CreateLoanApplication",
                               kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "loan_type": "Personal", "amount": 2000.00,
                                       "term": 12, "purpose": "Home Improvement", "annual_income": 120000}),
                        Action(name="GetLoanApplicationDetails", kwargs={"application_id": "app_generated_21"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                ],
                outputs=['"interest_rate": 1.25', '"application_status": "Submitted"', '"account_id": "acc_chk_1001", "balance": 4730.5',
                         '"account_id": "acc_sav_1002", "balance": 16280.0']
        ),
        Task(
                annotator="0",
                user_id="task_21",
                instruction="You are Zoltan Nagy. With your recent promotion, revise your occupation to 'Lead Surgeon' and your employer to 'Metropolis General Hospital'. After these changes, confirm your updated personal details and proceed to check the balance in your investment account. Lastly, handle a transfer of $1,000 from your checking account to your investment account with 'Monthly investment' as the description.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "field": "occupation", "value": "Lead Surgeon"}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "field": "employer", "value": "Metropolis General Hospital"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_inv_3002"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_3001", "destination_account_id": "acc_inv_3002", "amount": 1000.0, "description": "Monthly investment"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_inv_3002"}),
                ],
                outputs=['"occupation": "Lead Surgeon", "employer": "Metropolis General Hospital"', '"account_id": "acc_inv_3002", "balance": 150000.0', '"account_id": "acc_chk_3001", "balance": 12540.25', '"credit_score": 810']
        ),
        Task(
                annotator="0",
                user_id="task_22",
                instruction="You are Elena Popescu. Start by determining the current overdraft limit on your checking account. Following this, add Kenji Tanaka as a beneficiary and coordinate a one-time payment of $50 to her for next week on 2025-07-28. John's account number is 1122334455, with the routing number being 021001033. John is a customer at Mega Bank in the USA, and she is a friend of yours.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_2001"}),
                        Action(name="AddBeneficiary",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "name": "Kenji Tanaka", "relationship": "Friend", "account_number": "1122334455",
                                       "routing_number": "021001033", "bank_name": "Mega Bank", "country": "USA"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="CreateScheduledPayment",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "source_account_id": "acc_chk_2001", "beneficiary_id": "bene_generated_11",
                                       "amount": 50.00, "frequency": "One-Time", "start_date": "2025-07-28"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_generated_41"}),
                ],
                outputs=['"overdraft_limit": 250.0', '"beneficiary_id": "bene_generated_11"', '"payment_id": "sp_generated_41", "status": "Active"']
        ),
        Task(
                annotator="0",
                user_id="task_23",
                instruction="You are Chloe Dubois. Start by setting up a new 'Business' account in EUR to manage your company's finances. Once this is established, proceed to submit an application for a 50,000 EUR business loan with a term of 60 months for 'Business Expansion', noting that your annual income is 95,000 EUR. Verify the status of the loan application after it has been sent.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Hans", "last_name": "MÃ¼ller"}),
                        Action(name="CreateAccount",
                               kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1", "account_type": "Business", "currency": "EUR"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1"}),
                        Action(name="CreateLoanApplication",
                               kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1", "loan_type": "Business", "amount": 50000.00,
                                       "term": 60, "purpose": "Business Expansion", "annual_income": 95000}),
                        Action(name="GetLoanApplicationDetails", kwargs={"application_id": "app_generated_21"}),
                ],
                outputs=['"application_id": "app_generated_21", "application_status": "Submitted"']
        ),
        Task(
                annotator="0",
                user_id="task_24",
                instruction="You are Zoltan Nagy. Begin by changing your communication preference to SMS and opting out of paperless billing. Next, conduct a payment of 20,000 INR from your checking account to your beneficiary, 'Global ISP'. Make sure to use 'Payment to Global ISP' as the transaction description.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Lakshmi", "last_name": "Narayanan"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-a1b2-c3d4-e5f6a1b2c3d4"}),
                        Action(name="UpdateCustomerPreferences",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-a1b2-c3d4-e5f6a1b2c3d4", "paperless_billing": False, "communication_channel": "SMS"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "a1b2c3d4-e5f6-a1b2-c3d4-e5f6a1b2c3d4"}),
                        Action(name="GetBeneficiaryByName", kwargs={"customer_id": "a1b2c3d4-e5f6-a1b2-c3d4-e5f6a1b2c3d4", "beneficiary_name": "Global ISP"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_5002"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_5002", "destination_account_id": "IN3456789012", "amount": 20000.00,
                                       "description": "Payment to Global ISP"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_5002"}),
                ],
                outputs=['"communication_channel": "SMS", "paperless_billing": False', '"transaction_id": "txn_generated_41", "status": "Completed"']
        ),
        Task(
                annotator="0",
                user_id="task_25",
                instruction="You are Kenji Tanaka. First, query the number of rewards points you have accumulated on your credit card account. Next, update your address to 101 Rue de la Paix, Lyon, 75002, France, and remove your mother, Marie Dubois, as a beneficiary. Finally, review the balance of your checking account.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Chloe", "last_name": "Dubois"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_crd_9002"}),
                        Action(name="UpdateCustomerAddress",
                               kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2", "street_address": "101 Rue de la Paix", "city": "Lyon", "state": "",
                                       "postal_code": "75002", "country": "France"}),
                        Action(name="GetBeneficiaryByName", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2", "beneficiary_name": "Marie Dubois"}),
                        Action(name="RemoveBeneficiary", kwargs={"beneficiary_id": "bene_4f3a2b1c-9d8e-7f6a-5b4c-3d2e1f0a9b8c"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_9001"}),
                ],
                outputs=['"rewards_points": 1250', '"street_address": "101 Rue de la Paix"', '"action": "removed"', '"account_id": "acc_chk_9001", "balance": 3200.0']
        ),
        Task(
                annotator="0",
                user_id="task_26",
                instruction="You are Santiago MuÃ±oz. Since your debit card linked to your checking account is lost, handle a support ticket to report the incident and ensure the account gets frozen without delay. The ticket should include 'Lost debit card for account acc_chk_11001.'",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Isabella", "last_name": "Rossi"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef-10"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef-10", "category": "Security", "priority": "High",
                                       "details": "Lost debit card for account acc_chk_11001.", "target_entity": "Account", "target_id": "acc_chk_11001"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_chk_11001", "new_status": "Frozen"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_11001"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_11001"}),
                ],
                outputs=['"account_id": "acc_chk_11001", "status": "Frozen"']
        ),
        Task(
                annotator="0",
                user_id="task_27",
                instruction="You are Santiago MuÃ±oz. Your goal is to pay off part of your personal loan. Coordinate the transfer of EUR 3000 from your checking account and then check the updated loan balance. Label this transaction with 'Partial loan payoff for loan_pers_013'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Anja", "last_name": "Novak"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6-18"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6-18"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_pers_013"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_19001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_19001", "destination_account_id": "acc_pers_19002", "amount": 3000.0,
                                       "description": "Partial loan payoff for loan_pers_013"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_19001"}),
                        Action(name="UpdateLoanBalance", kwargs={"loan_id": "loan_pers_013", "amount": -3000.0}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_pers_013"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_19001"}),
                ],
                outputs=['"loan_id": "loan_pers_013", "current_balance": 500"']
        ),
        Task(
                annotator="0",
                user_id="task_28",
                instruction="You are Santiago MuÃ±oz. After recently getting married, revise your last name to 'Horvat' and update your marital status to 'Married'. Additionally, include your work phone number, +386 51 987 654, and examine your checking account balance.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Anja", "last_name": "Novak"}),
                        Action(name="UpdateCustomerPersonalInfo", kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6-18", "field": "last_name", "value": "Horvat"}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6-18", "field": "marital_status", "value": "Married"}),
                        Action(name="AddCustomerPhoneNumber",
                               kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6-18", "phone_type": "Work", "phone_number": "+386 51 987 654"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6-18"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_19001"}),
                ],
                outputs=['"last_name": "Horvat", "marital_status": "Married"', '"number": "+386 51 987 654"', '"balance": 3500.0']
        ),
        Task(
                annotator="0",
                user_id="task_29",
                instruction="You are Mohammed Al-Masri. Set up a new Investment account in USD with an initial deposit of $50,000 coming from an external source, described as 'Initial investment funding'. Confirm the new account balance and also verify your checking account balance. Finally, modify your occupation to 'Professional Athlete'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Gabriel", "last_name": "Silva"}),
                        Action(name="CreateAccount",
                               kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5-17", "account_type": "Investment", "currency": "USD"}),
                        Action(name="CreateDeposit",
                               kwargs={"account_id": "acc_generated_40", "amount": 50000.00, "description": "Initial investment funding"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5-17"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_18001"}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5-17", "field": "occupation", "value": "Professional Athlete"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "b2c3d4e5-f6a1-b2c3-d4e5-f6a1b2c3d4e5-17"}),
                ],
                outputs=['"account_id": "acc_generated_40", "balance": 50000.0', '"account_id": "acc_chk_18001", "balance": 500000.0', '"occupation": "Professional Athlete"']
        ),
        Task(
                annotator="0",
                user_id="task_30",
                instruction="You are Kenji Tanaka. Cancel the one-time scheduled payment to Elena Popescu and arrange for an immediate payment instead. Abort the scheduled payment and then transfer $50 instantly from your checking account, described as 'Immediate payment to Elena Popescu'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetScheduledPayments", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_c1d9b3a2-7f6a-5b4c-3d2e-1f0a9b8c7d6e"}),
                        Action(name="UpdateScheduledPaymentStatus", kwargs={"payment_id": "sp_c1d9b3a2-7f6a-5b4c-3d2e-1f0a9b8c7d6e", "new_status": "Cancelled"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_c1d9b3a2-7f6a-5b4c-3d2e-1f0a9b8c7d6e"}),
                        Action(name="GetBeneficiaryByName", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "beneficiary_name": "Elena Popescu"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_1001", "destination_account_id": "9876543210", "amount": 50.00,
                                       "description": "Immediate payment to Elena Popescu"}),
                        Action(name="GetTransactionDetails", kwargs={"transaction_id": "txn_generated_41"}),
                ],
                outputs=['"status": "Completed", "amount": -50.0']
        ),
        Task(
                annotator="0",
                user_id="task_31",
                instruction="Handle the task as Elena Popescu to check the prevailing interest rate on your savings account. Additionally, plan to close this account by first moving the entire balance to your checking account. Use the description 'Account closure transfer' for the transfer.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_sav_2002"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_2002"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_2001"}),
                        Action(name="CreateTransaction", kwargs={"source_account_id": "acc_sav_2002", "destination_account_id": "acc_chk_2001", "amount": 22000.0,
                                                                  "description": "Account closure transfer"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_sav_2002", "new_status": "Closed"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_sav_2002"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_2001"}),
                ],
                outputs=['"interest_rate": 1.5', '"account_id": "acc_sav_2002", "status": "Closed"', '"account_id": "acc_chk_2001", "balance": 25100.75']
        ),
        Task(
                annotator="0",
                user_id="task_32",
                instruction="As Kenji Tanaka, you have detected an unauthorized transaction (ID txn_f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3-15) on your credit card. Prepare to dispute this transaction, apply for a replacement card through a support ticket, and ensure the account is secured. The support ticket should state: 'Unauthorized transaction txn_f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3-15. Requesting new card.'",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Chloe", "last_name": "Dubois"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                        Action(name="GetTransactionDetails", kwargs={"transaction_id": "txn_f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3-15"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2", "category": "Security", "priority": "High",
                                       "details": "Unauthorized transaction txn_f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3-15. Requesting new card.", "target_entity": "Account",
                                       "target_id": "acc_crd_9002"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_crd_9002", "new_status": "Frozen"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_crd_9002"}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open"', '"account_id": "acc_crd_9002", "status": "Frozen"']
        ),
        Task(
                annotator="0",
                user_id="task_33",
                instruction="As Chloe Dubois, coordinate a monthly rent payment of 1500 EUR to be sent to your landlord, Klaus Schmidt, from your checking account. Set up these payments to start on the first day of the next month, considering todayâ€™s date as 2025-07-21.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Hans", "last_name": "MÃ¼ller"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1"}),
                        Action(name="GetBeneficiaryByName", kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1", "beneficiary_name": "Klaus Schmidt"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_8001"}),
                        Action(name="CreateScheduledPayment",
                               kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1", "source_account_id": "acc_chk_8001",
                                       "beneficiary_id": "bene_9d8e7f6a-5b4c-3d2e-1f0a-9b8c7d6e5f4a", "amount": 1500.00, "frequency": "Monthly", "start_date": "2025-08-01"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_generated_41"}),
                ],
                outputs=['"payment_id": "sp_generated_41", "status": "Active", "amount": 1500.00']
        ),
        Task(
                annotator="0",
                user_id="task_34",
                instruction="Identify as Kenji Tanaka to examine the current balance of your credit card account. In addition, proceed with transferring $200 from your checking account to your savings account with the description 'Personal Transfer'. Finally, declare your credit card as lost and request it to be frozen. Draft a support ticket with the message: 'Credit card lost, please freeze account.'",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_crd_1003"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_1001", "destination_account_id": "acc_sav_1002", "amount": 200.0, "description": "Personal Transfer"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="CreateSupportTicket", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "category": "Security", "priority": "High",
                                                                     "details": "Credit card lost, please freeze account.", "target_entity": "Account",
                                                                     "target_id": "acc_crd_1003"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_crd_1003", "new_status": "Frozen"}),
                ],
                outputs=['"account_id": "acc_crd_1003", "balance": -2500.0', '"account_id": "acc_chk_1001", "balance": 5030.5', '"account_id": "acc_sav_1002", "balance": 15980.0',
                         '"status": "Frozen"']
        ),
        Task(
                annotator="0",
                user_id="task_35",
                instruction="As a new customer, Sarah Connor, your goal is to set up an account. Your date of birth is 1984-05-12, with contact details: email sarah.c@test.com, phone 444-555-6666, residence 123 Terminator St, LA, 90210, USA. With an annual income of $95,000, you aim to open a new checking account in USD and then apply for a $30,000 auto loan over 60 months to purchase a new vehicle. The loan application should specify the purpose 'New Car Purchase'.",
                actions=[
                        Action(name="CreateCustomer",
                               kwargs={"first_name": "Sarah", "last_name": "Connor", "dob": "1984-05-12", "email": "sarah.c@test.com",
                                       "phone": "444-555-6666", "street": "123 Terminator St", "city": "LA", "postal_code": "90210", "country": "USA", "annual_income": 95000}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "customer_generated_27"}),
                        Action(name="CreateAccount",
                               kwargs={"customer_id": "customer_generated_27", "account_type": "Checking", "currency": "USD"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="CreateLoanApplication",
                               kwargs={"customer_id": "customer_generated_27", "loan_type": "Auto", "amount": 30000.00, "term": 60,
                                       "purpose": "New Car Purchase", "annual_income": 95000}),
                        Action(name="GetLoanApplicationDetails", kwargs={"application_id": "app_generated_21"}),
                ],
                outputs=['"application_id": "app_generated_21", "customer_id": "customer_generated_27", "application_status": "Submitted"']
        ),
        Task(
                annotator="0",
                user_id="task_36",
                instruction="As Zoltan Nagy, it is crucial to temporarily suspend your monthly recurring payment to your landlord, who is among your beneficiaries. After pausing, advance to execute a one-time payment of 500 RUB instantly from your checking account to the bank account of the same beneficiary with the note 'One-time rent payment'. Lastly, ask about your credit score.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Alex", "last_name": "Petrov"}),
                        Action(name="GetScheduledPayments", kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1-13"}),
                        Action(name="UpdateScheduledPaymentStatus", kwargs={"payment_id": "sp_b5d7c6a8-b2c1-d0e9-f8g7-h6i5j4k3l2m1", "new_status": "Paused"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_b5d7c6a8-b2c1-d0e9-f8g7-h6i5j4k3l2m1"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1-13"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_14001"}),
                        #Action(name="ListBeneficiaries", kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1-13"}),
                        Action(name="GetBeneficiaryDetails", kwargs={"beneficiary_id": "bene_9d8e7f6a-5b4c-3d2e-1f0a-9b8c7d6e5f4a"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_14001", "destination_account_id": "DE89370400440532013000", "amount": 500.0,
                                       "description": "One-time rent payment"}),
                        Action(name="GetTransactionDetails", kwargs={"transaction_id": "txn_generated_41"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_14001"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1-13"}),
                ],
                outputs=['"payment_id": "sp_b5d7c6a8-b2c1-d0e9-f8g7-h6i5j4k3l2m1", "status": "Paused"', '"transaction_id": "txn_generated_41", "status": "Completed"',
                         '"credit_score": 780']
        ),
        Task(
                annotator="0",
                user_id="task_37",
                instruction="Being Zoltan Nagy, you aim to determine the remaining principal balance on your mortgage. In addition, change your marital status to 'Single', check your checking account balance, and enable paperless billing.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_mort_001"}),
                        Action(name="UpdateCustomerPersonalInfo", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "field": "marital_status", "value": "Single"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="UpdateCustomerPreferences", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "paperless_billing": True}),
                ],
                outputs=['"current_balance": 715240.5', '"marital_status": "Single"', '"balance": 12540.25', '"paperless_billing": true']
        ),
        Task(
                annotator="0",
                user_id="task_38",
                instruction="You are Kenji Tanaka, and you plan to close all your accounts. Begin by transferring the full balance from your savings account to your checking account, and then close the savings account. For this transfer, use the description 'Account closure'. Proceed to transfer the total amount from the checking account to your account at another bank ('acc_external_jones_0001'), maintaining the description 'Account closure'. Ultimately, close the checking account. Secure confirmation that all accounts have been closed.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Olivia", "last_name": "Jones"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef-16"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_17002"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_sav_17002", "destination_account_id": "acc_chk_17001", "amount": 85000.00,
                                       "description": "Account closure"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_sav_17002", "new_status": "Closed"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_sav_17002"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_17001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_17001", "destination_account_id": "acc_external_jones_0001", "amount": 100000.00,
                                       "description": "Account closure"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_chk_17001", "new_status": "Closed"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_17001"}),
                ],
                outputs=['"account_id": "acc_sav_17002", "status": "Closed"', '"account_id": "acc_chk_17001", "status": "Closed"']
        ),
        Task(
                annotator="0",
                user_id="task_39",
                instruction="As Adetokunbo Adebayor, you need to make a request for your savings account's annual statement. Label this account management request with a 'Low' priority, including the note 'Request for annual statement for account acc_sav_10002.'. Additionally, review the current balances of both your accounts as well as the total balance across both.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Kenji", "last_name": "Tanaka"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3", "category": "Account Management", "priority": "Low",
                                       "details": "Request for annual statement for account acc_sav_10002.", "target_entity": "Account", "target_id": "acc_sav_10002"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_10002"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_10001"}),
                        Action(name="CalculateSum", kwargs={"values": ["15000000.0", "2500000.0"]}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open"', '"balance": 15000000.0', '"account_id": "acc_chk_10001", "balance": 2500000.0', '"total": 17500000.0']
        ),
        Task(
                annotator="0",
                user_id="task_40",
                instruction="You are Oliver Williams. You must add your brother Ahmed Al-Fassi as a new beneficiary. His IBAN is AE1234567890123456789012 at Abu Dhabi Commercial Bank in the UAE. After adding him, arrange a one-time payment of 5000 AED from your checking account to him scheduled for December 25th of this year.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Fatima", "last_name": "Al-Fassi"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6"}),
                        Action(name="AddBeneficiary",
                               kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6", "name": "Ahmed Al-Fassi",
                                       "relationship": "Brother", "iban": "AE1234567890123456789012", "bank_name": "Abu Dhabi Commercial Bank", "country": "UAE"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_7001"}),
                        Action(name="CreateScheduledPayment",
                               kwargs={"customer_id": "c3d4e5f6-a1b2-c3d4-e5f6-a1b2c3d4e5f6", "source_account_id": "acc_chk_7001",
                                       "beneficiary_id": "bene_generated_11", "amount": 5000.00, "frequency": "One-Time", "start_date": "2025-12-25"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_generated_41"}),
                ],
                outputs=['"payment_id": "sp_generated_41", "status": "Active", "beneficiary_id": "bene_generated_11"']
        ),
        Task(
                annotator="0",
                user_id="task_41",
                instruction="Coordinate the verification of the credit limit on your credit card account as Kenji Tanaka. Furthermore, inspect the transaction history for this card over the past 60 days. Since today is 2023-12-17, disregard any other dates mentioned as today. Then, transfer USD 2500 from your checking account to your savings account, including the description 'Transfer to savings'. Lastly, ensure to verify the balances of both accounts.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_crd_1003"}),
                        Action(name="GetAccountTransactions", kwargs={"account_id": "acc_crd_1003", "days_history": 60, "current_date": "2023-12-17"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_1001", "destination_account_id": "acc_sav_1002", "amount": 2500.00,
                                       "description": "Transfer to savings"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                ],
                outputs=['"credit_limit": 10000.0', '"transaction_id": "txn_6c3d6f9h-4d6b-7c2f-2d5h-8f9d2e6g7c3c"', '"transaction_id": "txn_1b2c3d4e-5f6a-7b8c-9d0e-1f2a3b4c5d6e"',
                         '"transaction_id": "txn_4c5d6e7f-8g9h-0i1j-2k3l-4m5n6o7p8q9r"', '"account_id": "acc_chk_1001", "balance": 2730.50', '"account_id": "acc_sav_1002", "balance": 18280.00']
        ),
        Task(
                annotator="0",
                user_id="task_42",
                instruction="You are Kenji Tanaka. Manage the closure of your savings account, making sure to transfer the full current balance into your checking account first. Use the description 'Account closure' for this transaction. Also, ask about the overdraft limit on your checking account.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_sav_1002", "destination_account_id": "acc_chk_1001", "amount": 15780.00,
                                       "description": "Account closure"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_sav_1002", "new_status": "Closed"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_1001"}),
                ],
                outputs=['"account_id": "acc_sav_1002", "status": "Closed"', '"account_id": "acc_chk_1001", "balance": 21010.5', '"overdraft_limit": 500.0']
        ),
        Task(
                annotator="0",
                user_id="task_43",
                instruction="Identify yourself as Elena Popescu and report a suspicious email that seems to be a phishing attempt from the bank by creating a support ticket. Include the statement 'I have received a phishing email asking for account details.' Upon submitting the ticket, verify your savings account balance. Lastly, continue to remove Kenji Tanaka as your beneficiary.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "category": "Security", "priority": "High",
                                       "details": "I have received a phishing email asking for account details.", "target_entity": "Customer",
                                       "target_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_2002"}),
                        Action(name="GetBeneficiaryByName", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "beneficiary_name": "Kenji Tanaka"}),
                        Action(name="RemoveBeneficiary", kwargs={"beneficiary_id": "bene_7c6d5e4f-3a2b-1c9d-8e7f-6a5b4c3d2e1f"}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open", "category": "Security"', '"balance": 22000.0', '"action": "removed"']
        ),
        Task(
                annotator="0",
                user_id="task_44",
                instruction="Make sure that you, Kenji Tanaka, obtain a comprehensive transaction history for your credit card for the past 60 days. Today's date is 2023-12-06, so disregard any other dates referred to as today. Also, verify the current balance in your checking account. After evaluating your accounts, report your credit card as lost by creating a support ticket with the note 'Credit card reported lost.' and have the account frozen for security. Lastly, update your occupation to 'Head Pastry Chef'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Chloe", "last_name": "Dubois"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                        Action(name="GetAccountTransactions", kwargs={"account_id": "acc_crd_9002", "days_history": 60, "current_date": "2023-12-06"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_9001"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2", "category": "Security", "priority": "High", "details": "Credit card reported lost.",
                                       "target_entity": "Account", "target_id": "acc_crd_9002"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_crd_9002", "new_status": "Frozen"}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2", "field": "occupation", "value": "Head Pastry Chef"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                ],
                outputs=['"transaction_id": "txn_f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3-15", "amount": -85.0', '"account_id": "acc_chk_9001", "balance": 3200.0',
                         '"ticket_id": "tkt_generated_10", "status": "Open"', '"status": "Frozen"', '"occupation": "Head Pastry Chef"']
        ),
        Task(
                annotator="0",
                user_id="task_45",
                instruction="Act as Kenji Tanaka to receive a payoff quote for your auto loan. After receiving the quote, complete paying off the full remaining balance from your savings account and update the loan status accordingly. Label the transaction with the description 'Auto loan payoff'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_auto_002"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_sav_1002", "destination_account_id": "acc_auto_1004", "amount": 15670.80,
                                       "description": "Auto loan payoff"}),
                        Action(name="UpdateLoanBalance", kwargs={"loan_id": "loan_auto_002", "amount": -15670.80}),
                        Action(name="UpdateLoanStatus", kwargs={"loan_id": "loan_auto_002", "new_status": "Paid Off"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_auto_002"}),
                ],
                outputs=['"loan_id": "loan_auto_002", "status": "Paid Off", "current_balance": 0.0']
        ),
        Task(
                annotator="0",
                user_id="task_46",
                instruction="Your name is Kenji Tanaka. With anticipation of your monthly salary, you seek to verify any deposits greater than $1000 into your savings account over the past week. Treat 2023-11-02 as the current date and ignore any other mentioned dates. Furthermore, you need to know the present balance of your checking account. Finally, enable paperless billing for your account.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountTransactions", kwargs={"account_id": "acc_sav_1002", "days_history": 7, "current_date": "2023-11-02"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="UpdateCustomerPreferences", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "paperless_billing": True}),
                ],
                outputs=['"transaction_id": "txn_7a2b5e8g-3c5a-6b1e-1c4g-7e8c1d5f6b2b", "amount": 1500.0, "description": "Monthly Salary"',
                         '"account_id": "acc_chk_1001", "balance": 5230.5', '"paperless_billing": true']
        ),
        Task(
                annotator="0",
                user_id="task_47",
                instruction="Assume you're Zoltan Nagy, and you aim to acquire a list of all your active loans with the bank. Proceed to report a lost debit card linked to your checking account and ensure that it is secured. The ticket should read 'Lost debit card reported for checking account.'. Subsequently, confirm the updated status and balance of your account.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="CreateSupportTicket", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "category": "Security", "priority": "High",
                                                                     "details": "Lost debit card reported for checking account.", "target_entity": "Account",
                                                                     "target_id": "acc_chk_3001"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_chk_3001", "new_status": "Frozen"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_3001"}),
                ],
                outputs=['"loan_id": "loan_mort_001", "loan_type": "Mortgage", "current_balance": 715240.5',
                         '"account_id": "acc_chk_3001", "status": "Frozen", "balance": 12540.25']
        ),
        Task(
                annotator="0",
                user_id="task_48",
                instruction="You are known as Elena Popescu. After recently marrying Kenji Tanaka, update your last name to 'Doe' and change your marital status to 'Married'. Afterward, check the interest rate on your savings account, followed by transferring $50 from checking to savings with the note 'Wedding Gift Money'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="UpdateCustomerPersonalInfo", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "field": "last_name", "value": "Doe"}),
                        Action(name="UpdateCustomerPersonalInfo", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "field": "marital_status", "value": "Married"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_sav_2002"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_2001", "destination_account_id": "acc_sav_2002", "amount": 50.0, "description": "Wedding Gift Money"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_2002"}),
                ],
                outputs=['"last_name": "Doe", "marital_status": "Married"', '"interest_rate": 1.5', '"balance": 22050.0']
        ),
        Task(
                annotator="0",
                user_id="task_49",
                instruction="You are Chloe Dubois. After placing a request to cancel a planned payment, verify the status of the support ticket with ID tkt_c1d0e9f8-a9b8-c7d6-e5f4-a3b2c1d0e9f8. Also, review the account balances across your profile. After this, you intend to make an additional payment of 200 EUR on your mortgage from your checking account with the note 'Extra mortgage payment'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Hans", "last_name": "MÃ¼ller"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_c1d0e9f8-a9b8-c7d6-e5f4-a3b2c1d0e9f8"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_8001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_8002"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1"}),
                        Action(name="CreateTransaction", kwargs={"source_account_id": "acc_chk_8001", "destination_account_id": "acc_mort_8003", "amount": 200.0, "description": "Extra mortgage payment"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_8001"}),
                        Action(name="UpdateLoanBalance", kwargs={"loan_id": "loan_mort_014", "amount": -200.0}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_mort_014"}),
                ],
                outputs=['"ticket_id": "tkt_c1d0e9f8-a9b8-c7d6-e5f4-a3b2c1d0e9f8", "status": "Resolved"', '"account_id": "acc_chk_8001", "balance": 7800.5', '"account_id": "acc_sav_8002", "balance": 125000.0', '"current_balance": 179800.0']
        ),
        Task(
                annotator="0",
                user_id="task_50",
                instruction="Identify yourself as Elena Popescu, eager to start a savings plan for a vacation. Plan to open a new savings account in CAD and organize a monthly recurring transfer of 250 CAD from your checking account to this new account, beginning on the first day of the coming month.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="CreateAccount",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "account_type": "Savings", "currency": "CAD"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_2001"}),
                        Action(name="CreateScheduledInternalTransfer",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "source_account_id": "acc_chk_2001",
                                       "destination_account_id": "acc_generated_40", "amount": 250.00, "frequency": "Monthly", "start_date": "2025-08-01"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_generated_41"}),
                ],
                outputs=['"account_id": "acc_generated_40", "status": "Active"', '"payment_id": "sp_generated_41", "status": "Active"']
        ),
        Task(
                annotator="0",
                user_id="task_51",
                instruction="Take on the identity of Kenji Tanaka, and handle the transfer of 100 USD from your checking account to your beneficiary, Elena Popescu, with the description 'Payment to Elena Popescu'. After processing the payment, verify and confirm the updated balances of your checking and savings accounts. Additionally, ensure to check the total balance across all your accounts. Lastly, make it a point to review your credit score.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetBeneficiaryByName", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "beneficiary_name": "Elena Popescu"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_1001", "destination_account_id": "9876543210", "amount": 100.00,
                                       "description": "Payment to Elena Popescu"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_crd_1003"}),
                        Action(name="CalculateSum", kwargs={"values": ["5130.5", "15780.0", "-2500.0"]}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                ],
                outputs=['"account_id": "acc_chk_1001", "balance": 5130.5', '"account_id": "acc_sav_1002", "balance": 15780.0', '"account_id": "acc_crd_1003", "balance": -2500', '"total": 18410.5', '"credit_score": 780']
        ),
        Task(
                annotator="0",
                user_id="task_52",
                instruction="Assume the role of Sofia Andersson. Following your recent application for an auto loan, coordinate its cancellation. Additionally, check the balance of your checking account and update your employer information to 'University Library'. Afterward, review your financial profile and list out your beneficiaries.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Maria", "last_name": "Garcia"}),
                        Action(name="GetCustomerLoanApplications", kwargs={"customer_id": "f4g5h6i7-j8k9-l0m1-n2o3-p4q5r6s7t8u9"}),
                        Action(name="UpdateLoanApplicationStatus", kwargs={"application_id": "app_d3e4f5a6-b7c8-d9e0-f1a2-b3c4d5e6f7g8", "new_status": "Withdrawn"}),
                        Action(name="GetLoanApplicationDetails", kwargs={"application_id": "app_d3e4f5a6-b7c8-d9e0-f1a2-b3c4d5e6f7g8"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "f4g5h6i7-j8k9-l0m1-n2o3-p4q5r6s7t8u9"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_4001"}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "f4g5h6i7-j8k9-l0m1-n2o3-p4q5r6s7t8u9", "field": "employer", "value": "University Library"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "f4g5h6i7-j8k9-l0m1-n2o3-p4q5r6s7t8u9"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "f4g5h6i7-j8k9-l0m1-n2o3-p4q5r6s7t8u9"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "f4g5h6i7-j8k9-l0m1-n2o3-p4q5r6s7t8u9"}),
                ],
                outputs=['"application_id": "app_d3e4f5a6-b7c8-d9e0-f1a2-b3c4d5e6f7g8", "application_status": "Withdrawn"', '"account_id": "acc_chk_4001", "balance": 1200.5',
                         '"employer": "University Library"', '"credit_score": 690', '[]']
        ),
        Task(
                annotator="0",
                user_id="task_53",
                instruction="Be Zoltan Nagy and modify your employment status to 'Self-Employed' and update your employer to 'Private Practice', then verify your revised personal information. Moreover, you should check the current balance on your mortgage.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "field": "occupation", "value": "Self-Employed"}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "field": "employer", "value": "Private Practice"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_mort_001"}),
                ],
                outputs=['"occupation": "Self-Employed", "employer": "Private Practice"', '"current_balance": 715240.5']
        ),
        Task(
                annotator="0",
                user_id="task_54",
                instruction="Play the part of Adetokunbo Adebayor. Begin by initiating a new Investment account in JPY. Following the account creation, manage the deposit of 5,000,000 JPY from an external source, using the description 'Initial investment deposit' for the transaction. Furthermore, you plan to apply for a personal loan of 1,000,000 JPY over 24 months for 'Travel', and remember your annual income is 12,000,000 JPY.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Kenji", "last_name": "Tanaka"}),
                        Action(name="CreateAccount",
                               kwargs={"customer_id": "f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3", "account_type": "Investment", "currency": "JPY"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="CreateDeposit",
                               kwargs={"account_id": "acc_generated_40", "amount": 5000000.00, "description": "Initial investment deposit"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3"}),
                        Action(name="CreateLoanApplication",
                               kwargs={"customer_id": "f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3", "loan_type": "Personal", "amount": 1000000.00,
                                       "term": 24, "purpose": "Travel", "annual_income": 12000000}),
                        Action(name="GetLoanApplicationDetails", kwargs={"application_id": "app_generated_21"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_generated_40"}),
                ],
                outputs=['"account_id": "acc_generated_40", "balance": 5000000.0', '"application_status": "Submitted"']
        ),
        Task(
                annotator="0",
                user_id="task_55",
                instruction="Embody Kenji Tanaka, and acquire a list of all your active bank accounts. Additionally, check the current balance of your auto loan, and proceed to modify your employer information to 'NextGen Solutions'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_auto_002"}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "field": "employer", "value": "NextGen Solutions"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                ],
                outputs=['"account_id": "acc_chk_1001"', '"account_id": "acc_sav_1002"', '"account_id": "acc_crd_1003"', '"current_balance": 15670.8',
                         '"employer": "NextGen Solutions"']
        ),
        Task(
                annotator="0",
                user_id="task_56",
                instruction="You are Elena Popescu and you aim to acquire a monthly statement for your checking account by submitting a support ticket. This is categorized under account management requests. Set the ticket to 'Low' priority and include 'Request for monthly statement for account acc_chk_2001.'. Moreover, you wish to access the current overdraft limit of the account.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "category": "Account Management", "priority": "Low",
                                       "details": "Request for monthly statement for account acc_chk_2001.", "target_entity": "Account", "target_id": "acc_chk_2001"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_2001"}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open"', '"overdraft_limit": 250.0']
        ),
        Task(
                annotator="0",
                user_id="task_57",
                instruction="You are Zoltan Nagy and you plan to designate your daughter, Sarah Chen, as a beneficiary. His account is labeled as IBAN US1234567890123456789012 at Bank of Metropolis, USA. After he is added, you plan to transfer $200 from your checking account to his account as a birthday gift. Utilize the note 'Birthday gift for Sarah' for this transaction.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="AddBeneficiary", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "name": "Sarah Chen",
                                                               "relationship": "Daughter", "iban": "US1234567890123456789012", "bank_name": "Bank of Metropolis",
                                                               "country": "USA"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_3001", "destination_account_id": "US1234567890123456789012", "amount": 200.00,
                                       "description": "Birthday gift for Sarah"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                ],
                outputs=['"beneficiary_id": "bene_generated_11"', '"account_id": "acc_chk_3001", "balance": 12340.25']
        ),
        Task(
                annotator="0",
                user_id="task_58",
                instruction="You are Kenji Tanaka, and you wish to inquire about the current balance and overdraft limit of your checking account. Additionally, you want to verify the current balance of your savings account and your credit score. Finally, add a work phone number, 310-555-1234, to your profile.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="AddCustomerPhoneNumber",
                               kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "phone_type": "Work", "phone_number": "310-555-1234", "is_primary": False}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                ],
                outputs=['"balance": "5230.50"', '"overdraft_limit": "500.00"', '"account_id": "acc_sav_1002", "balance": 15780.0', '"credit_score": 780',
                         '"type": "Work", "number": "310-555-1234"']
        ),
        Task(
                annotator="0",
                user_id="task_59",
                instruction="You are Elena Popescu. You intend to change the frequency of your monthly scheduled payment to Kenji Tanaka to 'Bi-Weekly'. A support ticket should be submitted to facilitate this change. Word it as 'Change frequency of payment sp_d9b3a2c1-6a5b-4c3d-2e1f-0a9b8c7d6e5f to Bi-Weekly.' Once completed, please review your current checking account balance.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetScheduledPayments", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_d9b3a2c1-6a5b-4c3d-2e1f-0a9b8c7d6e5f"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "category": "Scheduled Payment", "priority": "Medium",
                                       "details": "Change frequency of payment sp_d9b3a2c1-6a5b-4c3d-2e1f-0a9b8c7d6e5f to Bi-Weekly.", "target_entity": "ScheduledPayment",
                                       "target_id": "sp_d9b3a2c1-6a5b-4c3d-2e1f-0a9b8c7d6e5f"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_2001"}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open"', '"balance": 3100.75']
        ),
        Task(
                annotator="0",
                user_id="task_60",
                instruction="You are Kenji Tanaka. You have a delinquent personal loan (loan_pers_008) with a balance of 5250.75. You aim to pay off EUR 2500 from your checking account to rectify the status. Utilize 'Payment for delinquent loan' as the description. After the payment, change the loan status to 'Active' and confirm the new loan balance. Afterward, review the current balance of your checking account.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Chloe", "last_name": "Dubois"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_pers_008"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_9001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_9001", "destination_account_id": "acc_pers_9003", "amount": 2500,
                                       "description": "Payment for delinquent loan"}),
                        Action(name="UpdateLoanBalance", kwargs={"loan_id": "loan_pers_008", "amount": -2500}),
                        Action(name="UpdateLoanStatus", kwargs={"loan_id": "loan_pers_008", "new_status": "Active"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_pers_008"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_9001"}),
                ],
                outputs=['"loan_id": "loan_pers_008", "status": "Active", "current_balance": 2750.75', '"account_id": "acc_chk_9001", "balance",: 700']
        ),
        Task(
                annotator="0",
                user_id="task_61",
                instruction="Your name is Elena Popescu. Add your work phone number, 098-765-4741, to your profile, making sure it is not set as your primary contact. Next, verify the balance in your checking account and evaluate your credit score. Finally, set up a weekly transfer of 25 CAD from your checking to your savings account, starting next week on 2025-07-28.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="AddCustomerPhoneNumber",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "phone_type": "Work", "phone_number": "098-765-4741", "is_primary": False}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_2001"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="CreateScheduledInternalTransfer",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "source_account_id": "acc_chk_2001", "destination_account_id": "acc_sav_2002",
                                       "amount": 25.0, "frequency": "Weekly", "start_date": "2025-07-28"}),
                ],
                outputs=['"type": "Work", "number": "098-765-4741"', '"account_id": "acc_chk_2001", "balance": 3100.75', '"credit_score": 820',
                         '"payment_id": "sp_generated_41", "status": "Active"']
        ),
        Task(
                annotator="0",
                user_id="task_62",
                instruction="Your name is Sofia Andersson, and you need to check the status of your student loan. Also, go through a list of available account types in USD and review the balance of your checking account. Lastly, choose to cancel your weekly scheduled payment of USD 25.00.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Maria", "last_name": "Garcia"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "f4g5h6i7-j8k9-l0m1-n2o3-p4q5r6s7t8u9"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_stud_004"}),
                        Action(name="ListAccountTypesByCurrency", kwargs={"currency": "USD"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "f4g5h6i7-j8k9-l0m1-n2o3-p4q5r6s7t8u9"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_4001"}),
                        Action(name="GetScheduledPayments", kwargs={"customer_id": "f4g5h6i7-j8k9-l0m1-n2o3-p4q5r6s7t8u9"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_e2g4b3f5-e9f8-g7h6-i5j4-k3l2m1n0o9p5"}),
                        Action(name="UpdateScheduledPaymentStatus", kwargs={"payment_id": "sp_e2g4b3f5-e9f8-g7h6-i5j4-k3l2m1n0o9p5", "new_status": "Cancelled"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_e2g4b3f5-e9f8-g7h6-i5j4-k3l2m1n0o9p5"}),
                ],
                outputs=['"loan_id": "loan_stud_004", "status": "In Grace Period"', '"available_account_types": ["Checking", "Savings", "Credit Card", "Investment"]',
                         '"balance": 1200.5', '"payment_id": "sp_e2g4b3f5-e9f8-g7h6-i5j4-k3l2m1n0o9p5", "status": "Cancelled"']
        ),
        Task(
                annotator="0",
                user_id="task_63",
                instruction="Your identity is Kenji Tanaka. You suspect there might be unauthorized access to your account, so proceed to freeze all accounts and submit a support ticket reporting potential identity theft. The ticket should state 'Customer suspects identity theft and has requested all accounts to be frozen.'",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_chk_1001", "new_status": "Frozen"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_sav_1002", "new_status": "Frozen"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_crd_1003", "new_status": "Frozen"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "category": "Security", "priority": "High",
                                       "details": "Customer suspects identity theft and has requested all accounts to be frozen.", "target_entity": "Customer",
                                       "target_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_crd_1003"}),
                ],
                outputs=['"status": "Frozen"', '"ticket_id": "tkt_generated_10", "status": "Open"']
        ),
        Task(
                annotator="0",
                user_id="task_64",
                instruction="Your name is Zoltan Nagy, and you want to make a principal-only payment of $5,000 on your mortgage using your checking account, with the note 'Principal-only mortgage payment.' Additionally, check the balance of your investment account and assess your credit score.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_mort_001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_3001", "destination_account_id": "acc_mort_3003", "amount": 5000.00,
                                       "description": "Principal-only mortgage payment"}),
                        Action(name="UpdateLoanBalance", kwargs={"loan_id": "loan_mort_001", "amount": -5000.00}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_mort_001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_inv_3002"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                ],
                outputs=['"current_balance": 710240.5', '"account_id": "acc_inv_3002", "balance": 150000.0', '"credit_score": 810']
        ),
        Task(
                annotator="0",
                user_id="task_65",
                instruction="Your name is Elena Popescu, and you intend to remove Kenji Tanaka as your beneficiary. After this, examine the transaction history of your checking account for the past 90 days. Today is 2023-11-15; ignore any other dates as today.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetBeneficiaryByName", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "beneficiary_name": "Kenji Tanaka"}),
                        Action(name="RemoveBeneficiary", kwargs={"beneficiary_id": "bene_7c6d5e4f-3a2b-1c9d-8e7f-6a5b4c3d2e1f"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetAccountTransactions", kwargs={"account_id": "acc_chk_2001", "days_history": 90, "current_date": "2023-11-15"}),
                ],
                outputs=['"beneficiary_id": "bene_7c6d5e4f-3a2b-1c9d-8e7f-6a5b4c3d2e1f", "action": "removed"', '"transaction_id": "txn_5d4e7g1i-5e7c-8d3g-3e6i-9g1e3f7h8d4d"',
                         '"transaction_id": "txn_4e5f8h2j-6f8d-9e4h-4f7j-1h2f4g8i9e5e"', '"transaction_id": "txn_0a1b2c3d-4e5f-6a7b-8c9d-0e1f2a3b4c5d"',
                         '"transaction_id": "txn_8c9d0e1f-2a3b-4c5d-6e7f-8g9h0i1j2k3l"']
        ),
        Task(
                annotator="0",
                user_id="task_66",
                instruction="You are Kenji Tanaka. Start building your savings by arranging a weekly transfer of $75 from your checking account to your savings account, beginning next Monday. In addition, make sure to verify your current credit card limit and assess your credit score.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="CreateScheduledInternalTransfer",
                               kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "source_account_id": "acc_chk_1001",
                                       "destination_account_id": "acc_sav_1002", "amount": 75.00, "frequency": "Weekly", "start_date": "2025-07-28"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_generated_41"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_crd_1003"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                ],
                outputs=['"payment_id": "sp_generated_41", "status": "Active", "amount": 75.00', '"credit_limit": 10000.0', '"credit_score": 780']
        ),
        Task(
                annotator="0",
                user_id="task_67",
                instruction="You are Kenji Tanaka. Request an increase of your credit card limit to 5,000 EUR, acknowledging your annual income as 45,000 EUR. Submit this request via a support ticket with the content 'Requesting credit limit increase to 5000 EUR. Current limit: 3000 EUR.'. Additionally, pay 100 EUR towards your delinquent personal loan from your checking account, using 'Loan payment' as the description.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Chloe", "last_name": "Dubois"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_crd_9002"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2", "category": "Account Management",
                                       "priority": "Medium", "details": "Requesting credit limit increase to 5000 EUR. Current limit: 3000 EUR.", "target_entity": "Account",
                                       "target_id": "acc_crd_9002"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_9001"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_pers_008"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_9001", "destination_account_id": "acc_pers_9003", "amount": 100.0, "description": "Loan payment"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_9001"}),
                        Action(name="UpdateLoanBalance", kwargs={"loan_id": "loan_pers_008", "amount": -100.0}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_pers_008"}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open"', '"current_balance": 5150.75']
        ),
        Task(
                annotator="0",
                user_id="task_68",
                instruction="You are Zoltan Nagy, with the goal to calculate the combined total of all your account balances. Afterward, update your occupation to 'Head of Surgery', confirm the update, and review your credit score.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_inv_3002"}),
                        Action(name="CalculateSum", kwargs={"values": ["12540.25", "150000.00"]}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "field": "occupation", "value": "Head of Surgery"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                ],
                outputs=['"total": 162540.25', '"occupation": "Head of Surgery"', '"credit_score": 810']
        ),
        Task(
                annotator="0",
                user_id="task_69",
                instruction="You are Elena Popescu. File a support ticket to change your security question to 'What is the name of your first teacher?'. The ticket should say 'Request to update the security question to 'What is the name of your first teacher?''. Additionally, check the balance of your checking account, savings account, and evaluate your current credit score.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "category": "Security", "priority": "High",
                                       "details": "Request to update the security question to 'What is the name of your first teacher?'", "target_entity": "Customer", "target_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="UpdateCustomerSecurityQuestion", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "security_question": "What is the name of your first teacher?"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_2001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_2002"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open"', '"balance": 3100.75', '"account_id": "acc_sav_2002", "balance": 22000.0', '"credit_score": 820']
        ),
        Task(
                annotator="0",
                user_id="task_70",
                instruction="You are Kenji Tanaka. Go ahead and open a new savings account in USD. Once opened, deposit $2000 from an external source and verify the balance of the new account. Use the description 'Initial savings deposit' for this task. Finally, set up a monthly transfer of $150 from your checking account to this new savings account, starting on the 15th of August. Ensure that the monthly transfer is established.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="CreateAccount",
                               kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "account_type": "Savings", "currency": "USD"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="CreateDeposit",
                               kwargs={"account_id": "acc_generated_40", "amount": 2000.00, "description": "Initial savings deposit"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="CreateScheduledInternalTransfer",
                               kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "source_account_id": "acc_chk_1001",
                                       "destination_account_id": "acc_generated_40", "amount": 150.00, "frequency": "Monthly", "start_date": "2025-08-15"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_generated_41"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_generated_40"}),
                ],
                outputs=['"account_id": "acc_generated_40", "balance": 2000.0', '"payment_id": "sp_generated_41", "status": "Active"']
        ),
        Task(
                annotator="0",
                user_id="task_71",
                instruction="As Kenji Tanaka, you plan to ask for an annual statement for your credit card account. Opt to submit this as a low-priority support ticket with the note 'Request for annual statement for credit card acc_crd_1003.' This is related to account management. After submission, advance to assess the reward points on the card, the current balance, and your credit score. Finally, acquire the total balance for all your accounts.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "category": "Account Management", "priority": "Low",
                                       "details": "Request for annual statement for credit card acc_crd_1003.", "target_entity": "Account", "target_id": "acc_crd_1003"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_crd_1003"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_crd_1003"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="CalculateSum", kwargs={"values": ["-2500.0", "5230.5", "15780.0"]}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open", "priority": "Low"', '"rewards_points": 5200', '"balance": -2500.0', '"total": 18510.5', '"credit_score": 780']
        ),
        Task(
                annotator="0",
                user_id="task_72",
                instruction="As Elena Popescu, you must confirm the status of a support ticket earlier submitted with the ID tkt_e9f8c7d6-c7d6-e5f4-a3b2-c1d0e9f8g7h6. Moreover, assemble a list of your beneficiaries and review your checking account balance. Then, modify your marital status to 'Divorced'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_e9f8c7d6-c7d6-e5f4-a3b2-c1d0e9f8g7h6"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_2001"}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "field": "marital_status", "value": "Divorced"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                ],
                outputs=['"ticket_id": "tkt_e9f8c7d6-c7d6-e5f4-a3b2-c1d0e9f8g7h6", "status": "Open"',
                         '"beneficiary_id": "bene_7c6d5e4f-3a2b-1c9d-8e7f-6a5b4c3d2e1f", "beneficiary_name": "Kenji Tanaka"', '"balance": 3100.75', '"marital_status": "Divorced"']
        ),
        Task(
                annotator="0",
                user_id="task_73",
                instruction="Being Zoltan Nagy, you aim to open a new checking account in USD for daily expenses. After its establishment, proceed to move $2,500 from your investment account as initial funding. Label this transfer as 'Initial funding for new checking account.' Afterward, confirm the final balances for both accounts.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="CreateAccount",
                               kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "account_type": "Checking", "currency": "USD"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_inv_3002"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_inv_3002", "destination_account_id": "acc_generated_40", "amount": 2500.00,
                                       "description": "Initial funding for new checking account"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_inv_3002"}),
                ],
                outputs=['"account_id": "acc_generated_40", "balance": 2500.0', '"account_id": "acc_inv_3002", "balance": 147500.0']
        ),
        Task(
                annotator="0",
                user_id="task_74",
                instruction="As Kenji Tanaka, you wish to cancel the outstanding loan application intended for emergency medical expenses. Additionally, view your credit card balance and modify your marital status to 'Engaged.' Lastly, enable paperless billing.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Chloe", "last_name": "Dubois"}),
                        Action(name="GetCustomerLoanApplications", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                        Action(name="GetLoanApplicationDetails", kwargs={"application_id": "app_e4f5a6b7-c8d9-e0f1-a2b3-c4d5e6f7g8h9"}),
                        Action(name="UpdateLoanApplicationStatus", kwargs={"application_id": "app_e4f5a6b7-c8d9-e0f1-a2b3-c4d5e6f7g8h9", "new_status": "Withdrawn"}),
                        Action(name="GetLoanApplicationDetails", kwargs={"application_id": "app_e4f5a6b7-c8d9-e0f1-a2b3-c4d5e6f7g8h9"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_crd_9002"}),
                        Action(name="UpdateCustomerPersonalInfo", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2", "field": "marital_status", "value": "Engaged"}),
                        Action(name="UpdateCustomerPreferences", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2", "paperless_billing": True}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                ],
                outputs=['"application_id": "app_e4f5a6b7-c8d9-e0f1-a2b3-c4d5e6f7g8h9", "application_status": "Withdrawn"', '"balance": -500.0', '"marital_status": "Engaged"',
                         '"paperless_billing": true']
        ),
        Task(
                annotator="0",
                user_id="task_75",
                instruction="As Kenji Tanaka, you seek an overview of all beneficiaries associated with your profile. Once you've reviewed the list, verify your savings account balance and alter your communication preference to 'SMS.'",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="UpdateCustomerPreferences", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "communication_channel": "SMS"}),
                ],
                outputs=['"beneficiary_name": "Elena Popescu"', '"beneficiary_name": "Anytown Utility Services"', '"balance": 15780.0', '"communication_channel": "SMS"']
        ),
        Task(
                annotator="0",
                user_id="task_76",
                instruction="Handle the situation as Elena Popescu who plans to apply for a $350,000 mortgage to acquire a 'New Home Purchase' over a 30-year timeframe (360 months), with an annual income of $85,000. After submission of your application, coordinate a recurring monthly transfer of $50 from your checking account to your savings account to initiate an emergency fund, starting on the first of the upcoming month.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="CreateLoanApplication",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "loan_type": "Mortgage", "amount": 350000.00,
                                       "term": 360, "purpose": "New Home Purchase", "annual_income": 85000}),
                        Action(name="GetLoanApplicationDetails", kwargs={"application_id": "app_generated_21"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_2001"}),
                        Action(name="CreateScheduledInternalTransfer",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "source_account_id": "acc_chk_2001",
                                       "destination_account_id": "acc_sav_2002", "amount": 50.00, "frequency": "Monthly", "start_date": "2025-08-01"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_generated_41"}),
                ],
                outputs=['"application_status": "Submitted"', '"payment_id": "sp_generated_41", "status": "Active"']
        ),
        Task(
                annotator="0",
                user_id="task_77",
                instruction="Take on Zoltan Nagy's role. Facilitate an additional payment of 2,000 RUB on your car loan (loan_auto_007) from your savings account with 'Extra payment on auto loan' as the payment description. Ensure to verify and confirm the newly updated balances for both the loan and your savings account.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Alex", "last_name": "Petrov"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d4e5f6a1-b2c3-d4e5-f6a1-b2c3d4e5f6a1-13"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_auto_007"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_14002"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_sav_14002", "destination_account_id": "acc_auto_14003", "amount": 2000.00,
                                       "description": "Extra payment on auto loan"}),
                        Action(name="UpdateLoanBalance", kwargs={"loan_id": "loan_auto_007", "amount": -2000.00}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_auto_007"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_14002"}),
                ],
                outputs=['"loan_id": "loan_auto_007", "current_balance": 1198000.0', '"account_id": "acc_sav_14002", "balance": 2998000.0']
        ),
        Task(
                annotator="0",
                user_id="task_78",
                instruction="Adopt Kenji Tanaka's perspective to check on your auto loan status. You also need to examine the last 30 days' transactions from your checking account before evaluating your credit score. Given today is 2023-11-15, disregard any other date noted as today. Finally, remove Elena Popescu as a beneficiary and ensure she is no longer included.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_auto_002"}),
                        Action(name="GetAccountTransactions", kwargs={"account_id": "acc_chk_1001", "days_history": 30, "current_date": "2023-11-15"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetBeneficiaryByName", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "beneficiary_name": "Elena Popescu"}),
                        Action(name="RemoveBeneficiary", kwargs={"beneficiary_id": "bene_9a8b7c6d-5e4f-3a2b-1c9d-8e7f6a5b4c3d"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                ],
                outputs=['"loan_id": "loan_auto_002", "status": "Active"', '"transaction_id": "txn_9c2a3b7e-1a3e-4b8c-8a2e-5c6a8b3d4e9f"',
                         '"transaction_id": "txn_8b1c4d6f-2b4f-5a9d-9b3f-6d7b9c4e5a1a"', '"transaction_id": "txn_f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3-21"',
                         '"transaction_id": "txn_7b8c9d0e-1f2a-3b4c-5d6e-7f8g9h0i1j2k"', '"credit_score": 780', '"beneficiary_id": "bene_8b7c6d5e-4f3a-2b1c-9d8e-7f6a5b4c3d2e"']
        ),
        Task(
                annotator="0",
                user_id="task_79",
                instruction="You are in the role of Elena Popescu. Change the source account for your regular payment to Kenji Tanaka from your checking to your savings account. Initiate a support ticket to formalize this request. The support ticket must state: 'Change source account for payment sp_d9b3a2c1-6a5b-4c3d-2e1f-0a9b8c7d6e5f to acc_sav_2002.'",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetScheduledPayments", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_d9b3a2c1-6a5b-4c3d-2e1f-0a9b8c7d6e5f"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "category": "Scheduled Payment", "priority": "Medium",
                                       "details": "Change source account for payment sp_d9b3a2c1-6a5b-4c3d-2e1f-0a9b8c7d6e5f to acc_sav_2002.", "target_entity": "ScheduledPayment",
                                       "target_id": "sp_d9b3a2c1-6a5b-4c3d-2e1f-0a9b8c7d6e5f"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open"']
        ),
        Task(
                annotator="0",
                user_id="task_80",
                instruction="Visualize yourself as Kyle Reese, a new customer, intending to open an account. Your birth date is 1980-03-15, with details including: email k.reese@test.com, phone 777-888-9999, address 456 Future St, LA, 90210, USA. With an annual income of $70,000, you wish to open a USD checking account. Subsequently, assign a beneficiary named 'Sarah Connor' (IBAN US9876543210987654321098 at 'Future Bank', USA) and plan a one-time $500 payment to her set for two weeks from now. Sarah is recognized as an acquaintance.",
                actions=[
                        Action(name="CreateCustomer",
                               kwargs={"first_name": "Kyle", "last_name": "Reese", "dob": "1980-03-15", "email": "k.reese@test.com",
                                       "phone": "777-888-9999", "street": "456 Future St", "city": "LA", "postal_code": "90210", "country": "USA", "annual_income": 70000}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "customer_generated_27"}),
                        Action(name="CreateAccount",
                               kwargs={"customer_id": "customer_generated_27", "account_type": "Checking", "currency": "USD"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="AddBeneficiary",
                               kwargs={"customer_id": "customer_generated_27", "name": "Sarah Connor", "relationship": "Acquaintance",
                                       "iban": "US9876543210987654321098", "bank_name": "Future Bank", "country": "USA"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "customer_generated_27"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="CreateScheduledPayment",
                               kwargs={"customer_id": "customer_generated_27", "source_account_id": "acc_generated_40",
                                       "beneficiary_id": "bene_generated_11", "amount": 500.00, "frequency": "One-Time", "start_date": "2025-08-05"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_generated_41"}),
                ],
                outputs=['"customer_id": "customer_generated_27"', '"account_id": "acc_generated_40"', '"beneficiary_id": "bene_generated_11"',
                         '"payment_id": "sp_generated_41", "status": "Active"']
        ),
        Task(
                annotator="0",
                user_id="task_81",
                instruction="Your name is Kenji Tanaka. Following your marriage, you would like your surname updated to 'Smith' and your personal records to reflect your new marital status. Additionally, you aim to examine your credit score and check the balance of your checking account.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="UpdateCustomerPersonalInfo", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "field": "last_name", "value": "Smith"}),
                        Action(name="UpdateCustomerPersonalInfo", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "field": "marital_status", "value": "Married"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                ],
                outputs=['"last_name": "Smith"', '"marital_status": "Married"', '"credit_score": 780', '"balance": 5230.5']
        ),
        Task(
                annotator="0",
                user_id="task_82",
                instruction="Your name is Zoltan Nagy, and you are looking for information regarding the interest rate applicable to your mortgage. Moreover, you plan to make an additional payment of $500 from your checking account with the memo 'Extra mortgage payment' and to verify both the new loan balance and your credit score.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_mort_001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_3001", "destination_account_id": "acc_mort_3003", "amount": 500.0, "description": "Extra mortgage payment"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="UpdateLoanBalance", kwargs={"loan_id": "loan_mort_001", "amount": -500.0}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_mort_001"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                ],
                outputs=['"interest_rate": 3.25', '"current_balance": 714740.5', '"credit_score": 810']
        ),
        Task(
                annotator="0",
                user_id="task_83",
                instruction="As Alice Wonderland, a new business owner, you seek to open an account. Your birth date is 1990-05-25, and your details include: email alice.w@example.com, phone 222-333-4444, address 1 Wonderland Lane, Fantasy, CA, 90210, USA. Your business generates an annual revenue of $150,000. You need to establish a business checking account in USD and then apply for a business loan of $50,000 for a 5-year (60 months) term meant for an 'equipment purchase'.",
                actions=[
                        Action(name="CreateCustomer",
                               kwargs={"first_name": "Alice", "last_name": "Wonderland", "dob": "1990-05-25", "email": "alice.w@example.com",
                                       "phone": "222-333-4444", "street": "1 Wonderland Lane", "city": "Fantasy", "postal_code": "90210", "country": "USA",
                                       "annual_income": 150000}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "customer_generated_27"}),
                        Action(name="CreateAccount",
                               kwargs={"customer_id": "customer_generated_27", "account_type": "Checking", "currency": "USD"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="CreateLoanApplication",
                               kwargs={"customer_id": "customer_generated_27", "loan_type": "Business", "amount": 50000.00, "term": 60,
                                       "purpose": "Equipment Purchase", "annual_income": 150000}),
                        Action(name="GetLoanApplicationDetails", kwargs={"application_id": "app_generated_21"}),
                ],
                outputs=['"customer_id": "customer_generated_27"', '"account_id": "acc_generated_40"', '"application_id": "app_generated_21", "application_status": "Submitted"']
        ),
        Task(
                annotator="0",
                user_id="task_84",
                instruction="Your name is Elena Popescu. After receiving a scam call attempting to obtain your banking information, you want to report this incident. As a safety precaution, you would like to update your security question to 'What is your favorite childhood book?'. The ticket should mention 'Customer reported a scam call. As a precaution, they request to update their security question to 'What is your favorite childhood book?'.'. Furthermore, verify your savings account balance and transition to paperless billing.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "category": "Security", "priority": "High",
                                       "details": "Customer reported a scam call. As a precaution, they request to update their security question to 'What is your favorite childhood book?'.",
                                       "target_entity": "Customer", "target_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_2002"}),
                        Action(name="UpdateCustomerSecurityQuestion", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "security_question": "What is your favorite childhood book?"}),
                        Action(name="UpdateCustomerPreferences", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "paperless_billing": True}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open"', '"balance": 22000.0', '"security_question":"What is your favorite childhood book?"', '"paperless_billing": true']
        ),
        Task(
                annotator="0",
                user_id="task_85",
                instruction="Your name is Zoltan Nagy. Due to unforeseen circumstances, you need to request a deferral for your next mortgage payment and wish to submit a support ticket for this request. It should mention 'Requesting to defer the next payment for mortgage loan_mort_001.'. Moreover, check the balance of your checking account, your current credit score, investment account balance, and list your beneficiaries.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_mort_001"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "category": "Loan", "priority": "Medium",
                                       "details": "Requesting to defer the next payment for mortgage loan_mort_001.", "target_entity": "Loan", "target_id": "loan_mort_001"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open", "category": "Loan"', '"balance": 12540.25', '"credit_score": 810', '"account_id": "acc_inv_3002", "balance": 150000.0', '"beneficiary_name": "Metropolis Power & Light"']
        ),
        Task(
                annotator="0",
                user_id="task_86",
                instruction="You are Kenji Tanaka, and you need to incorporate the home phone number, 111-555-9999, into your contact details. After it's added, you aim to view a list of all your scheduled payments.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="AddCustomerPhoneNumber",
                               kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "phone_type": "Home", "phone_number": "111-555-9999", "is_primary": False}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetScheduledPayments", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                ],
                outputs=['"type": "Home", "number": "111-555-9999"', '"payment_id": "sp_b3a2c1d9-8e7f-6a5b-4c3d-2e1f0a9b8c7d"',
                         '"payment_id": "sp_c1d9b3a2-7f6a-5b4c-3d2e-1f0a9b8c7d6e"', '"payment_id": "sp_d9b3a2c1-f0a9-b8c7-d6e5-f4a3b2c1d0e9"',
                         '"payment_id": "sp_f4n6a5m7-l2m1-n0o9-p8q7-r6s5t4u3v2w2"']
        ),
        Task(
                annotator="0",
                user_id="task_87",
                instruction="You are Kenji Tanaka. You intend to modify the amount of your recurring payment to Anytown Utility Services from 125.50 to 135.00 and plan to submit a support ticket with the details 'Change amount for payment sp_b3a2c1d9-8e7f-6a5b-4c3d-2e1f0a9b8c7d to 135.00.'. Additionally, ensure you verify the current balance of your checking and savings accounts, as well as your credit score.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_b3a2c1d9-8e7f-6a5b-4c3d-2e1f0a9b8c7d"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "category": "Scheduled Payment", "priority": "Medium",
                                       "details": "Change amount for payment sp_b3a2c1d9-8e7f-6a5b-4c3d-2e1f0a9b8c7d to 135.00.", "target_entity": "ScheduledPayment",
                                       "target_id": "sp_b3a2c1d9-8e7f-6a5b-4c3d-2e1f0a9b8c7d"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open"', '"account_id": "acc_chk_1001", "balance": 5230.5', '"account_id": "acc_sav_1002", "balance": 15780.0', '"credit_score": 780']
        ),
        Task(
                annotator="0",
                user_id="task_88",
                instruction="You are Elena Popescu. Your previous personal loan (loan_pers_003) is complete, and you're considering refinancing. Apply for a new personal loan of $12,000 for a 36-month term for 'Home Improvement', specifying your annual income as $85,000. You also wish to check the balance of your savings account and then activate paperless billing. Finally, you aim to view the total balance of your checking and savings accounts.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_pers_003"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="CreateLoanApplication",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "loan_type": "Personal", "amount": 12000.00,
                                       "term": 36, "purpose": "Home Improvement", "annual_income": 85000}),
                        Action(name="GetLoanApplicationDetails", kwargs={"application_id": "app_generated_21"}),
                        Action(name="UpdateCustomerPreferences", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "paperless_billing": True}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_2002"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_2001"}),
                        Action(name="CalculateSum", kwargs={"values": ["22000.0", "3100.75"]}),
                ],
                outputs=['"loan_id": "loan_pers_003", "status": "Paid Off"', '"application_id": "app_generated_21", "application_status": "Submitted"', '"balance": 22000.0','"paperless_billing": true', '"total": 25100.75']
        ),
        Task(
                annotator="0",
                user_id="task_89",
                instruction="You are Zoltan Nagy. You need to switch your checking account currency from USD to EUR and plan to file a support ticket for this request. The content of the ticket should be 'Request to convert base currency of account acc_chk_3001 from USD to EUR.'. Additionally, make sure to verify the current balance of this account and your investment account.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="CreateSupportTicket",
                               kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "category": "Account Management",
                                       "priority": "Medium", "details": "Request to convert base currency of account acc_chk_3001 from USD to EUR.", "target_entity": "Account",
                                       "target_id": "acc_chk_3001"}),
                        Action(name="GetSupportTicketDetails", kwargs={"ticket_id": "tkt_generated_10"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_inv_3002"}),
                ],
                outputs=['"ticket_id": "tkt_generated_10", "status": "Open"', '"balance": 12540.25', '"account_id": "acc_inv_3002", "balance": 150000.0']
        ),
        Task(
                annotator="0",
                user_id="task_90",
                instruction="You are Elena Popescu, and you need to determine your total net worth. Compute the sum of all your account balances (checking and savings) and subtract any outstanding loan balances. Afterwards, update your occupation to 'Lead Designer' and review your credit score. Also, list your current beneficiaries.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_2001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_2002"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_pers_003"}),
                        Action(name="CalculateSum", kwargs={"values": ["3100.75", "22000.00", "0.0"]}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "field": "occupation", "value": "Lead Designer"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                ],
                outputs=['"total": 25100.75', '"occupation": "Lead Designer"', '"credit_score": 820', '"beneficiary_name": "Kenji Tanaka"']
        ),
        Task(
                annotator="0",
                user_id="task_91",
                instruction="You are Kenji Tanaka. Coordinate the update of your mailing address to 123 Main St, Anytown, CA, 90210, USA, and ensure the change was successful. Additionally, you wish to check the current balance of your auto loan and activate paperless billing.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="UpdateCustomerAddress",
                               kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "street_address": "123 Main St", "city": "Anytown", "state": "CA",
                                       "postal_code": "90210", "country": "USA"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_auto_002"}),
                        Action(name="UpdateCustomerPreferences", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "paperless_billing": True}),
                ],
                outputs=['"mailing_address": {"street_address": "123 Main St", "city": "Anytown", "state": "CA", "postal_code": "90210", "country": "USA"}',
                         '"current_balance": 15670.8', '"paperless_billing": true']
        ),
        Task(
                annotator="0",
                user_id="task_92",
                instruction="You are Elena Popescu, and you need to examine the current balance of all your accounts. Furthermore, you want to verify the status of your old personal loan. Finally, update your communication preference to 'Email'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_2001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_2002"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_pers_003"}),
                        Action(name="UpdateCustomerPreferences", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "communication_channel": "Email"}),
                ],
                outputs=['"account_id": "acc_chk_2001", "balance": 3100.75', '"account_id": "acc_sav_2002", "balance": 22000.0', '"status": "Paid Off"',
                         '"communication_channel": "Email"']
        ),
        Task(
                annotator="0",
                user_id="task_93",
                instruction="You are Zoltan Nagy. Apply for a personal loan of $15,000 with a 48-month term for 'Debt Consolidation', acknowledging that your annual income is $250,000. After submitting the application, proceed to transfer $500 from your checking account to your investment account, using 'Transfer to investment account' as the description.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="CreateLoanApplication",
                               kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "loan_type": "Personal", "amount": 15000.00,
                                       "term": 48, "purpose": "Debt Consolidation", "annual_income": 250000}),
                        Action(name="GetLoanApplicationDetails", kwargs={"application_id": "app_generated_21"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_3001", "destination_account_id": "acc_inv_3002", "amount": 500.00,
                                       "description": "Transfer to investment account"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_3001"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_inv_3002"}),
                ],
                outputs=['"application_status": "Submitted"', '"account_id": "acc_chk_3001", "balance": 12040.25', '"account_id": "acc_inv_3002", "balance": 150500.0']
        ),
        Task(
                annotator="0",
                user_id="task_94",
                instruction="You are Kenji Tanaka, aiming to change your primary phone number to +33 7 88 99 00 11. Also, you wish to view your recent transactions on your checking account from the past 30 days and get your credit card balance. Today is 2023-11-15, disregard any other dates mentioned except today.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Chloe", "last_name": "Dubois"}),
                        Action(name="UpdateCustomerPhone", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2", "new_phone_number": "+33 7 88 99 00 11"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "e5f6a1b2-c3d4-e5f6-a1b2-c3d4e5f6a1b2"}),
                        Action(name="GetAccountTransactions", kwargs={"account_id": "acc_chk_9001", "days_history": 30, "current_date": "2023-11-15"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_crd_9002"}),
                ],
                outputs=['"number": "+33 7 88 99 00 11"', '"transaction_id": "txn_6e7f8g9h-0i1j-2k3l-4m5n-6o7p8q9r0s1t"', '"balance": -500.0']
        ),
        Task(
                annotator="0",
                user_id="task_95",
                instruction="You are Kenji Tanaka, and you would like to acquire a detailed transaction history for your checking account over the last 30 days. Today is 2023-11-16, disregard any other dates mentioned except today. You also wish to find out the interest rate on your savings account. Then, submit a low-priority support ticket with the details 'General inquiry about term deposits.' After the ticket submission, update your occupation to 'Senior Software Engineer'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountTransactions", kwargs={"account_id": "acc_chk_1001", "days_history": 30, "current_date": "2023-11-16"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_sav_1002"}),
                        Action(name="CreateSupportTicket", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "category": "General Inquiry", "priority": "Low",
                                                                     "details": "General inquiry about term deposits.", "target_entity": "Customer",
                                                                     "target_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "field": "occupation", "value": "Senior Software Engineer"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                ],
                outputs=['"transaction_id": "txn_9c2a3b7e-1a3e-4b8c-8a2e-5c6a8b3d4e9f"', '"transaction_id": "txn_8b1c4d6f-2b4f-5a9d-9b3f-6d7b9c4e5a1a"',
                         '"transaction_id": "txn_f6a1b2c3-d4e5-f6a1-b2c3-d4e5f6a1b2c3-21"', '"transaction_id": "txn_7b8c9d0e-1f2a-3b4c-5d6e-7f8g9h0i1j2k"', '"interest_rate": 1.25',
                         '"ticket_id": "tkt_generated_10", "status": "Open"', '"occupation": "Senior Software Engineer"']
        ),
        Task(
                annotator="0",
                user_id="task_96",
                instruction="Present yourself as Zoltan Nagy, and carry out the deletion of your beneficiary, Metropolis Power & Light. Upon finishing this, proceed with making a $1000 payment towards your mortgage using your checking account, ensuring to include the description 'Extra mortgage payment'.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "David", "last_name": "Chen"}),
                        Action(name="GetBeneficiaryByName", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a", "beneficiary_name": "Metropolis Power & Light"}),
                        Action(name="RemoveBeneficiary", kwargs={"beneficiary_id": "bene_6d5e4f3a-2b1c-9d8e-7f6a-5b4c3d2e1f0a"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "d8e9f0a1-b2c3-4d5e-6f7a-8b9c0d1e2f3a"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_3001", "destination_account_id": "acc_mort_3003", "amount": 1000.0, "description": "Extra mortgage payment"}),
                        Action(name="UpdateLoanBalance", kwargs={"loan_id": "loan_mort_001", "amount": -1000.0}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_mort_001"}),
                ],
                outputs=['"beneficiary_id": "bene_6d5e4f3a-2b1c-9d8e-7f6a-5b4c3d2e1f0a", "action": "removed"', '"current_balance": 714240.5']
        ),
        Task(
                annotator="0",
                user_id="task_97",
                instruction="Introduce yourself as Elena Popescu and check the current status of your personal loan. Additionally, modify your occupation to 'Senior Graphic Designer' and examine your savings account balance.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetCustomerLoans", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetLoanDetails", kwargs={"loan_id": "loan_pers_003"}),
                        Action(name="UpdateCustomerPersonalInfo",
                               kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef", "field": "occupation", "value": "Senior Graphic Designer"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_2002"}),
                ],
                outputs=['"loan_id": "loan_pers_003", "status": "Paid Off"', '"occupation": "Senior Graphic Designer"', '"balance": 22000.0']
        ),
        Task(
                annotator="0",
                user_id="task_98",
                instruction="Assume the role of a new customer, Peter Venkman, and begin the account opening process. Your birthdate is 1950-10-19, and your details are: email p.venkman@ghostbusters.com, phone 555-2368, address 14 N Moore St, Providence, NY, 10013, USA. With an annual income of $120,000, establish a checking account in USD. Then, include a beneficiary named 'Dana Barrett' (IBAN US1112223334445556667778 at 'First National Bank of New York', USA) and schedule a monthly payment of $1000 to her, starting on the 1st of next month. Specify that Dana is your friend.",
                actions=[
                        Action(name="CreateCustomer", kwargs={"first_name": "Peter", "last_name": "Venkman", "dob": "1950-10-19",
                                                               "email": "p.venkman@ghostbusters.com", "phone": "555-2368", "street": "14 N Moore St", "city": "Providence",
                                                               "postal_code": "10013", "country": "USA", "annual_income": 120000}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "customer_generated_27"}),
                        Action(name="CreateAccount",
                               kwargs={"customer_id": "customer_generated_27", "account_type": "Checking", "currency": "USD"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="AddBeneficiary",
                               kwargs={"customer_id": "customer_generated_27", "name": "Dana Barrett", "relationship": "Friend",
                                       "iban": "US1112223334445556667778", "bank_name": "First National Bank of New York", "country": "USA"}),
                        Action(name="ListBeneficiaries", kwargs={"customer_id": "customer_generated_27"}),
                        Action(name="GetAccountDetails", kwargs={"account_id": "acc_generated_40"}),
                        Action(name="CreateScheduledPayment",
                               kwargs={"customer_id": "customer_generated_27", "source_account_id": "acc_generated_40",
                                       "beneficiary_id": "bene_generated_11", "amount": 1000.00, "frequency": "Monthly", "start_date": "2025-08-01"}),
                        Action(name="GetScheduledPaymentDetails", kwargs={"payment_id": "sp_generated_41"}),
                ],
                outputs=['"customer_id": "customer_generated_27"', '"account_id": "acc_generated_40"', '"beneficiary_id": "bene_generated_11"',
                         '"payment_id": "sp_generated_41", "status": "Active"']
        ),
        Task(
                annotator="0",
                user_id="task_99",
                instruction="Present yourself as Kenji Tanaka and enable paperless billing, updating your communication preference to 'App'. Once these tasks are completed, verify the balance of your checking account and your credit score.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "John", "last_name": "Doe"}),
                        Action(name="UpdateCustomerPreferences",
                               kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e", "paperless_billing": True, "communication_channel": "App"}),
                        Action(name="GetCustomerDetails", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_1001"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "c3e8f1d2-9a8b-4f7c-8a6e-2b9f3d1a4c7e"}),
                ],
                outputs=['"paperless_billing": true, "communication_channel": "App"', '"balance": 5230.5', '"credit_score": 780']
        ),
        Task(
                annotator="0",
                user_id="task_100",
                instruction="Identify yourself as Elena Popescu and proceed to close your checking account, transferring the remaining balance to your savings account with the description 'Account closure'. After this task, confirm the final balance of your savings account, enumerate all your remaining open accounts, and assess your credit score.",
                actions=[
                        Action(name="SearchCustomerByName", kwargs={"first_name": "Jane", "last_name": "Smith"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_chk_2001"}),
                        Action(name="CreateTransaction",
                               kwargs={"source_account_id": "acc_chk_2001", "destination_account_id": "acc_sav_2002", "amount": 3100.75,
                                       "description": "Account closure"}),
                        Action(name="UpdateAccountStatus", kwargs={"account_id": "acc_chk_2001", "new_status": "Closed"}),
                        Action(name="GetAccountBalance", kwargs={"account_id": "acc_sav_2002"}),
                        Action(name="GetCustomerAccounts", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                        Action(name="GetCustomerFinancialProfile", kwargs={"customer_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"}),
                ],
                outputs=['"account_id": "acc_chk_2001", "status": "Closed"', '"account_id": "acc_sav_2002", "balance": 25100.75', '"account_id": "acc_sav_2002"',
                         '"credit_score": 820']
        ),
]
