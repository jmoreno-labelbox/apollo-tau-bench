from domains.dto import Task, Action

TASKS = [
    Task(
        annotator='0',
        user_id='onboarding_1',
        instruction="HR sent out memos about two new people starting soon, Drew Nelson and Jordan Garcia. You will need to assign them the default licenses from rbac_group_map for their respective jobs to start working if they don't have them already. They will also need to be assigned GitHub Enterprise licenses. If they don't already have employee accounts and mailboxes, they will need those as well. Log these changes to lifecycle_queue. Let me know if you need to create employee accounts and mailboxes.",
        actions=[
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0039'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0002'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0039'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0002'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Support Manager'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Content Strategist'}),
            Action(name='get_license_info', kwargs={'license_name': 'GitHub Enterprise'}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0039', 'license_ids': ['lic_github_ent']}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0002', 'license_ids': ['lic_github_ent']}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='license_allocation_1',
        instruction='You are an AI agent that automates software license allocation. Using license_inventory and employees, identify users with upcoming software renewals, indicated by the last audit being over 30 days old. Confirm that the licenses identified are being actively used and update license_inventory with the new audit. Generate a CSV of underutilized licenses (utilization_rate < 30%). Open low priorityJira tickets for "Manage license utilization for license_id" for each underutilized license.',
        actions=[
            Action(name='license_requires_renewal', kwargs={'num_days': 30}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e3', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e5', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_adobe_cc', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_github_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_slack_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_salesforce', 'status': 'active'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e3'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e5'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_adobe_cc'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_slack_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_salesforce'}),
            Action(name='filter_licenses', kwargs={'utilization': 0.3}),
            Action(name='export_underutilized_licenses', kwargs={'output_data': ['lic_m365_e5', 'lic_adobe_cc', 'lic_github_ent', 'lic_salesforce']}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_m365_e5', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_adobe_cc', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_github_ent', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_salesforce', 'priority': 'P3'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='employee_offboarding_1',
        instruction='You are an AI agent for automating employee offboarding. Using hr_memos and employees, detect staff marked "offboarding." Perform the standard offboarding procedures, including disabling their accounts, revoke licenses, archiving mailboxes, and wiping assigned devices in it_assets. Log these completed tasks to lifecycle_queue, and let management know that each employee was offboarded.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'offboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Parker', 'last_name': 'Davis'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Remy', 'last_name': 'White'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0007', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0007', 'department': 'IT'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0019', 'department': 'Operations'}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0007', 'unassign': True}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0019', 'unassign': True}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0007', 'memo_id': 'memo_0009', 'event': 'offboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0019', 'memo_id': 'memo_0012', 'event': 'offboarding'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Parker Davis was offboarded.'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Remy White was offboarded.'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='compliance_check_1',
        instruction='You are an AI agent performing quarterly compliance checks. Using license_assignments, rbac_group_map, and employees, compare assigned roles in the Marketing department with rbac_group_map default licenses. Flag anomalies, specifically employees missing default licenses. Generate a review packet as a PDF and record the run in validation_issues.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0002', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0012', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0016', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0018', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0021', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0024', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0025', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0027', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0031', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0032', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0034', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0041', 'job_title': 'Content Strategist'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'emp_0002 is missing no licenses,emp_0012 is missing no licenses, emp_0016 is missing no licenses, emp_0018 is missing no licenses, emp_0021 is missing no licenses, emp_0024 is missing no licenses, emp_0025 is missing no licenses, emp_0027 is missing no licenses, emp_0031 is missing no licenses, emp_0032 is missing no licenses, emp_0034 is missing no licenses, emp_0041 is missing no licenses'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='track_backlog_1',
        instruction='You are an AI agent tracking project backlog. Referencing the backlog_snapshot_open database, create a report highlighting tickets not marked "Resolved". Save the report containing these findings. File Jira tickets for any unresolved urgent tickets with a summary as "Address ticket_id".',
        actions=[
            Action(name='get_tickets_backlog', kwargs={}),
            Action(name='filter_tickets', kwargs={'ids': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
                ],
                'not_status': 'Resolved'}),
            Action(name='save_report', kwargs={'save_data': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
            ],
            }),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5002', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5009', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5011', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5017', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5024', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5029', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5036', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5048', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5049', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5050', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5058', 'priority': 'P1'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='tool_assignment_1',
        instruction='You are an AI agent provisioning accounts for a new marketing tool. Assign all employees in the Marketing department app_tiktok accounts. These accounts should be standard for these jobs, so the rbac_group_map will need to be updated with this new account. Create a report with the provisioning summary.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0002', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0012', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0016', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0018', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0021', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0024', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0025', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0027', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0031', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0032', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0034', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0041', 'app_id': 'app_tiktok'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_tiktok', 'job_title': 'Content Strategist'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_tiktok', 'job_title': 'Design Lead'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_tiktok', 'job_title': 'Growth Marketer'}),
            Action(name='report_run', kwargs={'report_type': 'provisioning', 'run_data':[
                'Added app_tiktok account for emp_0002',
                'Added app_tiktok account for emp_0012',
                'Added app_tiktok account for emp_0016',
                'Added app_tiktok account for emp_0018',
                'Added app_tiktok account for emp_0021',
                'Added app_tiktok account for emp_0024',
                'Added app_tiktok account for emp_0025',
                'Added app_tiktok account for emp_0027',
                'Added app_tiktok account for emp_0031',
                'Added app_tiktok account for emp_0032',
                'Added app_tiktok account for emp_0034',
                'Added app_tiktok account for emp_0041',
            ]})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='sync_lifecycle_1',
        instruction='You are an AI agent synchronizing user lifecycles. From employees, detect anyone marked "on_leave." Do these things for Wyatt Hill as well. Update their statuses to be disabled in the directory_accounts database, revoke licenses in the license_assignments and license_inventory databases, and let management know that the lifecycles were synchronized.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Wyatt', 'last_name': 'Hill'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0004', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0032', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0034', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0034'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'The lifecycles were synchronized.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='service_stats_1',
        instruction='You are an AI agent evaluating daily service stats. Using tickets, calculate the average time it takes to complete a ticket, the average opened, and the average closed tickets per day. Notify Avery Lee, Jordan Garcia, and Taylor Patel with your findings. Generate a pdf report of your findings and log it to validation_issues.',
        actions=[
            Action(name='ticket_statistics', kwargs={'field': 'avg_open_age_hours', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_opened', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_closed', 'type': 'avg'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003'],
                'summary': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='asset_reservations_1',
        instruction='You are an AI agent for asset reservations. When new hires appear in hr_memos, assign them an available laptop from it_assets. Mark those assets as "assigned" and write a completed record into lifecycle_queue.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'onboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Finley', 'last_name': 'Robinson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'River', 'last_name': 'Scott'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Alex', 'last_name': 'Brown'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Cameron', 'last_name': 'Wilson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0025', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0031', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0008', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0011', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0003', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0001', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0002', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0039', 'asset_type': 'laptop'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0025', 'memo_id': 'memo_0001', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0031', 'memo_id': 'memo_0002', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0008', 'memo_id': 'memo_0003', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0011', 'memo_id': 'memo_0004', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='unused_licenses_1',
        instruction='You are an AI agent reclaiming unused software licenses. Cross-check license_assignments with employees for terminated or users on leave. Remove those assignments, update license_inventory to add available seats, and generate individual pdf reports of the changes for each user.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'terminated'}),
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0033'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0007']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0033']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0004', 'lic_slack_ent', 'lic_github_ent', 'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0019', 'lic_slack_ent',  'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0032', 'lic_salesforce', 'lic_slack_ent', 'lic_m365_e3']}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='onboarding_2',
        instruction="HR sent out memos about two new people starting soon, Drew Nelson and Taylor Patel. You will need to assign them the default licenses from rbac_group_map for their respective jobs to start working if they don't have them already. They will also need to be assigned GitHub Enterprise licenses. If they don't already have employee accounts and mailboxes, they will need those as well. Log these changes to lifecycle_queue. Let me know if you need to create employee accounts and mailboxes.",
        actions=[
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0039'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0003'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0039'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0003'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Support Manager'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Ops Coordinator'}),
            Action(name='get_license_info', kwargs={'license_name': 'GitHub Enterprise'}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0039', 'license_ids': ['lic_github_ent']}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0003', 'license_ids': ['lic_github_ent']}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='license_allocation_2',
        instruction='You are an AI agent that automates software license allocation. Using license_inventory and employees, identify users with upcoming software renewals, indicated by the last audit being over 30 days old. Confirm that the licenses identified are being actively used and update license_inventory with the new audit. Generate a CSV of underutilized licenses (utilization_rate < 40%). Open low priorityJira tickets for "Manage license utilization for license_id" for each underutilized license.',
        actions=[
            Action(name='license_requires_renewal', kwargs={'num_days': 30}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e3', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e5', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_adobe_cc', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_github_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_slack_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_salesforce', 'status': 'active'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e3'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e5'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_adobe_cc'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_slack_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_salesforce'}),
            Action(name='filter_licenses', kwargs={'utilization': 0.4}),
            Action(name='export_underutilized_licenses', kwargs={'output_data': ['lic_m365_e5', 'lic_adobe_cc', 'lic_github_ent', 'lic_salesforce']}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_m365_e5', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_adobe_cc', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_github_ent', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_salesforce', 'priority': 'P3'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='employee_offboarding_2',
        instruction='You are an AI agent for automating employee offboarding. Using hr_memos and employees, find staff marked "offboarding." Perform the offboarding procedures, including disabling their accounts, revoke licenses, archiving mailboxes, and wiping assigned devices in it_assets. Log these completed tasks to lifecycle_queue, and let management know that each employee was offboarded.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'offboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Parker', 'last_name': 'Davis'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Remy', 'last_name': 'White'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0007', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0007', 'department': 'IT'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0019', 'department': 'Operations'}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0007', 'unassign': True}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0019', 'unassign': True}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0007', 'memo_id': 'memo_0009', 'event': 'offboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0019', 'memo_id': 'memo_0012', 'event': 'offboarding'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Parker Davis was offboarded.'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Remy White was offboarded.'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='compliance_check_2',
        instruction='You are an AI agent performing annual compliance checks. Using license_assignments, rbac_group_map, and employees, compare assigned roles in the Marketing department with rbac_group_map default licenses. Flag anomalies, specifically employees missing default licenses. Generate a review packet as a PDF and record the run in validation_issues.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0002', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0012', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0016', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0018', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0021', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0024', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0025', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0027', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0031', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0032', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0034', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0041', 'job_title': 'Content Strategist'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'emp_0002 is missing no licenses,emp_0012 is missing no licenses, emp_0016 is missing no licenses, emp_0018 is missing no licenses, emp_0021 is missing no licenses, emp_0024 is missing no licenses, emp_0025 is missing no licenses, emp_0027 is missing no licenses, emp_0031 is missing no licenses, emp_0032 is missing no licenses, emp_0034 is missing no licenses, emp_0041 is missing no licenses'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='track_backlog_2',
        instruction='You are an AI agent designed to track project backlog. Referencing the backlog_snapshot_open database, create a report highlighting tickets not marked "Resolved". Save the report containing these findings. File Jira tickets for any unresolved urgent tickets with a summary as "Address ticket_id".',
        actions=[
            Action(name='get_tickets_backlog', kwargs={}),
            Action(name='filter_tickets', kwargs={'ids': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
                ],
                'not_status': 'Resolved'}),
            Action(name='save_report', kwargs={'save_data': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
            ],
            }),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5002', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5009', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5011', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5017', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5024', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5029', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5036', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5048', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5049', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5050', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5058', 'priority': 'P1'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='tool_assignment_2',
        instruction='You are an AI agent provisioning accounts for a new marketing tool. Assign all employees in the Marketing department app_instagram accounts. These accounts should be standard for these jobs, so the rbac_group_map will need to be updated with this new account. Create a report with the provisioning summary.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0002', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0012', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0016', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0018', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0021', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0024', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0025', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0027', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0031', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0032', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0034', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0041', 'app_id': 'app_instagram'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_instagram', 'job_title': 'Content Strategist'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_instagram', 'job_title': 'Design Lead'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_instagram', 'job_title': 'Growth Marketer'}),
            Action(name='report_run', kwargs={'report_type': 'provisioning', 'run_data':[
                'Added app_instagram account for emp_0002',
                'Added app_instagram account for emp_0012',
                'Added app_instagram account for emp_0016',
                'Added app_instagram account for emp_0018',
                'Added app_instagram account for emp_0021',
                'Added app_instagram account for emp_0024',
                'Added app_instagram account for emp_0025',
                'Added app_instagram account for emp_0027',
                'Added app_instagram account for emp_0031',
                'Added app_instagram account for emp_0032',
                'Added app_instagram account for emp_0034',
                'Added app_instagram account for emp_0041',
            ]})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='sync_lifecycle_2',
        instruction='You are an AI agent synchronizing user lifecycles. From employees, detect anyone marked "on_leave." Do these things for Parker Davis as well. Update their statuses to be disabled in the directory_accounts database, revoke licenses in the license_assignments and license_inventory databases, and let management know that the lifecycles were synchronized.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Parker', 'last_name': 'Davis'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0004', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0032', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0007', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'The lifecycles were synchronized.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='service_stats_2',
        instruction='You are an AI agent evaluating daily service stats. Using tickets, calculate the average time it takes to complete a ticket, the average opened, and the average closed tickets per day. Notify Avery Lee, Jordan Garcia, and Morgan Nguyen with your findings. Generate a pdf report of your findings and log it to validation_issues.',
        actions=[
            Action(name='ticket_statistics', kwargs={'field': 'avg_open_age_hours', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_opened', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_closed', 'type': 'avg'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Morgan', 'last_name': 'Nguyen'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0004'],
                'summary': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='asset_reservations_2',
        instruction='You are an AI agent designed to manage asset reservations. When new hires appear in hr_memos, assign them an available laptop from it_assets. Mark those assets as "assigned" and write a completed record into lifecycle_queue.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'onboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Finley', 'last_name': 'Robinson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'River', 'last_name': 'Scott'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Alex', 'last_name': 'Brown'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Cameron', 'last_name': 'Wilson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0025', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0031', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0008', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0011', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0003', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0001', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0002', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0039', 'asset_type': 'laptop'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0025', 'memo_id': 'memo_0001', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0031', 'memo_id': 'memo_0002', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0008', 'memo_id': 'memo_0003', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0011', 'memo_id': 'memo_0004', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='unused_licenses_2',
        instruction='You are an AI agent designed to reclaim unused software licenses. Cross-check license_assignments with employees for terminated or users on leave. Remove those assignments, update license_inventory to add available seats, and generate individual pdf reports of the changes for each user.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'terminated'}),
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0033'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0007']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0033']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0004', 'lic_slack_ent', 'lic_github_ent', 'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0019', 'lic_slack_ent',  'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0032', 'lic_salesforce', 'lic_slack_ent', 'lic_m365_e3']}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='onboarding_3',
        instruction="HR sent out memos about two new people starting soon, Drew Nelson and Avery Lee. You will need to assign them the default licenses from rbac_group_map for their respective jobs to start working if they don't have them already. They will also need to be assigned GitHub Enterprise licenses. If they don't already have employee accounts and mailboxes, they will need those as well. Log these changes to lifecycle_queue. Let me know if you need to create employee accounts and mailboxes.",
        actions=[
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0039'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0001'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0039'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0001'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Support Manager'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'HRBP'}),
            Action(name='get_license_info', kwargs={'license_name': 'GitHub Enterprise'}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0039', 'license_ids': ['lic_github_ent']}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0001', 'license_ids': ['lic_github_ent']}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='license_allocation_3',
        instruction='You are an AI agent that automates software license allocation. Using license_inventory and employees, identify users with upcoming software renewals, indicated by the last audit being over 30 days old. Confirm that the licenses identified are being actively used and update license_inventory with the new audit. Generate a CSV of underutilized licenses (utilization_rate < 50%). Open low priorityJira tickets for "Manage license utilization for license_id" for each underutilized license.',
        actions=[
            Action(name='license_requires_renewal', kwargs={'num_days': 30}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e3', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e5', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_adobe_cc', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_github_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_slack_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_salesforce', 'status': 'active'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e3'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e5'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_adobe_cc'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_slack_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_salesforce'}),
            Action(name='filter_licenses', kwargs={'utilization': 0.5}),
            Action(name='export_underutilized_licenses', kwargs={'output_data': ['lic_m365_e5', 'lic_adobe_cc', 'lic_github_ent', 'lic_slack_ent', 'lic_salesforce']}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_m365_e5', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_adobe_cc', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_github_ent', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_slack_ent', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_salesforce', 'priority': 'P3'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='employee_offboarding_3',
        instruction='You are an AI agent for automating employee offboarding. Using hr_memos and employees, find staff marked "offboarding." Perform the offboarding procedures, including disabling their accounts, revoke licenses, archiving mailboxes, and wiping assigned devices in it_assets. Create a log of these completed tasks in lifecycle_queue, and let management know that each employee was offboarded.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'offboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Parker', 'last_name': 'Davis'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Remy', 'last_name': 'White'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0007', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0007', 'department': 'IT'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0019', 'department': 'Operations'}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0007', 'unassign': True}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0019', 'unassign': True}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0007', 'memo_id': 'memo_0009', 'event': 'offboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0019', 'memo_id': 'memo_0012', 'event': 'offboarding'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Parker Davis was offboarded.'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Remy White was offboarded.'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='compliance_check_3',
        instruction='You are an AI agent performing quarterly compliance checks. Using license_assignments, rbac_group_map, and employees, compare assigned roles in the Marketing department with rbac_group_map default licenses. Flag any employees missing default licenses. Generate a review packet as a PDF and record the run in validation_issues.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0002', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0012', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0016', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0018', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0021', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0024', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0025', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0027', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0031', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0032', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0034', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0041', 'job_title': 'Content Strategist'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'emp_0002 is missing no licenses,emp_0012 is missing no licenses, emp_0016 is missing no licenses, emp_0018 is missing no licenses, emp_0021 is missing no licenses, emp_0024 is missing no licenses, emp_0025 is missing no licenses, emp_0027 is missing no licenses, emp_0031 is missing no licenses, emp_0032 is missing no licenses, emp_0034 is missing no licenses, emp_0041 is missing no licenses'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='track_backlog_3',
        instruction='You are an AI agent tracking project backlog. Using the backlog_snapshot_open database, create a report highlighting tickets that are not "Resolved". Save the report containing these findings. File Jira tickets for any unresolved urgent tickets with a summary as "Address ticket_id".',
        actions=[
            Action(name='get_tickets_backlog', kwargs={}),
            Action(name='filter_tickets', kwargs={'ids': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
                ],
                'not_status': 'Resolved'}),
            Action(name='save_report', kwargs={'save_data': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
            ],
            }),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5002', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5009', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5011', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5017', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5024', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5029', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5036', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5048', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5049', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5050', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5058', 'priority': 'P1'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='tool_assignment_3',
        instruction='You are an AI agent provisioning accounts for a new marketing tool. Assign all employees in the Marketing department app_reddit accounts. These accounts should be standard for these jobs, so the rbac_group_map will need to be updated with this new account. Create a report with the provisioning summary.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0002', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0012', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0016', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0018', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0021', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0024', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0025', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0027', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0031', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0032', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0034', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0041', 'app_id': 'app_reddit'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_reddit', 'job_title': 'Content Strategist'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_reddit', 'job_title': 'Design Lead'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_reddit', 'job_title': 'Growth Marketer'}),
            Action(name='report_run', kwargs={'report_type': 'provisioning', 'run_data':[
                'Added app_reddit account for emp_0002',
                'Added app_reddit account for emp_0012',
                'Added app_reddit account for emp_0016',
                'Added app_reddit account for emp_0018',
                'Added app_reddit account for emp_0021',
                'Added app_reddit account for emp_0024',
                'Added app_reddit account for emp_0025',
                'Added app_reddit account for emp_0027',
                'Added app_reddit account for emp_0031',
                'Added app_reddit account for emp_0032',
                'Added app_reddit account for emp_0034',
                'Added app_reddit account for emp_0041',
            ]})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='sync_lifecycle_3',
        instruction='You are an AI agent synchronizing user lifecycles. From employees, detect anyone marked "on_leave." Do these things for Alex Brown as well. Update their statuses to be disabled in the directory_accounts database, revoke licenses in the license_assignments and license_inventory databases, and let management know that the lifecycles were synchronized.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Alex', 'last_name': 'Brown'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0004', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0032', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0008', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0008'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'The lifecycles were synchronized.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='service_stats_3',
        instruction='You are an AI agent evaluating daily service stats. Using tickets, calculate the average time it takes to complete a ticket, the average opened, and the average closed tickets per day. Notify Avery Lee, Jordan Garcia, and Casey Smith with your findings. Generate a pdf report of your findings and log it to validation_issues.',
        actions=[
            Action(name='ticket_statistics', kwargs={'field': 'avg_open_age_hours', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_opened', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_closed', 'type': 'avg'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Casey', 'last_name': 'Smith'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0005'],
                'summary': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='asset_reservations_3',
        instruction='You are an AI agent for asset reservations. For employees with onboarding memos in hr_memos, assign them an available laptop from it_assets. Mark those assets as "assigned" and write a completed record into lifecycle_queue.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'onboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Finley', 'last_name': 'Robinson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'River', 'last_name': 'Scott'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Alex', 'last_name': 'Brown'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Cameron', 'last_name': 'Wilson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0025', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0031', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0008', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0011', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0003', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0001', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0002', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0039', 'asset_type': 'laptop'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0025', 'memo_id': 'memo_0001', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0031', 'memo_id': 'memo_0002', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0008', 'memo_id': 'memo_0003', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0011', 'memo_id': 'memo_0004', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='unused_licenses_3',
        instruction='You are an AI agent reclaiming unused software licenses. Referencing license_assignments and employees, check for terminated or users on leave. Remove those assignments, update license_inventory to add available seats, and generate individual pdf reports of the changes for each user.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'terminated'}),
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0033'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0007']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0033']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0004', 'lic_slack_ent', 'lic_github_ent', 'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0019', 'lic_slack_ent',  'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0032', 'lic_salesforce', 'lic_slack_ent', 'lic_m365_e3']}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='onboarding_4',
        instruction="HR sent out memos about two new people starting soon, Jordan Garcia and Taylor Patel. You will need to assign them the default licenses from rbac_group_map for their respective jobs to start working if they don't have them already. They will also need to be assigned GitHub Enterprise licenses. If they don't already have employee accounts and mailboxes, they will need those as well. Log these changes to lifecycle_queue. Let me know if you need to create employee accounts and mailboxes.",
        actions=[
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0002'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0003'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0002'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0003'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Content Strategist'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Ops Coordinator'}),
            Action(name='get_license_info', kwargs={'license_name': 'GitHub Enterprise'}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0002', 'license_ids': ['lic_github_ent']}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0003', 'license_ids': ['lic_github_ent']}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='license_allocation_4',
        instruction='You are an AI agent that automates software license allocation. Using license_inventory and employees, identify users with upcoming software renewals, indicated by the last audit being over 20 days old. Confirm that the licenses identified are being actively used and update license_inventory with the new audit. Generate a CSV of underutilized licenses (utilization_rate < 30%). Open low priorityJira tickets for "Manage license utilization for license_id" for each underutilized license.',
        actions=[
            Action(name='license_requires_renewal', kwargs={'num_days': 20}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e3', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e5', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_adobe_cc', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_github_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_slack_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_salesforce', 'status': 'active'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e3'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e5'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_adobe_cc'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_slack_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_salesforce'}),
            Action(name='filter_licenses', kwargs={'utilization': 0.3}),
            Action(name='export_underutilized_licenses', kwargs={'output_data': ['lic_m365_e5', 'lic_adobe_cc', 'lic_github_ent', 'lic_salesforce']}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_m365_e5', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_adobe_cc', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_github_ent', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_salesforce', 'priority': 'P3'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='employee_offboarding_4',
        instruction='You are an AI agent for automating employee offboarding. Find staff marked "offboarding" using hr_memos and employees. Perform the offboarding procedures, including disabling their accounts, revoke licenses, archiving mailboxes, and wiping assigned devices in it_assets. Create a log of these completed tasks in lifecycle_queue, and let management know that each employee was offboarded.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'offboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Parker', 'last_name': 'Davis'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Remy', 'last_name': 'White'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0007', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0007', 'department': 'IT'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0019', 'department': 'Operations'}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0007', 'unassign': True}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0019', 'unassign': True}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0007', 'memo_id': 'memo_0009', 'event': 'offboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0019', 'memo_id': 'memo_0012', 'event': 'offboarding'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Parker Davis was offboarded.'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Remy White was offboarded.'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='compliance_check_4',
        instruction='You are an AI agent designed to perform quarterly compliance checks. Using license_assignments, rbac_group_map, and employees, compare assigned roles in the Marketing department with rbac_group_map default licenses. Flag anomalies, specifically employees missing default licenses. Generate a review packet as a PDF and record the run in validation_issues.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0002', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0012', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0016', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0018', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0021', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0024', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0025', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0027', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0031', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0032', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0034', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0041', 'job_title': 'Content Strategist'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'emp_0002 is missing no licenses,emp_0012 is missing no licenses, emp_0016 is missing no licenses, emp_0018 is missing no licenses, emp_0021 is missing no licenses, emp_0024 is missing no licenses, emp_0025 is missing no licenses, emp_0027 is missing no licenses, emp_0031 is missing no licenses, emp_0032 is missing no licenses, emp_0034 is missing no licenses, emp_0041 is missing no licenses'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='track_backlog_4',
        instruction='You are an AI agent tracking project backlog. Referencing the backlog_snapshot_open database, create a report highlighting tickets not marked "Resolved". Save a report containing these findings. File Jira tickets for any unresolved urgent tickets with a summary as "Address ticket_id".',
        actions=[
            Action(name='get_tickets_backlog', kwargs={}),
            Action(name='filter_tickets', kwargs={'ids': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
                ],
                'not_status': 'Resolved'}),
            Action(name='save_report', kwargs={'save_data': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
            ],
            }),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5002', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5009', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5011', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5017', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5024', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5029', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5036', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5048', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5049', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5050', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5058', 'priority': 'P1'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='tool_assignment_4',
        instruction='You are an AI agent provisioning accounts for a new marketing tool. Assign all employees in the Marketing department app_twitter accounts. These accounts should be standard for these jobs, so the rbac_group_map will need to be updated with this new account. Create a report with the provisioning summary.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0002', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0012', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0016', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0018', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0021', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0024', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0025', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0027', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0031', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0032', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0034', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0041', 'app_id': 'app_twitter'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_twitter', 'job_title': 'Content Strategist'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_twitter', 'job_title': 'Design Lead'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_twitter', 'job_title': 'Growth Marketer'}),
            Action(name='report_run', kwargs={'report_type': 'provisioning', 'run_data':[
                'Added app_twitter account for emp_0002',
                'Added app_twitter account for emp_0012',
                'Added app_twitter account for emp_0016',
                'Added app_twitter account for emp_0018',
                'Added app_twitter account for emp_0021',
                'Added app_twitter account for emp_0024',
                'Added app_twitter account for emp_0025',
                'Added app_twitter account for emp_0027',
                'Added app_twitter account for emp_0031',
                'Added app_twitter account for emp_0032',
                'Added app_twitter account for emp_0034',
                'Added app_twitter account for emp_0041',
            ]})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='sync_lifecycle_4',
        instruction='You are an AI agent synchronizing user lifecycles. From employees, detect anyone marked "on_leave." Do these things for Rowan Lopez as well. Update their statuses to be disabled in the directory_accounts database, revoke licenses in the license_assignments and license_inventory databases, and let management know that the lifecycles were synchronized.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Rowan', 'last_name': 'Lopez'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0004', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0032', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0010', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0010'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'The lifecycles were synchronized.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='service_stats_4',
        instruction='You are an AI agent evaluating daily service stats. Using tickets, calculate the average time it takes to complete a ticket, the average opened, and the average closed tickets per day. Notify Avery Lee, Taylor Patel, and Morgan Nguyen with your findings. Generate a pdf report of your findings and log it to validation_issues.',
        actions=[
            Action(name='ticket_statistics', kwargs={'field': 'avg_open_age_hours', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_opened', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_closed', 'type': 'avg'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Morgan', 'last_name': 'Nguyen'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0003', 'emp_0004'],
                'summary': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='asset_reservations_4',
        instruction='You are an AI agent for asset reservations. When new hires appear in hr_memos, assign them an unused laptop from it_assets. Mark those assets as "assigned" and write a completed record into lifecycle_queue.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'onboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Finley', 'last_name': 'Robinson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'River', 'last_name': 'Scott'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Alex', 'last_name': 'Brown'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Cameron', 'last_name': 'Wilson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0025', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0031', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0008', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0011', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0003', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0001', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0002', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0039', 'asset_type': 'laptop'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0025', 'memo_id': 'memo_0001', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0031', 'memo_id': 'memo_0002', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0008', 'memo_id': 'memo_0003', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0011', 'memo_id': 'memo_0004', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='unused_licenses_4',
        instruction='You are an AI agent reclaiming unused software licenses. Cross-check license_assignments with employees for terminated or users on leave. Remove those assignments, update license_inventory to add seat availability, and generate individual pdf reports of the changes for each user.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'terminated'}),
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0033'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0007']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0033']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0004', 'lic_slack_ent', 'lic_github_ent', 'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0019', 'lic_slack_ent',  'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0032', 'lic_salesforce', 'lic_slack_ent', 'lic_m365_e3']}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='onboarding_5',
        instruction="HR sent out memos about two new people starting soon, Jordan Garcia and Avery Lee. You will need to assign them the default licenses from rbac_group_map for their respective jobs to start working if they don't have them already. They will also need to be assigned GitHub Enterprise licenses. If they don't already have employee accounts and mailboxes, they will need those as well. Log these changes to lifecycle_queue. Let me know if you need to create employee accounts and mailboxes.",
        actions=[
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0002'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0001'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0002'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0001'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Content Strategist'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'HRBP'}),
            Action(name='get_license_info', kwargs={'license_name': 'GitHub Enterprise'}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0002', 'license_ids': ['lic_github_ent']}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0001', 'license_ids': ['lic_github_ent']}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='license_allocation_5',
        instruction='You are an AI agent that automates software license allocation. Using license_inventory and employees, identify users with upcoming software renewals, indicated by the last audit being over 20 days old. Confirm that the licenses identified are being actively used and update license_inventory with the new audit. Generate a CSV of underutilized licenses (utilization_rate < 40%). Open low priorityJira tickets for "Manage license utilization for license_id" for each underutilized license.',
        actions=[
            Action(name='license_requires_renewal', kwargs={'num_days': 20}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e3', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e5', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_adobe_cc', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_github_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_slack_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_salesforce', 'status': 'active'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e3'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e5'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_adobe_cc'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_slack_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_salesforce'}),
            Action(name='filter_licenses', kwargs={'utilization': 0.4}),
            Action(name='export_underutilized_licenses', kwargs={'output_data': ['lic_m365_e5', 'lic_adobe_cc', 'lic_github_ent', 'lic_salesforce']}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_m365_e5', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_adobe_cc', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_github_ent', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_salesforce', 'priority': 'P3'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='employee_offboarding_5',
        instruction='You are an AI agent designed to automate employee offboarding. Find employees marked "offboarding" using hr_memos and employees. Perform the necessary offboarding procedures, including disabling their accounts, revoke licenses, archiving mailboxes, and wiping assigned devices in it_assets. Create a log of these completed tasks in lifecycle_queue, and let management know that each employee was offboarded.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'offboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Parker', 'last_name': 'Davis'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Remy', 'last_name': 'White'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0007', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0007', 'department': 'IT'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0019', 'department': 'Operations'}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0007', 'unassign': True}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0019', 'unassign': True}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0007', 'memo_id': 'memo_0009', 'event': 'offboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0019', 'memo_id': 'memo_0012', 'event': 'offboarding'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Parker Davis was offboarded.'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Remy White was offboarded.'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='compliance_check_5',
        instruction='You are an AI agent designed to perform annual compliance checks. Using license_assignments, rbac_group_map, and employees, compare assigned roles in the Marketing department with rbac_group_map default licenses. Flag anomalies, specifically employees missing default licenses. Generate a review packet PDF and record the run in validation_issues.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0002', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0012', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0016', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0018', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0021', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0024', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0025', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0027', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0031', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0032', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0034', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0041', 'job_title': 'Content Strategist'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'emp_0002 is missing no licenses,emp_0012 is missing no licenses, emp_0016 is missing no licenses, emp_0018 is missing no licenses, emp_0021 is missing no licenses, emp_0024 is missing no licenses, emp_0025 is missing no licenses, emp_0027 is missing no licenses, emp_0031 is missing no licenses, emp_0032 is missing no licenses, emp_0034 is missing no licenses, emp_0041 is missing no licenses'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='track_backlog_5',
        instruction='You are an AI agent designed to track project backlog. Using the backlog_snapshot_open database, create a report highlighting tickets not marked "Resolved". Save the report containing these findings. File Jira tickets for any unresolved urgent tickets with a summary as "Address ticket_id".',
        actions=[
            Action(name='get_tickets_backlog', kwargs={}),
            Action(name='filter_tickets', kwargs={'ids': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
                ],
                'not_status': 'Resolved'}),
            Action(name='save_report', kwargs={'save_data': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
            ],
            }),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5002', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5009', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5011', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5017', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5024', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5029', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5036', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5048', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5049', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5050', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5058', 'priority': 'P1'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='tool_assignment_5',
        instruction='You are an AI agent provisioning accounts for a new marketing tool. Assign all employees in the Marketing department app_facebook accounts. These accounts should be standard for these jobs, so the rbac_group_map will need to be updated with this new account. Create a report with the provisioning summary.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0002', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0012', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0016', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0018', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0021', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0024', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0025', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0027', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0031', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0032', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0034', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0041', 'app_id': 'app_facebook'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_facebook', 'job_title': 'Content Strategist'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_facebook', 'job_title': 'Design Lead'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_facebook', 'job_title': 'Growth Marketer'}),
            Action(name='report_run', kwargs={'report_type': 'provisioning', 'run_data':[
                'Added app_facebook account for emp_0002',
                'Added app_facebook account for emp_0012',
                'Added app_facebook account for emp_0016',
                'Added app_facebook account for emp_0018',
                'Added app_facebook account for emp_0021',
                'Added app_facebook account for emp_0024',
                'Added app_facebook account for emp_0025',
                'Added app_facebook account for emp_0027',
                'Added app_facebook account for emp_0031',
                'Added app_facebook account for emp_0032',
                'Added app_facebook account for emp_0034',
                'Added app_facebook account for emp_0041',
            ]})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='sync_lifecycle_5',
        instruction='You are an AI agent synchronizing user lifecycles. From employees, detect anyone marked "on_leave." Do these things for Cameron Wilson as well. Update their statuses to be disabled in the directory_accounts database, revoke licenses in the license_assignments and license_inventory databases, and let management know that the lifecycles were synchronized.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Cameron', 'last_name': 'Wilson'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0004', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0032', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0011', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0011'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'The lifecycles were synchronized.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='service_stats_5',
        instruction='You are an AI agent evaluating daily service stats. Using tickets, calculate the average time it takes to complete a ticket, the average opened, and the average closed tickets per day. Notify Avery Lee, Taylor Patel, and Casey Smith with your findings. Generate a pdf report of your findings and log it to validation_issues.',
        actions=[
            Action(name='ticket_statistics', kwargs={'field': 'avg_open_age_hours', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_opened', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_closed', 'type': 'avg'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Casey', 'last_name': 'Smith'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0003', 'emp_0005'],
                'summary': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='asset_reservations_5',
        instruction='You are an AI agent for asset reservations. When new hires appear in hr_memos, assign them an available laptop from it_assets. Mark those laptops as "assigned" and write a completed record into lifecycle_queue.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'onboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Finley', 'last_name': 'Robinson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'River', 'last_name': 'Scott'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Alex', 'last_name': 'Brown'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Cameron', 'last_name': 'Wilson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0025', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0031', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0008', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0011', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0003', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0001', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0002', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0039', 'asset_type': 'laptop'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0025', 'memo_id': 'memo_0001', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0031', 'memo_id': 'memo_0002', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0008', 'memo_id': 'memo_0003', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0011', 'memo_id': 'memo_0004', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='unused_licenses_5',
        instruction='You are an AI agent reclaiming unused software licenses. Cross-check license_assignments with employees for terminated or users on leave. Remove those assignments, update license_inventory to add available seats, and generate unique pdf reports of the changes for each user.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'terminated'}),
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0033'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0007']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0033']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0004', 'lic_slack_ent', 'lic_github_ent', 'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0019', 'lic_slack_ent',  'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0032', 'lic_salesforce', 'lic_slack_ent', 'lic_m365_e3']}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='onboarding_6',
        instruction="HR sent out memos about two new people starting soon, Taylor Patel and Avery Lee. You will need to assign them the default licenses from rbac_group_map for their respective jobs to start working if they don't have them already. They will also need to be assigned GitHub Enterprise licenses. If they don't already have employee accounts and mailboxes, they will need those as well. Log these changes to lifecycle_queue. Let me know if you need to create employee accounts and mailboxes.",
        actions=[
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0003'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0001'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0003'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0001'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Ops Coordinator'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'HRBP'}),
            Action(name='get_license_info', kwargs={'license_name': 'GitHub Enterprise'}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0003', 'license_ids': ['lic_github_ent']}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0001', 'license_ids': ['lic_github_ent']}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='license_allocation_6',
        instruction='You are an AI agent that automates software license allocation. Using license_inventory and employees, identify users with upcoming software renewals, indicated by the last audit being over 20 days old. Confirm that the licenses identified are being actively used and update license_inventory with the new audit. Generate a CSV of underutilized licenses (utilization_rate < 50%). Open low priorityJira tickets for "Manage license utilization for license_id" for each underutilized license.',
        actions=[
            Action(name='license_requires_renewal', kwargs={'num_days': 20}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e3', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e5', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_adobe_cc', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_github_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_slack_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_salesforce', 'status': 'active'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e3'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e5'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_adobe_cc'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_slack_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_salesforce'}),
            Action(name='filter_licenses', kwargs={'utilization': 0.5}),
            Action(name='export_underutilized_licenses', kwargs={'output_data': ['lic_m365_e5', 'lic_adobe_cc', 'lic_github_ent', 'lic_slack_ent', 'lic_salesforce']}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_m365_e5', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_adobe_cc', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_github_ent', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_slack_ent', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_salesforce', 'priority': 'P3'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='employee_offboarding_6',
        instruction='You are an AI agent designed to automate employee offboarding. Find employees marked "offboarding" using the hr_memos and employees databases. Perform any necessary offboarding procedures, including disabling their accounts, revoke licenses, archiving mailboxes, and wiping assigned devices in it_assets. Create a log of these completed tasks in lifecycle_queue, and let management know that each employee was offboarded.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'offboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Parker', 'last_name': 'Davis'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Remy', 'last_name': 'White'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0007', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0007', 'department': 'IT'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0019', 'department': 'Operations'}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0007', 'unassign': True}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0019', 'unassign': True}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0007', 'memo_id': 'memo_0009', 'event': 'offboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0019', 'memo_id': 'memo_0012', 'event': 'offboarding'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Parker Davis was offboarded.'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Remy White was offboarded.'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='compliance_check_6',
        instruction='You are an AI agent designed to perform quarterly compliance checks. Using license_assignments, rbac_group_map, and employees, compare assigned roles in the Marketing department with rbac_group_map default licenses. Flag any employees missing default licenses. Generate a review packet as a PDF and record the run in validation_issues.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0002', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0012', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0016', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0018', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0021', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0024', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0025', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0027', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0031', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0032', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0034', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0041', 'job_title': 'Content Strategist'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'emp_0002 is missing no licenses,emp_0012 is missing no licenses, emp_0016 is missing no licenses, emp_0018 is missing no licenses, emp_0021 is missing no licenses, emp_0024 is missing no licenses, emp_0025 is missing no licenses, emp_0027 is missing no licenses, emp_0031 is missing no licenses, emp_0032 is missing no licenses, emp_0034 is missing no licenses, emp_0041 is missing no licenses'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='track_backlog_6',
        instruction='You are an AI agent tracking project backlog. Using the backlog_snapshot_open database, create a report highlighting tickets that are not "Resolved". Save the report containing these findings. File Jira tickets for any unresolved urgent tickets with a summary as "Address ticket_id".',
        actions=[
            Action(name='get_tickets_backlog', kwargs={}),
            Action(name='filter_tickets', kwargs={'ids': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
                ],
                'not_status': 'Resolved'}),
            Action(name='save_report', kwargs={'save_data': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
            ],
            }),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5002', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5009', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5011', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5017', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5024', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5029', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5036', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5048', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5049', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5050', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5058', 'priority': 'P1'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='tool_assignment_6',
        instruction='You are an AI agent provisioning accounts for a new marketing tool. Assign all employees in the Marketing department app_tiktok accounts. These accounts should be standard for these jobs, so the rbac_group_map will need to be updated with this new account. Create a report summarizing the app provisioning.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0002', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0012', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0016', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0018', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0021', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0024', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0025', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0027', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0031', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0032', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0034', 'app_id': 'app_tiktok'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0041', 'app_id': 'app_tiktok'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_tiktok', 'job_title': 'Content Strategist'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_tiktok', 'job_title': 'Design Lead'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_tiktok', 'job_title': 'Growth Marketer'}),
            Action(name='report_run', kwargs={'report_type': 'provisioning', 'run_data':[
                'Added app_tiktok account for emp_0002',
                'Added app_tiktok account for emp_0012',
                'Added app_tiktok account for emp_0016',
                'Added app_tiktok account for emp_0018',
                'Added app_tiktok account for emp_0021',
                'Added app_tiktok account for emp_0024',
                'Added app_tiktok account for emp_0025',
                'Added app_tiktok account for emp_0027',
                'Added app_tiktok account for emp_0031',
                'Added app_tiktok account for emp_0032',
                'Added app_tiktok account for emp_0034',
                'Added app_tiktok account for emp_0041',
            ]})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='sync_lifecycle_6',
        instruction='You are an AI agent synchronizing user lifecycles. From employees, detect anyone marked "on_leave." Do these things for Reese Anderson as well. Update their statuses to be disabled in the directory_accounts database, revoke licenses in the license_assignments and license_inventory databases, and let management know that the lifecycles were synchronized.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Reese', 'last_name': 'Anderson'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0004', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0032', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0012', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0012'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'The lifecycles were synchronized.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='service_stats_6',
        instruction='You are an AI agent evaluating daily service stats. Using tickets, calculate the average time it takes to complete a ticket, the average opened, and the average closed tickets per day. Notify Avery Lee, Morgan Nguyen, and Casey Smith with your findings. Generate a pdf report of your findings and log it to validation_issues.',
        actions=[
            Action(name='ticket_statistics', kwargs={'field': 'avg_open_age_hours', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_opened', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_closed', 'type': 'avg'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Morgan', 'last_name': 'Nguyen'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Casey', 'last_name': 'Smith'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0004', 'emp_0005'],
                'summary': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='asset_reservations_6',
        instruction='You are an AI agent designed to manage asset reservations. For employees with onboarding memos in hr_memos, assign them an available laptop from it_assets. Mark those assets as "assigned" and write a completed record into lifecycle_queue.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'onboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Finley', 'last_name': 'Robinson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'River', 'last_name': 'Scott'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Alex', 'last_name': 'Brown'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Cameron', 'last_name': 'Wilson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0025', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0031', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0008', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0011', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0003', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0001', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0002', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0039', 'asset_type': 'laptop'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0025', 'memo_id': 'memo_0001', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0031', 'memo_id': 'memo_0002', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0008', 'memo_id': 'memo_0003', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0011', 'memo_id': 'memo_0004', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='unused_licenses_6',
        instruction='You are an AI agent designed to reclaim unused software licenses. Referencing license_assignments and employees, check for terminated or users on leave. Remove those assignments, update license_inventory to add available seats, and generate individual pdf reports of the changes for each user.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'terminated'}),
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0033'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0007']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0033']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0004', 'lic_slack_ent', 'lic_github_ent', 'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0019', 'lic_slack_ent',  'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0032', 'lic_salesforce', 'lic_slack_ent', 'lic_m365_e3']}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='onboarding_7',
        instruction="HR sent out memos about three new people starting soon, Jordan Garcia, Taylor Patel, and Avery Lee. You will need to assign them the default licenses from rbac_group_map for their respective jobs to start working if they don't have them already. They will also need to be assigned GitHub Enterprise licenses. If they don't already have employee accounts and mailboxes, they will need those as well. Log these changes to lifecycle_queue. Let me know if you need to create employee accounts and mailboxes.",
        actions=[
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0002'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0003'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0001'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0002'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0003'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0001'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Content Strategist'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Ops Coordinator'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'HRBP'}),
            Action(name='get_license_info', kwargs={'license_name': 'GitHub Enterprise'}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0002', 'license_ids': ['lic_github_ent']}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0003', 'license_ids': ['lic_github_ent']}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0001', 'license_ids': ['lic_github_ent']}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='license_allocation_7',
        instruction='You are an AI agent that automates software license allocation. Using license_inventory and employees, identify users with upcoming software renewals, indicated by the last audit being over 10 days old. Confirm that the licenses identified are being actively used and update license_inventory with the new audit. Generate a CSV of underutilized licenses (utilization_rate < 30%). Open low priorityJira tickets for "Manage license utilization for license_id" for each underutilized license.',
        actions=[
            Action(name='license_requires_renewal', kwargs={'num_days': 10}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e3', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e5', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_adobe_cc', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_github_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_slack_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_salesforce', 'status': 'active'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e3'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e5'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_adobe_cc'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_slack_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_salesforce'}),
            Action(name='filter_licenses', kwargs={'utilization': 0.3}),
            Action(name='export_underutilized_licenses', kwargs={'output_data': ['lic_m365_e5', 'lic_adobe_cc', 'lic_github_ent', 'lic_salesforce']}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_m365_e5', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_adobe_cc', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_github_ent', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_salesforce', 'priority': 'P3'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='employee_offboarding_7',
        instruction='You are an AI agent designed to automate employee offboarding. Find all employees marked "offboarding" using the hr_memos and employees databases. Perform the necessary offboarding procedures, including disabling their accounts, revoke licenses, archiving mailboxes, and wiping assigned devices in it_assets. Create a log of these completed tasks in lifecycle_queue, and let management know that each employee was offboarded.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'offboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Parker', 'last_name': 'Davis'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Remy', 'last_name': 'White'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0007', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0007', 'department': 'IT'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0019', 'department': 'Operations'}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0007', 'unassign': True}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0019', 'unassign': True}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0007', 'memo_id': 'memo_0009', 'event': 'offboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0019', 'memo_id': 'memo_0012', 'event': 'offboarding'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Parker Davis was offboarded.'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Remy White was offboarded.'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='compliance_check_7',
        instruction='You are an AI agent designed to perform quarterly compliance checks. Using license_assignments, rbac_group_map, and employees, compare assigned roles in the Marketing department with rbac_group_map default licenses. Flag anomalies, specifically employees missing default licenses. Generate a review packet PDF and record the run in validation_issues.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0002', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0012', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0016', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0018', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0021', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0024', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0025', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0027', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0031', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0032', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0034', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0041', 'job_title': 'Content Strategist'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'emp_0002 is missing no licenses,emp_0012 is missing no licenses, emp_0016 is missing no licenses, emp_0018 is missing no licenses, emp_0021 is missing no licenses, emp_0024 is missing no licenses, emp_0025 is missing no licenses, emp_0027 is missing no licenses, emp_0031 is missing no licenses, emp_0032 is missing no licenses, emp_0034 is missing no licenses, emp_0041 is missing no licenses'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='track_backlog_7',
        instruction='You are an AI agent tracking project backlog. Referencing the backlog_snapshot_open database, create a report highlighting tickets that are not "Resolved". Save a report containing these findings. File Jira tickets for any unresolved urgent tickets with a summary as "Address ticket_id".',
        actions=[
            Action(name='get_tickets_backlog', kwargs={}),
            Action(name='filter_tickets', kwargs={'ids': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
                ],
                'not_status': 'Resolved'}),
            Action(name='save_report', kwargs={'save_data': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
            ],
            }),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5002', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5009', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5011', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5017', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5024', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5029', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5036', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5048', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5049', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5050', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5058', 'priority': 'P1'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='tool_assignment_7',
        instruction='You are an AI agent provisioning accounts for a new marketing tool. Assign all employees in the Marketing department app_instagram accounts. These accounts should be standard for these jobs, so the rbac_group_map will need to be updated with this new account. Create a report summarizing the app provisioning.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0002', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0012', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0016', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0018', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0021', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0024', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0025', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0027', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0031', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0032', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0034', 'app_id': 'app_instagram'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0041', 'app_id': 'app_instagram'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_instagram', 'job_title': 'Content Strategist'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_instagram', 'job_title': 'Design Lead'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_instagram', 'job_title': 'Growth Marketer'}),
            Action(name='report_run', kwargs={'report_type': 'provisioning', 'run_data':[
                'Added app_instagram account for emp_0002',
                'Added app_instagram account for emp_0012',
                'Added app_instagram account for emp_0016',
                'Added app_instagram account for emp_0018',
                'Added app_instagram account for emp_0021',
                'Added app_instagram account for emp_0024',
                'Added app_instagram account for emp_0025',
                'Added app_instagram account for emp_0027',
                'Added app_instagram account for emp_0031',
                'Added app_instagram account for emp_0032',
                'Added app_instagram account for emp_0034',
                'Added app_instagram account for emp_0041',
            ]})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='sync_lifecycle_7',
        instruction='You are an AI agent synchronizing user lifecycles. From employees, detect anyone marked "on_leave." Do these things for Emerson Thomas as well. Update their statuses to be disabled in the directory_accounts database, revoke licenses in the license_assignments and license_inventory databases, and let management know that the lifecycles were synchronized.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Emerson', 'last_name': 'Thomas'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0004', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0032', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0013', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0013'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'The lifecycles were synchronized.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='service_stats_7',
        instruction='You are an AI agent evaluating daily service stats. Using tickets, calculate the average time it takes to complete a ticket, the average opened, and the average closed tickets per day. Notify Jordan Garcia, Taylor Patel, and Morgan Nguyen with your findings. Generate a pdf report of your findings and log it to validation_issues.',
        actions=[
            Action(name='ticket_statistics', kwargs={'field': 'avg_open_age_hours', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_opened', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_closed', 'type': 'avg'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Morgan', 'last_name': 'Nguyen'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0002', 'emp_0003', 'emp_0004'],
                'summary': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='asset_reservations_7',
        instruction='You are an AI agent designed to manage asset reservations. When new hires appear in hr_memos, assign them an unused laptop from it_assets. Mark those assets as "assigned" and write a completed record into lifecycle_queue.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'onboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Finley', 'last_name': 'Robinson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'River', 'last_name': 'Scott'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Alex', 'last_name': 'Brown'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Cameron', 'last_name': 'Wilson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0025', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0031', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0008', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0011', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0003', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0001', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0002', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0039', 'asset_type': 'laptop'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0025', 'memo_id': 'memo_0001', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0031', 'memo_id': 'memo_0002', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0008', 'memo_id': 'memo_0003', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0011', 'memo_id': 'memo_0004', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='unused_licenses_7',
        instruction='You are an AI agent designed to reclaim unused software licenses. Cross-check license_assignments with employees for terminated or users on leave. Remove those assignments, update license_inventory to add seat availability, and generate individual pdf reports of the changes for each user.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'terminated'}),
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0033'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0007']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0033']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0004', 'lic_slack_ent', 'lic_github_ent', 'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0019', 'lic_slack_ent',  'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0032', 'lic_salesforce', 'lic_slack_ent', 'lic_m365_e3']}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='onboarding_8',
        instruction="HR sent out memos about three new people starting soon, Drew Nelson, Jordan Garcia, and Taylor Patel. You will need to assign them the default licenses from rbac_group_map for their respective jobs to start working if they don't have them already. They will also need to be assigned GitHub Enterprise licenses. If they don't already have employee accounts and mailboxes, they will need those as well. Log these changes to lifecycle_queue. Let me know if you need to create employee accounts and mailboxes.",
                actions=[
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0039'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0002'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0003'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0039'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0002'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0003'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Support Manager'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Content Strategist'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Ops Coordinator'}),
            Action(name='get_license_info', kwargs={'license_name': 'GitHub Enterprise'}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0039', 'license_ids': ['lic_github_ent']}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0002', 'license_ids': ['lic_github_ent']}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0003', 'license_ids': ['lic_github_ent']}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='license_allocation_8',
        instruction='You are an AI agent that automates software license allocation. Using license_inventory and employees, identify users with upcoming software renewals, indicated by the last audit being over 10 days old. Confirm that the licenses identified are being actively used and update license_inventory with the new audit. Generate a CSV of underutilized licenses (utilization_rate < 40%). Open low priorityJira tickets for "Manage license utilization for license_id" for each underutilized license.',
        actions=[
            Action(name='license_requires_renewal', kwargs={'num_days': 10}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e3', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e5', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_adobe_cc', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_github_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_slack_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_salesforce', 'status': 'active'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e3'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e5'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_adobe_cc'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_slack_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_salesforce'}),
            Action(name='filter_licenses', kwargs={'utilization': 0.4}),
            Action(name='export_underutilized_licenses', kwargs={'output_data': ['lic_m365_e5', 'lic_adobe_cc', 'lic_github_ent', 'lic_salesforce']}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_m365_e5', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_adobe_cc', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_github_ent', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_salesforce', 'priority': 'P3'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='employee_offboarding_8',
        instruction='You are an AI agent designed to help with employee offboarding. Find the employees marked "offboarding" using hr_memos and employees. Perform the necessary offboarding procedures, including disabling their accounts, revoke licenses, archiving mailboxes, and wiping assigned devices in it_assets. Create a log of these completed tasks in lifecycle_queue, and let management know that each employee was offboarded.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'offboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Parker', 'last_name': 'Davis'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Remy', 'last_name': 'White'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0007', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0007', 'department': 'IT'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0019', 'department': 'Operations'}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0007', 'unassign': True}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0019', 'unassign': True}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0007', 'memo_id': 'memo_0009', 'event': 'offboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0019', 'memo_id': 'memo_0012', 'event': 'offboarding'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Parker Davis was offboarded.'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Remy White was offboarded.'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='compliance_check_8',
        instruction='You are an AI agent performing quarterly compliance checks. Using license_assignments, rbac_group_map, and employees, compare assigned roles in the Marketing department with rbac_group_map default licenses. Flag any employees missing default licenses. Generate a review packet PDF and record the run in validation_issues.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0002', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0012', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0016', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0018', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0021', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0024', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0025', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0027', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0031', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0032', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0034', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0041', 'job_title': 'Content Strategist'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'emp_0002 is missing no licenses,emp_0012 is missing no licenses, emp_0016 is missing no licenses, emp_0018 is missing no licenses, emp_0021 is missing no licenses, emp_0024 is missing no licenses, emp_0025 is missing no licenses, emp_0027 is missing no licenses, emp_0031 is missing no licenses, emp_0032 is missing no licenses, emp_0034 is missing no licenses, emp_0041 is missing no licenses'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='track_backlog_8',
        instruction='You are an AI agent designed to track project backlog. Using the backlog_snapshot_open database, create a report highlighting tickets that are not "Resolved". Save the report containing these findings. File Jira tickets for any unresolved urgent tickets with a summary as "Address ticket_id".',
        actions=[
            Action(name='get_tickets_backlog', kwargs={}),
            Action(name='filter_tickets', kwargs={'ids': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
                ],
                'not_status': 'Resolved'}),
            Action(name='save_report', kwargs={'save_data': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
            ],
            }),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5002', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5009', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5011', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5017', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5024', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5029', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5036', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5048', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5049', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5050', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5058', 'priority': 'P1'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='tool_assignment_8',
        instruction='You are an AI agent provisioning accounts for a new marketing tool. Assign all employees in the Marketing department app_reddit accounts. These accounts should be standard for these jobs, so the rbac_group_map will need to be updated with this new account. Create a report summarizing the app provisioning.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0002', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0012', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0016', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0018', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0021', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0024', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0025', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0027', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0031', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0032', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0034', 'app_id': 'app_reddit'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0041', 'app_id': 'app_reddit'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_reddit', 'job_title': 'Content Strategist'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_reddit', 'job_title': 'Design Lead'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_reddit', 'job_title': 'Growth Marketer'}),
            Action(name='report_run', kwargs={'report_type': 'provisioning', 'run_data':[
                'Added app_reddit account for emp_0002',
                'Added app_reddit account for emp_0012',
                'Added app_reddit account for emp_0016',
                'Added app_reddit account for emp_0018',
                'Added app_reddit account for emp_0021',
                'Added app_reddit account for emp_0024',
                'Added app_reddit account for emp_0025',
                'Added app_reddit account for emp_0027',
                'Added app_reddit account for emp_0031',
                'Added app_reddit account for emp_0032',
                'Added app_reddit account for emp_0034',
                'Added app_reddit account for emp_0041',
            ]})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='sync_lifecycle_8',
        instruction='You are an AI agent synchronizing user lifecycles. From employees, detect anyone marked "on_leave." Do these things for Peyton Taylor as well. Update their statuses to be disabled in the directory_accounts database, revoke licenses in the license_assignments and license_inventory databases, and let management know that the lifecycles were synchronized.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Peyton', 'last_name': 'Taylor'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0004', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0032', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0014', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0014'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'The lifecycles were synchronized.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='service_stats_8',
        instruction='You are an AI agent evaluating daily service stats. Using tickets, calculate the average time it takes to complete a ticket, the average opened, and the average closed tickets per day. Notify Jordan Garcia, Taylor Patel, and Casey Smith with your findings. Generate a pdf report of your findings and log it to validation_issues.',
        actions=[
            Action(name='ticket_statistics', kwargs={'field': 'avg_open_age_hours', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_opened', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_closed', 'type': 'avg'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Casey', 'last_name': 'Smith'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0002', 'emp_0003', 'emp_0005'],
                'summary': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='asset_reservations_8',
        instruction='You are an AI agent designed to manage asset reservations. When new hires appear in hr_memos, assign them an available laptop from it_assets. Mark those laptops as "assigned" and write a completed record into lifecycle_queue.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'onboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Finley', 'last_name': 'Robinson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'River', 'last_name': 'Scott'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Alex', 'last_name': 'Brown'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Cameron', 'last_name': 'Wilson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0025', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0031', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0008', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0011', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0003', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0001', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0002', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0039', 'asset_type': 'laptop'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0025', 'memo_id': 'memo_0001', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0031', 'memo_id': 'memo_0002', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0008', 'memo_id': 'memo_0003', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0011', 'memo_id': 'memo_0004', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='unused_licenses_8',
        instruction='You are an AI agent designed to reclaim unused software licenses. Cross-check license_assignments with employees for terminated or users on leave. Remove those assignments, update license_inventory to add available seats, and generate unique pdf reports of the changes for each user.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'terminated'}),
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0033'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0007']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0033']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0004', 'lic_slack_ent', 'lic_github_ent', 'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0019', 'lic_slack_ent',  'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0032', 'lic_salesforce', 'lic_slack_ent', 'lic_m365_e3']}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='onboarding_9',
        instruction="HR sent out memos about three new people starting soon, Drew Nelson, Jordan Garcia, and Avery Lee. You will need to assign them the default licenses from rbac_group_map for their respective jobs to start working if they don't have them already. They will also need to be assigned GitHub Enterprise licenses. If they don't already have employee accounts and mailboxes, they will need those as well. Log these changes to lifecycle_queue. Let me know if you need to create employee accounts and mailboxes.",
                actions=[
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0039'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0002'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0001'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0039'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0002'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0001'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Support Manager'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Content Strategist'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'HRBP'}),
            Action(name='get_license_info', kwargs={'license_name': 'GitHub Enterprise'}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0039', 'license_ids': ['lic_github_ent']}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0002', 'license_ids': ['lic_github_ent']}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0001', 'license_ids': ['lic_github_ent']}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='license_allocation_9',
        instruction='You are an AI agent that automates software license allocation. Using license_inventory and employees, identify users with upcoming software renewals, indicated by the last audit being over 10 days old. Confirm that the licenses identified are being actively used and update license_inventory with the new audit. Generate a CSV of underutilized licenses (utilization_rate < 50%). Open low priorityJira tickets for "Manage license utilization for license_id" for each underutilized license.',
        actions=[
            Action(name='license_requires_renewal', kwargs={'num_days': 10}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e3', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e5', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_adobe_cc', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_github_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_slack_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_salesforce', 'status': 'active'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e3'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e5'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_adobe_cc'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_slack_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_salesforce'}),
            Action(name='filter_licenses', kwargs={'utilization': 0.5}),
            Action(name='export_underutilized_licenses', kwargs={'output_data': ['lic_m365_e5', 'lic_adobe_cc', 'lic_github_ent', 'lic_slack_ent', 'lic_salesforce']}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_m365_e5', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_adobe_cc', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_github_ent', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_slack_ent', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_salesforce', 'priority': 'P3'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='employee_offboarding_9',
        instruction='You are an AI agent designed to help with employee offboarding. Find the employees marked "offboarding" using hr_memos and employees. Perform the standard offboarding procedures, including disabling their accounts, revoke licenses, archiving mailboxes, and wiping assigned devices in it_assets. Create a log of these completed tasks in lifecycle_queue, and let management know that each employee was offboarded.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'offboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Parker', 'last_name': 'Davis'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Remy', 'last_name': 'White'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0007', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0007', 'department': 'IT'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0019', 'department': 'Operations'}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0007', 'unassign': True}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0019', 'unassign': True}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0007', 'memo_id': 'memo_0009', 'event': 'offboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0019', 'memo_id': 'memo_0012', 'event': 'offboarding'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Parker Davis was offboarded.'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Remy White was offboarded.'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='compliance_check_9',
        instruction='You are an AI agent designed to perform quarterly compliance checks. Using license_assignments, rbac_group_map, and employees, compare assigned roles in the Marketing department with rbac_group_map default licenses. Flag any employees missing default licenses. Generate a review packet PDF and record the run in validation_issues.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0002', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0012', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0016', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0018', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0021', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0024', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0025', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0027', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0031', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0032', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0034', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0041', 'job_title': 'Content Strategist'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'emp_0002 is missing no licenses,emp_0012 is missing no licenses, emp_0016 is missing no licenses, emp_0018 is missing no licenses, emp_0021 is missing no licenses, emp_0024 is missing no licenses, emp_0025 is missing no licenses, emp_0027 is missing no licenses, emp_0031 is missing no licenses, emp_0032 is missing no licenses, emp_0034 is missing no licenses, emp_0041 is missing no licenses'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='track_backlog_9',
        instruction='You are an AI agent tracking project backlog. Using the backlog_snapshot_open database, create a report highlighting tickets that are not "Resolved". Save a report containing these findings. File Jira tickets for any unresolved urgent tickets with a summary as "Address ticket_id".',
        actions=[
            Action(name='get_tickets_backlog', kwargs={}),
            Action(name='filter_tickets', kwargs={'ids': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
                ],
                'not_status': 'Resolved'}),
            Action(name='save_report', kwargs={'save_data': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
            ],
            }),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5002', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5009', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5011', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5017', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5024', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5029', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5036', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5048', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5049', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5050', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5058', 'priority': 'P1'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='tool_assignment_9',
        instruction='You are an AI agent provisioning accounts for a new marketing tool. Assign all employees in the Marketing department app_twitter accounts. These accounts should be standard for these jobs, so the rbac_group_map will need to be updated with this new account. Create a report summarizing the app provisioning.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0002', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0012', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0016', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0018', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0021', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0024', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0025', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0027', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0031', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0032', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0034', 'app_id': 'app_twitter'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0041', 'app_id': 'app_twitter'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_twitter', 'job_title': 'Content Strategist'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_twitter', 'job_title': 'Design Lead'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_twitter', 'job_title': 'Growth Marketer'}),
            Action(name='report_run', kwargs={'report_type': 'provisioning', 'run_data':[
                'Added app_twitter account for emp_0002',
                'Added app_twitter account for emp_0012',
                'Added app_twitter account for emp_0016',
                'Added app_twitter account for emp_0018',
                'Added app_twitter account for emp_0021',
                'Added app_twitter account for emp_0024',
                'Added app_twitter account for emp_0025',
                'Added app_twitter account for emp_0027',
                'Added app_twitter account for emp_0031',
                'Added app_twitter account for emp_0032',
                'Added app_twitter account for emp_0034',
                'Added app_twitter account for emp_0041',
            ]})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='sync_lifecycle_9',
        instruction='You are an AI agent synchronizing user lifecycles. From employees, detect anyone marked "on_leave." Do these things for Hayden Moore as well. Update their statuses to be disabled in the directory_accounts database, revoke licenses in the license_assignments and license_inventory databases, and let management know that the lifecycles were synchronized.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Hayden', 'last_name': 'Moore'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0004', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0032', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0015', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0015'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'The lifecycles were synchronized.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='service_stats_9',
        instruction='You are an AI agent evaluating daily service stats. Using tickets, calculate the average time it takes to complete a ticket, the average opened, and the average closed tickets per day. Notify Jordan Garcia, Morgan Nguyen, and Casey Smith with your findings. Generate a pdf report of your findings and log it to validation_issues.',
        actions=[
            Action(name='ticket_statistics', kwargs={'field': 'avg_open_age_hours', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_opened', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_closed', 'type': 'avg'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Morgan', 'last_name': 'Nguyen'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Casey', 'last_name': 'Smith'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0002', 'emp_0004', 'emp_0005'],
                'summary': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='asset_reservations_9',
        instruction='You are an AI agent for asset reservations. For employees with onboarding memos in hr_memos, assign them an unused laptop from it_assets. Mark those assets as "assigned" and write a completed record into lifecycle_queue.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'onboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Finley', 'last_name': 'Robinson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'River', 'last_name': 'Scott'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Alex', 'last_name': 'Brown'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Cameron', 'last_name': 'Wilson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0025', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0031', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0008', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0011', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0003', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0001', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0002', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0039', 'asset_type': 'laptop'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0025', 'memo_id': 'memo_0001', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0031', 'memo_id': 'memo_0002', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0008', 'memo_id': 'memo_0003', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0011', 'memo_id': 'memo_0004', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='unused_licenses_9',
        instruction='You are an AI agent reclaiming unused software licenses. Referencing license_assignments and employees, check for terminated or users on leave. Remove those assignments, update license_inventory to add seat availability, and generate individual pdf reports of the changes for each user.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'terminated'}),
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0033'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0007']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0033']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0004', 'lic_slack_ent', 'lic_github_ent', 'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0019', 'lic_slack_ent',  'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0032', 'lic_salesforce', 'lic_slack_ent', 'lic_m365_e3']}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='onboarding_10',
        instruction="HR sent out memos about three new people starting soon, Drew Nelson, Avery Lee, and Taylor Patel. You will need to assign them the default licenses from rbac_group_map for their respective jobs to start working if they don't have them already. They will also need to be assigned GitHub Enterprise licenses. If they don't already have employee accounts and mailboxes, they will need those as well. Log these changes to lifecycle_queue. Let me know if you need to create employee accounts and mailboxes.",
        actions=[
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='employee_account_exists', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0039'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0001'}),
            Action(name='mailbox_exists', kwargs={'employee_id': 'emp_0003'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0039'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0001'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0003'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='filter_hr_memos', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Support Manager'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'HRBP'}),
            Action(name='get_job_licenses', kwargs={'job_title': 'Ops Coordinator'}),
            Action(name='get_license_info', kwargs={'license_name': 'GitHub Enterprise'}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0039', 'license_ids': ['lic_github_ent']}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0001', 'license_ids': ['lic_github_ent']}),
            Action(name='get_license_availability', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='assign_licenses', kwargs={'employee_id': 'emp_0003', 'license_ids': ['lic_github_ent']}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='license_allocation_10',
        instruction='You are an AI agent that automates software license allocation. Using license_inventory and employees, identify users with upcoming software renewals, indicated by the last audit being over 15 days old. Confirm that the licenses identified are being actively used and update license_inventory with the new audit. Generate a CSV of underutilized licenses (utilization_rate < 30%). Open low priorityJira tickets for "Manage license utilization for license_id" for each underutilized license.',
        actions=[
            Action(name='license_requires_renewal', kwargs={'num_days': 15}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e3', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_m365_e5', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_adobe_cc', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_github_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_slack_ent', 'status': 'active'}),
            Action(name='get_employee_by_license', kwargs={'license_id': 'lic_salesforce', 'status': 'active'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e3'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_m365_e5'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_adobe_cc'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_github_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_slack_ent'}),
            Action(name='update_license_audit', kwargs={'license_id': 'lic_salesforce'}),
            Action(name='filter_licenses', kwargs={'utilization': 0.3}),
            Action(name='export_underutilized_licenses', kwargs={'output_data': ['lic_m365_e5', 'lic_adobe_cc', 'lic_github_ent', 'lic_salesforce']}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_m365_e5', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_adobe_cc', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_github_ent', 'priority': 'P3'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'License Allocation', 'summary': 'Manage license utilization for lic_salesforce', 'priority': 'P3'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='employee_offboarding_10',
        instruction='You are an AI agent designed to help with employee offboarding. Find the employees marked "offboarding" using the employees and hr_memos databases. Perform the offboarding procedures, including disabling their accounts, revoke licenses, archiving mailboxes, and wiping assigned devices in it_assets. Create a log of these completed tasks in lifecycle_queue, and let management know that each employee was offboarded.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'offboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Parker', 'last_name': 'Davis'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Remy', 'last_name': 'White'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0007', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0007', 'department': 'IT'}),
            Action(name='archive_mailbox', kwargs={'employee_id': 'emp_0019', 'department': 'Operations'}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0007', 'unassign': True}),
            Action(name='device_assignment', kwargs={'employee_id': 'emp_0019', 'unassign': True}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0007', 'memo_id': 'memo_0009', 'event': 'offboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0019', 'memo_id': 'memo_0012', 'event': 'offboarding'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Parker Davis was offboarded.'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'Remy White was offboarded.'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='compliance_check_10',
        instruction='You are an AI agent designed to perform annual compliance checks. Using license_assignments, rbac_group_map, and employees, compare assigned roles in the Marketing department with rbac_group_map default licenses. Flag any employees missing default licenses. Generate a review packet PDF and record the run in validation_issues.',
        actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0002', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0012', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0016', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0018', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0021', 'job_title': 'Design Lead'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0024', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0025', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0027', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0031', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0032', 'job_title': 'Growth Marketer'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0034', 'job_title': 'Content Strategist'}),
            Action(name='missing_licenses', kwargs={'employee_id': 'emp_0041', 'job_title': 'Content Strategist'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'emp_0002 is missing no licenses,emp_0012 is missing no licenses, emp_0016 is missing no licenses, emp_0018 is missing no licenses, emp_0021 is missing no licenses, emp_0024 is missing no licenses, emp_0025 is missing no licenses, emp_0027 is missing no licenses, emp_0031 is missing no licenses, emp_0032 is missing no licenses, emp_0034 is missing no licenses, emp_0041 is missing no licenses'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='track_backlog_10',
        instruction='You are an AI agent designed to track project backlog. Using the backlog_snapshot_open database, create a report highlighting tickets that are not "Resolved". Save a report containing these findings. File Jira tickets for any unresolved urgent tickets with a summary as "Address ticket_id".',
        actions=[
            Action(name='get_tickets_backlog', kwargs={}),
            Action(name='filter_tickets', kwargs={'ids': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
                ],
                'not_status': 'Resolved'}),
            Action(name='save_report', kwargs={'save_data': [
                "T5002",
                "T5003",
                "T5004",
                "T5005",
                "T5006",
                "T5009",
                "T5010",
                "T5011",
                "T5012",
                "T5013",
                "T5014",
                "T5016",
                "T5017",
                "T5020",
                "T5021",
                "T5023",
                "T5024",
                "T5025",
                "T5026",
                "T5027",
                "T5028",
                "T5029",
                "T5030",
                "T5031",
                "T5032",
                "T5035",
                "T5036",
                "T5037",
                "T5039",
                "T5042",
                "T5043",
                "T5044",
                "T5046",
                "T5048",
                "T5049",
                "T5050",
                "T5051",
                "T5053",
                "T5054",
                "T5055",
                "T5056",
                "T5058",
                "T5059",
                "T5060",
                "T5061",
                "T5063"
            ],
            }),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5002', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5009', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5011', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5017', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5024', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5029', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5036', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5048', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5049', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5050', 'priority': 'P1'}),
            Action(name='create_jira_ticket', kwargs={'issue_type': 'IT Ticket', 'summary': 'Address T5058', 'priority': 'P1'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='tool_assignment_10',
        instruction='You are an AI agent provisioning accounts for a new marketing tool. Assign all employees in the Marketing department app_facebook accounts. These accounts should be standard for these jobs, so the rbac_group_map will need to be updated with this new account. Create a report summarizing the app provisioning.',
       actions=[
            Action(name='filter_employees', kwargs={'department': 'Marketing'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0002', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0012', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0016', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0018', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0021', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0024', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0025', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0027', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0031', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0032', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0034', 'app_id': 'app_facebook'}),
            Action(name='assign_app_account', kwargs={'employee_id': 'emp_0041', 'app_id': 'app_facebook'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_facebook', 'job_title': 'Content Strategist'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_facebook', 'job_title': 'Design Lead'}),
            Action(name='assign_rbac_license', kwargs={'license_id': 'app_facebook', 'job_title': 'Growth Marketer'}),
            Action(name='report_run', kwargs={'report_type': 'provisioning', 'run_data':[
                'Added app_facebook account for emp_0002',
                'Added app_facebook account for emp_0012',
                'Added app_facebook account for emp_0016',
                'Added app_facebook account for emp_0018',
                'Added app_facebook account for emp_0021',
                'Added app_facebook account for emp_0024',
                'Added app_facebook account for emp_0025',
                'Added app_facebook account for emp_0027',
                'Added app_facebook account for emp_0031',
                'Added app_facebook account for emp_0032',
                'Added app_facebook account for emp_0034',
                'Added app_facebook account for emp_0041',
            ]})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='sync_lifecycle_10',
        instruction='You are an AI agent synchronizing user lifecycles. From employees, detect anyone marked "on_leave." Do these things for Dakota Jackson as well. Update their statuses to be disabled in the directory_accounts database, revoke licenses in the license_assignments and license_inventory databases, and let management know that the lifecycles were synchronized.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Dakota', 'last_name': 'Jackson'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0004', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0019', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0032', 'status': 'disabled'}),
            Action(name='update_directory_account', kwargs={'employee_id': 'emp_0016', 'status': 'disabled'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0016'}),
            Action(name='filter_employees', kwargs={'manager_id': "None"}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0001', 'emp_0002', 'emp_0003', 'emp_0004', 'emp_0005', 'emp_0006', 'emp_0009', 'emp_0017'], 'summary': 'The lifecycles were synchronized.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='service_stats_10',
        instruction='You are an AI agent evaluating daily service stats. Using tickets, calculate the average time it takes to complete a ticket, the average opened, and the average closed tickets per day. Notify Taylor Patel, Morgan Nguyen, and Casey Smith with your findings. Generate a pdf report of your findings and log it to validation_issues.',
        actions=[
            Action(name='ticket_statistics', kwargs={'field': 'avg_open_age_hours', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_opened', 'type': 'avg'}),
            Action(name='ticket_statistics', kwargs={'field': 'tickets_closed', 'type': 'avg'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Morgan', 'last_name': 'Nguyen'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Casey', 'last_name': 'Smith'}),
            Action(name='notify', kwargs={'recipient_ids': ['emp_0003', 'emp_0004', 'emp_0005'],
                'summary': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'}),
            Action(name='generate_review_and_log', kwargs={'log_data': 'The average of avg_open_age_hours is 36.2. The average of tickets_opened is 1.6667. The average of tickets_closed is 1.2.'})
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='asset_reservations_10',
        instruction='You are an AI agent for asset reservations. For employees with onboarding memos in hr_memos, assign them an available laptop from it_assets. Mark those laptops as "assigned" and write a completed record into lifecycle_queue.',
        actions=[
            Action(name='filter_hr_memos', kwargs={'type': 'onboarding'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Finley', 'last_name': 'Robinson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'River', 'last_name': 'Scott'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Alex', 'last_name': 'Brown'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Cameron', 'last_name': 'Wilson'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Taylor', 'last_name': 'Patel'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Avery', 'last_name': 'Lee'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Jordan', 'last_name': 'Garcia'}),
            Action(name='get_employee_id', kwargs={'first_name': 'Drew', 'last_name': 'Nelson'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0025', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0031', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0008', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0011', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0003', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0001', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0002', 'asset_type': 'laptop'}),
            Action(name='assign_device', kwargs={'employee_id': 'emp_0039', 'asset_type': 'laptop'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0025', 'memo_id': 'memo_0001', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0031', 'memo_id': 'memo_0002', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0008', 'memo_id': 'memo_0003', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0011', 'memo_id': 'memo_0004', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0003', 'memo_id': 'memo_0005', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0001', 'memo_id': 'memo_0006', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0002', 'memo_id': 'memo_0007', 'event': 'onboarding'}),
            Action(name='log_lifecycle', kwargs={'employee_id': 'emp_0039', 'memo_id': 'memo_0008', 'event': 'onboarding'}),
        ],
        outputs=[

        ]
    ),

    Task(
        annotator='0',
        user_id='unused_licenses_10',
        instruction='You are an AI agent reclaiming unused software licenses. Referencing license_assignments and employees, check for terminated or users on leave. Remove those assignments, update license_inventory to add available seats, and generate unique pdf reports of the changes for each user.',
        actions=[
            Action(name='filter_employees', kwargs={'status': 'terminated'}),
            Action(name='filter_employees', kwargs={'status': 'on_leave'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0007'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0033'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='get_employee_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0004'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0019'}),
            Action(name='unassign_licenses', kwargs={'employee_id': 'emp_0032'}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0007']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0033']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0004', 'lic_slack_ent', 'lic_github_ent', 'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0019', 'lic_slack_ent',  'lic_m365_e3']}),
            Action(name='report_run', kwargs={'report_type': 'unassign_licenses', 'run_data': ['emp_0032', 'lic_salesforce', 'lic_slack_ent', 'lic_m365_e3']}),
        ],
        outputs=[

        ]
    ),
]
