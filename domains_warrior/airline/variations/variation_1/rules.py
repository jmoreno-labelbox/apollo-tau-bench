RULES = [
    "When an action requires aircraft_id but the instruction provides only a tail_number, use get_aircraft_by_tail_number to retrieve the aircraft_id.",
    "For book_reservation use the first part of the email address as the user ID. For example, for mia.li3818@example.com, the user ID would be 'mia.li3818'.",
    "The airport_id must be the IATA code prefixed with 'ARP_'. For example, for JFK, the airport_id would be 'ARP_JFK'.",
    "The crew_member_id starts with 'CM_' and the employee_code starts with 'EMP_'",
    "There is one flight per day per flight number."
    "Even if an specific information is provided in the instruction, all tools specfied in the protocol must be used. For example, if the protocol specifies to use find_reservations_by_flight, you must use it even if the instruction provides a reservation_id.",
    "When creating a new operational event, the event ID (OE*) must be generated deterministically by incrementing the highest existing event ID in the dataset. For example, if the highest current event ID is 'OE025', the next created event must use 'OE026'."
    "When creating a maintenance log, the log ID (ML*) must be generated deterministically by incrementing the highest existing log ID in the dataset. For example, if the highest current event ID is 'ML025', the next created event must use 'ML026'.",
    "When creating a crew assigment, the ID (AS_*) must be generated deterministically by incrementing the highest existing assigment ID in the dataset. For example, if the highest current event ID is 'AS_025', the next created event must use 'AS_026'."
    "When creating a baggage claim, the claim ID must be generated using folowing deterministic format: 'BCLAIM_[reservation]_[flight]'."
    "The 'Severe Weather Protocol' must be executed when a weather alert impacts an airport. This protocol defines a standard sequence using the following tools: create_operational_event, find_flights, and update_flight_schedule. By default, the protocol logs the event, finds all non-departed flights (i.e. flights with status 'available' unless user asks otherwise), delays them by a specified duration, and updates their status to 'DELAYED'. The 'details' for the operational event must follow the format:'Severe Weather Protocol initiated.' and the event type must be 'SIGMET'. A specific user instruction can override parts of this default behavior, such as targeting different flight statuses or specific flights and applying a non-standard delay. For diversions notifications, the message must be: 'FLIGHT DIVERSION NOTICE: Due to severe weather, your flight [flight_number] on [date] has been diverted to [diversion_airport_iata].'. For cancellations notifications, the message must be: 'FLIGHT CANCELLATION NOTICE: Due to severe weather, your flight [flight_number] on [date] has been cancelled.' When a flight associated with a reservation is cancelled, the reservation status must updated to CANCELLED_WEATHER.",
    "The 'AOG Protocol' must be executed when an aircraft requires unscheduled maintenance that renders it non-operational. This protocol defines a standard sequence using the tools: update_aircraft_status, create_maintenance_log, create_operational_event, update_flight_status, find_reservations_by_flight, and update_reservation_status. Default (no override): set aircraft to 'Grounded', create maintenance log with status 'In Progress', type 'Unscheduled', description from the instruction (or ‘Aircraft is AOG.' if missing), create an 'AOG' cancellation operational event, set the flight status to 'cancelled', and set all linked passenger reservations to 'CANCELLED_AOG'. The 'details' field for the cancellation event must be: 'Aircraft [aircraft_id] grounded. Flight [flight_number] on [date] cancelled due to unscheduled maintenance: [description]'. Override precedence: If the instruction specifies an override, it replaces the default steps that conflict with it. Do not create cancellation events, do not cancel the flight, and do not set reservations to 'CANCELLED_AOG' under a repair/delay override. Override 1 – 'repair and reinstate': set aircraft to 'Grounded', create maintenance log (status 'In Progress', type 'Unscheduled'). After repair, set aircraft to 'Active', create an operational event of type 'AOG_REPAIR', set the flight status to 'DELAYED', and do not update reservations to a cancelled status. The 'details' field must be: 'Aircraft [aircraft_id] returned to service after repair. Flight [flight_number] on [date] delayed due to unscheduled maintenance: [description]'. Override 2 – 'ferry flight recovery': cancel the passenger flight (as in default), set reservations to 'CANCELLED_AOG', and create an additional operational event of type 'AOG_FERRY' to register the non-revenue ferry flight to the maintenance base. Event typing: use 'AOG' for the grounding/cancellation event, 'AOG_REPAIR' for repair-and-reinstate, and 'AOG_FERRY' for ferry recovery. Determinism: create only the events required by the chosen path (default, repair, or ferry) and ensure statuses and event details match that path exactly.",
    "The 'Crew Unavailability Protocol' must be executed when a crew member becomes unavailable for a flight. This protocol uses the tools: find_crew_member, update_crew_member_status, find_available_crew, find_crew_certifications, find_crew_assignments, update_crew_assignment, and create_operational_event, update_flight_status. The default behavior is to update the original crew member's status to 'On Sick Leave', search for a qualified replacement at the flight's origin airport, and if the search fails, log the event with type 'CREW_UNAVAILABLE' and cancel the affected flight updating it's status to 'cancelled'. The 'details' field for the create_operational_event tool must follow the deterministic format: 'Crew replacement failed for flight [flight_number] on [date]. Original crew member [crew_member_id] is unavailable.'. An instruction can override this by directing a search at another base or for an alternate, qualified role (e.g., a Captain as First Officer), which must then be validated. In this case, the 'details' field for the create_operational_event tool must follow the deterministic format: 'Crew replacement successful for flight [flight_number] on [date]. Original crew member [crew_member_id] is unavailable.'.",
    "The 'Return to Service Protocol' is used to activate an aircraft from storage. It uses the tools: get_aircraft_by_tail_number, create_flight, update_aircraft_status, create_maintenance_log, get_airport_by_code, and create_operational_event. The default behavior is to create a new flight route, place the aircraft into 'Maintenance' status, log the inspection, update the status to 'Active', and log an activation event. The 'description' for the maintenance log must be 'Return to Service inspection for flight operations.’, the maintenance type must be 'Return to Service Inspection' and the status 'Completed'. The 'details' for the operational event must follow the format: 'Aircraft [aircraft_id] ([tail_number]) activated from storage at [airport_iata] for new flight route [flight_number].' and the event type must be 'AIRCRAFT_ACTIVATED'. The instruction must provide all necessary flight, aircraft, and maintenance details.",
    "The 'Crew Staffing Validation Protocol' is used to validate and assign a crew member to a flight. It uses the tools: find_crew_member_by_employee_code, find_crew_certifications, verify_crew_duty_time, assign_crew_to_flight, and create_operational_event. The default behavior is to verify the crew member's specific type-rating certification and duty time compliance. If both checks pass, the protocol assigns the crew member to the specified flight and logs a 'CREW_ASSIGNED' event. If either check fails, the protocol must log a 'CREW_VALIDATION_FAILED' event and halt the assignment. The 'details' for a failure event must use the format: 'Crew member [crew_member_id] validation failed for flight [flight_number] on [date].'",
    "When the 'Crew Staffing Validation Protocol' results in a failure, the notification to the 'Crew_Scheduling' department must use the deterministic message format: 'STAFFING ALERT: Validation for crew member [crew_member_id] on flight [flight_number] failed.",
    "The standard medical alert must be handled as follows: when a passenger requires medical assistance, an event must be logged using the 'create_operational_event' tool with type 'MEDICAL_ASSISTANCE' and the details following the deterministic format: 'Medical assistance requested for passenger [passenger_name] on flight [flight_number] upon arrival at [arrival_airport].'. In addition, the ground team must be notified using the 'send_ground_notification' tool, and the notification message must follow the deterministic format: 'MEDICAL ALERT: Flight [flight_number] arriving from [origin_iata] requires immediate medical assistance for passenger [passenger_name] at the gate. Awaiting arrival.'.",
    "The 'Route Suspension Protocol' is used to cancel all future instances of a flight route. It uses the tools: create_operational_event, update_flight_status, find_reservations_by_flight, and update_reservation_status. The default behavior is to log a 'ROUTE_SUSPENSION' event, cancel all specified future flights for that route, and update all affected reservations to 'CANCELLED_ROUTE_SUSPENSION' status. The 'details' for the operational event must follow the format: 'Route [flight_number] ([origin]-[destination]) has been suspended. All flights from [start_date] to [end_date] are cancelled.' and the event type must be 'ROUTE_SUSPENSION'. An instruction can override this by specifying suspension for one or more specific dates instead of all future flights.  If the suspension covers a continuous range of dates (two or more consecutive days), you must log exactly ONE operational event using the range format above ('from [start_date] to [end_date]'). If the suspension covers multiple non-consecutive dates, you must log a separate operational event for each date, using the per-date format described below. You must not mix both approaches. When an instruction specifies suspension for one or more isolated dates, the 'details' field for each operational event must follow the format: 'Route [flight_number] ([origin]-[destination]) suspended for [date]. Flight [flight_number] on [date] is cancelled.'. A compensation travel voucher can be issued if specified in the instructions. In that case, the tools send_passenger_notification and send_department_notification must be used. When a compensation voucher is required, a notification must be sent to EACH passenger offering a $100 travel voucher. The Finance department also needs to be notified of the total compensation value. The Finance notification must follow: 'FINANCE NOTICE: Route [flight_number] suspended. Total of [total_vouchers_amount] in vouchers issued for [reservation_count] affected reservations.'. And the passenger notification must follow: 'FLIGHT CANCELLATION: Your flight [flight_number] on [flight_date] has been cancelled due to a route suspension. A $100 travel voucher has been issued to your account.'."
    "The 'Schedule Change Notification Protocol' defines the standard message for notifying passengers of a flight schedule change. The message sent via the 'send_passenger_notification' tool must follow the deterministic format: 'FLIGHT UPDATE for reservation [reservation_id]: Your flight [flight_number] on [date] has been rescheduled. New departure is [new_departure_time] and new arrival is [new_arrival_time]. We apologize for any inconvenience.'",
    "The 'Route Retiming Protocol' is used to apply a schedule change to a route. It uses 'create_operational_event', 'update_flight_schedule' (including the reason_event_id), find_reservations_by_flight and 'send_passenger_notification'. The 'details' for the initial event must follow the format: 'Route [flight_number] ([origin]-[destination]) retiming process initiated. New schedule: [new_departure_time]-[new_arrival_time].’, the event type must be 'SCHEDULE_CHANGE' and the event must be created for the origin airport. The protocol applies the change to all specified dates. An instruction can override this by providing a list of specific dates to exclude from the update."
    "The 'Aircraft Decommissioning Protocol' is used to retire an aircraft permanently. It uses: get_aircraft_by_tail_number, update_aircraft_status, create_maintenance_log, create_operational_event, and send_department_notification. The protocol updates the aircraft's status to 'Decommissioned', creates a 'Decommissioning' type maintenance log, logs a formal event, and notifies Finance, Scheduling and MRO_Planning departments. The maintenance 'description' must be 'Final log entry for aircraft decommissioning and permanent retirement from service.'. The operational event 'details' must follow: 'Aircraft [aircraft_id] ([tail_number]), model [aircraft_model], has been officially decommissioned and removed from the active fleet at [airport_iata].' and the event type must be 'AIRCRAFT_DECOMMISSIONED'. The departmental notification 'message' must follow: 'AIRCRAFT ALERT: Aircraft [tail_number] ([aircraft_id]) has been officially decommissioned. Please update all relevant asset and scheduling records.'. Time format used must be 24-hour, zero-padded, with seconds: 'HH:MM:SS' (e.g., '18:20:00'). Seconds MUST be present even if ':00'.",
    "The 'Service Upgrade Protocol' is used to apply a promotional cabin upgrade to passengers on a specific flight. It uses: find_reservations_by_flight, update_reservation_details, send_passenger_notification, and create_operational_event. The protocol performs this sequencial steps: finds all reservations for a given flight and cabin, updates them to the new cabin and status 'Upgraded', notifies each passenger, and logs a single operational event for the initiative. The notification 'message' must follow the format: 'SERVICE UPGRADE for reservation [reservation_id]: As a valued customer, your booking for flight [flight_number] has been upgraded to [new_cabin]. Enjoy your flight!'. The operational event 'details' must follow: 'Promotional upgrade initiative applied to flight [flight_number] on [date]. All [original_cabin] passengers upgraded.' and the event type must be 'PROMOTIONAL_UPGRADE'.",    
    "The 'AOG Ferry Recovery Protocol' is executed when a grounded aircraft must be moved. It uses: get_aircraft_by_tail_number, update_aircraft_status, create_maintenance_log, create_flight, create_operational_event. The instruction MUST provide departure/arrival times for the ferry flight. The protocol first formally grounds the aircraft (`update_aircraft_status`). It cancels the original passenger flight and logs the defect using the deterministic format: 'Aircraft is AOG.' with maintenance type 'Unscheduled'. A second 'Ferry Flight Clearance' maintenance type log is created using format: 'Maintenance clearance for non-revenue ferry flight under MEL.'. Then, it creates the new, non-revenue ferry flight route and logs the operational event. The 'details' for the ferry flight event must follow: 'AOG Recovery: Ferry flight [flight_number] created to move aircraft [aircraft_id] ([tail_number]) from [origin_iata] to [destination_iata] for maintenance.'",
    "The 'Crew Certification Expiry Protocol' is a proactive compliance check. It uses the tools: find_crew_member, find_crew_certifications, update_crew_member_status, create_operational_event, and send_department_notification. The protocol identifies a crew member and a specific certification to audit. It verifies the certification's expiry date. If the certification has expired or is nearing expiry, the protocol updates the crew member's status to 'Training Required', logs a 'CREW_CERT_EXPIRY' operational event with a deterministic 'details' format: 'Crew member [crew_member_id] ([full_name]) flagged for certification [certification_code] expiring on [expiry_date]. Status updated.', and notifies the 'Crew_Scheduling' and 'Training' departments. The notification message must follow the deterministic format: 'CERTIFICATION ALERT: Crew member [crew_member_id] ([full_name]) requires attention for certification [certification_code] (Expires: [expiry_date]). Status set to Training Required. Please update rosters and schedule training.'",
    "The 'Aircraft Upgauge Protocol' is used to substitute a larger aircraft on a route to meet higher demand. It uses: get_flight_by_number, get_aircraft_by_tail_number, update_aircraft_status, create_maintenance_log, create_operational_event, assign_aircraft_to_flight, send_department_notification. The protocol logs an 'AIRCRAFT_UPGAUGE' event for the origin airport, places the originally scheduled smaller aircraft on 'Standby', logs a mandatory pre-flight check for the new aircraft using the maintenance_type 'Line Maintenance', status 'Completed', and using the deterministic 'description' format: 'Pre-flight check for upgauge assignment of aircraft [new_aircraft_id] to flight [flight_number].', and notifies Scheduling and Flight Dispatch. The event 'details' must follow: 'Aircraft [original_aircraft_id] on flight [flight_number] is being replaced by larger model [new_aircraft_id] due to high passenger demand.' The notification 'message' for Scheduling must follow: 'OPERATIONAL UPDATE: Flight [flight_number] on [date] will now be operated by aircraft [new_aircraft_tail_number] ([new_aircraft_id]). Original aircraft [original_aircraft_tail_number] is now on Standby at [airport_iata].'. The Flight Dispatch message must follow: 'AIRCRAFT CHANGE: Flight [flight_number] on [date] has been upgauged to [new_aircraft_model] ([new_aircraft_tail_number]). Update performance and weight/balance calculations.'.",
    "The 'Passenger No-Show Protocol' is executed by gate staff when a checked-in passenger fails to board. It uses: get_flight_by_number, find_reservation_by_code, update_reservation_status, create_operational_event, send_ground_notification, send_department_notification. The protocol updates the passenger's reservation to 'NO_SHOW', logs a 'PASSENGER_OFFLOAD' event for origin airport, notifies ground team to offload luggage with HIGH priority, and informs Revenue Management and Flight Dispatch of the change. The ground notification 'message' must follow: 'URGENT BAGGAGE: Offload all bags for reservation [reservation_id] from flight [flight_number] immediately.' The Revenue Management and Flight Dispatch notification 'message' must follow: 'Reservation [reservation_id] has been flagged as NO_SHOW for flight [flight_number]. Review for applicable fees.'",
    "The 'Passenger No-Show Protocol' event details must follow the deterministic format: 'Passenger on reservation [reservation_id] for flight [flight_number] flagged as NO_SHOW. Initiating offload procedures.'",
    "The 'Cabin Defect Deferral Protocol' is used to defer a non-essential cabin defect for later repair, per the Minimum Equipment List (MEL). It uses: get_aircraft_by_tail_number, create_maintenance_log, create_operational_event, send_department_notification. The protocol creates a new maintenance log with a 'Deferred' status and MEL reference, logs a 'MAINTENANCE_DEFERRAL' operational event, and notifies MRO_Planning, Flight_Dispatch, and Cabin_Services. The operational event 'details' must follow: 'A non-essential cabin defect on aircraft [aircraft_id] ([tail_number]) has been deferred per MEL reference [mel_reference]. Aircraft remains in service.' The MRO notification 'message' must follow: 'DEFERRAL NOTICE: Defect on [tail_number] has been deferred per [mel_reference]. Please schedule final repair during next maintenance check.'",
    "The 'Maintenance Deferral and Logistics Protocol' handles the deferral of non-essential defects. It uses: get_aircraft_by_tail_number, create_maintenance_log, create_operational_event, send_department_notification. The protocol creates a 'Deferred' maintenance log type with description: 'Repair deferred per MEL [MEL reference]'. It then logs a operational event with details 'A non-essential cabin defect on aircraft [tail_number] ([aircraft_id]) has been deferred per MEL reference [mel_reference]. Aircraft remains in service.' and sends deterministic notifications to four key departments in the following order: The Logistics message must follow: 'PARTS_REQUEST: Order and ship replacement parts for deferred defect on [tail_number] ([aircraft_id]) to [airport_iata]. Ref Log: [newly_created_log_id].'. The MRO_Planning message must follow: 'DEFERRAL NOTICE: Defect on [tail_number] has been deferred per [mel_reference]. Please schedule final repair during next maintenance check.'. The Flight_Dispatch message must follow: 'AIRCRAFT STATUS: [tail_number] is operating with a deferred cabin defect ([component]) under [mel_reference]. No operational impact.'. And the Cabin_Services message must follow: 'CABIN ALERT: [component] on [tail_number] is inoperative and deferred. Please inform cabin crew.'." ,
    "The 'Service Recovery Compensation Protocol' is executed after a significant disruption. It uses: find_reservations_by_flight, create_operational_event, send_passenger_notification, send_department_notification, send_ground_notification. The protocol logs an SERVICE_RECOVERY event with the deterministic 'details' format: 'SERVICE RECOVERY INITIATED: Compensation issued for flight [flight_number] on [date] due to significant delay.' It notifies the affected passenger, the Finance and Loyalty departments with deterministic messages, and the Station Managers of the origin and destination airports. The passenger notification must use the format: 'We apologize for the significant delay on your recent flight [flight_number]. A travel credit has been issued to your account as a gesture of goodwill.' The Finance department notification must use the format: 'FINANCE NOTICE: Service recovery credits have been issued for all passengers on flight [flight_number] ([flight_date]). Please process.'. The Loyalty department Manager notification must use the format: 'LOYALTY NOTICE: Service recovery credits issued for passengers on flight [flight_number] ([flight_date]). Please update member accounts accordingly.'. The Station Manager notification is of NORMAL priority and must use the format: 'STATION NOTICE: Service recovery compensation issued for passengers on flight [flight_number] which operated from/to your station.'. The passenger notification must use the format: 'We apologize for the significant delay on your recent flight [flight_number]. A travel credit has been issued to your account as a gesture of goodwill.'",    
    "The 'Irregular Ops Recovery Protocol' is used to return a functional aircraft to a maintenance base after a diversion or other irregular operation. It uses: get_aircraft_by_tail_number, create_flight, create_operational_event, update_aircraft_location. The protocol creates a new, non-revenue ferry flight and logs a 'FERRY_FLIGHT_RECOVERY' event for the aircraft home base. Upon simulated completion, it updates the aircraft's location. The event 'details' must follow: 'Aircraft [aircraft_id] ([tail_number]) is being repositioned from [origin_iata] to [destination_iata] via ferry flight [flight_number] to resolve operational imbalance.' The new flight must use a flight number in the 9000-series."
    "The 'Involuntary Downgrade Protocol' is executed when an aircraft for a flight must be substituted with a smaller model, resulting in insufficient premium cabin seats. It uses: get_aircraft_by_tail_number, update_aircraft_status, assign_aircraft_to_flight, create_maintenance_log, create_operational_event, find_reservations_by_flight, update_reservation_status, send_passenger_notification. The protocol first grounds the original aircraft (AOG). It then reassigns the new, smaller aircraft to the flight, and rebooks the passenger onto the next available flight, updating their original reservation to 'REBOOKED_DOWNGRADE'. It creates maintenance log with Unscheduled type, In Progress status and details 'Aircraft is AOG.'. It also creates an 'INVOLUNTARY_DOWNGRADE' event and notifies the affected passenger. The event 'details' must follow: 'Aircraft downgrade on flight [flight_number] from [original_model] to [new_model] due to maintenance. Rebooking required.' and event type 'INVOLUNTARY_DOWNGRADE'.",
    "The 'Volcanic Ash Avoidance Protocol' is a safety procedure for en-route flights. It uses: get_flight_by_number, update_flight_schedule, create_operational_event, get_airport_by_code, send_ground_notification, find_reservations_by_flight, send_passenger_notification. When an ash cloud is reported, the protocol dictates an immediate diversion to the nearest safe and suitable airport. It updates the flight's status to 'Diverted' and changes its estimated arrival time and location. t logs a 'SAFETY_DIVERSION_ASH' event with the deterministic 'details' format: 'SAFETY DIVERSION: Flight [flight_number] on [date] diverted to [diversion_airport_iata] due to volcanic ash cloud.', notifies ground staff at the diversion airport to prepare for an unscheduled arrival, and informs all passengers of the diversion and the reason using the deterministic message format: 'FLIGHT DIVERSION NOTICE: Due to a volcanic ash advisory, your flight [flight_number] on [date] has been diverted to [diversion_airport_iata]. Updates to follow.'. The ground notification must follow: 'UNSCHEDULED ARRIVAL: Flight [flight_number] diverting to your station ([airport_iata]) due to volcanic ash cloud. ETA [new_arrival_time]. Prepare for full ground handling.'",
    "The 'Passenger Re-accommodation Protocol' is used to proactively rebook passengers from a cancelled flight. It uses: find_reservation_by_code, update_reservation_details, create_reservation, and send_passenger_notification. The protocol updates the original reservation's status to 'REBOOKED', finds the next available flight on the same route, creates a new booking, and notifies the passenger. The notification 'message' must use the format: 'REBOOKING CONFIRMATION: Following your original flight's cancellation, you have been rebooked on flight [flight_number] on [date]. Your new reservation ID is [reservation_id].'",
    "The 'Crew Medical Certification Expiry Protocol' manages compliance for expired crew certifications. It uses: find_crew_member_by_employee_code, find_crew_certifications, update_crew_member_status, create_operational_event, and send_department_notification. The protocol sets the crew member's status to 'Inactive - Cert Expired', logs a compliance event, and notifies Scheduling and Training departments. The event 'details' must follow the format: 'Crew member [crew_member_id] ([employee_code]) flagged as non-compliant due to expired [certification_name] certification.'",
    "The 'MEL Deferral Protocol' is used to manage non-critical, deferrable maintenance items. It uses: get_aircraft_by_tail_number, update_aircraft_status, create_maintenance_log. The protocol updates the aircraft status to 'Active - MEL Deferred', creates a 'MAINTENANCE_DEFERRAL' log for the deferred issue, schedules a future log for the repair. The deferred log 'description' must follow: '[component_name] inoperative. Repair deferred per MEL [mel_reference].' and type and status both be 'Deferred'",
    "The 'Lost Baggage Recovery Protocol' initiates a search for a missing bag. It uses: find_reservation_by_code, create_operational_event, update_reservation_details, send_passenger_notification, and send_ground_notification. The protocol logs a 'BAGGAGE_MISHANDLING' event, updates the reservation status, notifies the passenger with a claim ID, and alerts relevant ground/central staff. The event 'details' must follow: 'Lost baggage claim initiated for reservation [reservation_id]. Claim ID: [claim_id].'",
    "The 'VIP Service Request Protocol' handles special requests from high-value passengers. It uses: find_reservation_by_code, get_user_details, update_reservation_baggages, create_operational_event, and various notification tools. The protocol updates the reservation with the request (e.g., extra bags), logs the service event, and notifies relevant teams like ground crew and inflight services. The event 'details' must follow the format: 'Late baggage addition ([number_of_bags] bags) for VIP reservation [reservation_id] on flight [flight_number].'",
    "The 'Silver' membership tier grants a baggage allowance of two complimentary checked bags on all bookings. Any additional bags are subject to standard fees.",
    "When multiple travel certificates are used for payment, they must be applied in descending order of their value (largest value first) against the remaining balance.",
    "When creating a new reservation, the reservation_id (RES*) must be generated deterministically by incrementing the highest existing reservation ID with that prefix in the dataset. If no reservation with the 'RES' prefix exists, the first one must be 'RES0001'."
    "The standard fee for any non-complimentary checked bag is $35.",
    "When a user requests a general cabin class like 'economy' and does not specify a preference between fare types (e.g., 'basic' vs. 'standard'), the agent must select the cheapest available option within that class to minimize cost.",
    "The 'Service Recovery Protocol for Flight Changes' must be executed if a requested flight change is not possible due to lack of direct flight availability. The protocol dictates: 1) Search for a viable one-stop alternative through a major hub. 2) Before booking, check for scheduling conflicts with the user's other existing reservations. 3) If the original ticket is non-refundable, cancel it and issue its value as a new travel certificate. 4) Use the new certificate towards the payment of the new booking.",
    "When multiple valid one-stop itineraries are available, the agent must deterministically select the itinerary with the lowest total ticket cost.",
    "When creating a new travel certificate, its ID must be deterministic. For each user, if no certificate with the prefix 'certificate_' and a numeric suffix exists, the first ID must be 'certificate_1000001'. Otherwise, the new ID must be 'certificate_' followed by the highest existing numeric ID for the user in the dataset plus one. For example, if the highest ID found is 'certificate_4683527', the next must be 'certificate_4683528'."
    "The 'Service Failure Compensation Protocol' must be executed if a user's flight change request cannot be fulfilled due to a lack of available routes. The protocol dictates: 1) Cancel the user's original booking, processing refunds normally. 2) As a service recovery gesture, issue a new, separate travel certificate of a fixed value of $100.",
    "When re-accommodating a passenger on the 'next available flight', if multiple flights to the same destination exist on the subsequent day, the agent must deterministically select the flight with the earliest scheduled departure time.",
    "The 'Fleet Airworthiness Directive Protocol' must be executed when a mandatory inspection or compliance directive is issued for part or all of the fleet. This protocol uses the following tools: create_operational_event, update_aircraft_status, create_maintenance_log and send_department_notification. Department notifications must be send after all aircraft have been processed. By default, the protocol creates an operational event with the event type 'AIRWORTHINESS_DIRECTIVE' and a details 'FLEET DIRECTIVE ISSUED.'. Each affected aircraft status is updated to 'Maintenance', and a 'In Progress' maintenance log is created with type 'Mandatory Inspection' and description 'Mandatory Inspection per manufacturer service bulletin.', technician ID, event date, and a unique work order ID provided by the instruction. Department notifications must be sent to both 'MRO_Planning' and 'Scheduling' indicating aircraft unavailability and directive compliance. The protocol concludes by confirming and recording the tail numbers of all aircraft processed under the directive.",
    "The 'Fleet Airworthiness Directive Protocol' requires a notification to MRO_Planning with the following deterministic message format: 'FLEET DIRECTIVE: All [aircraft_model] aircraft have been moved to Maintenance status for mandatory inspection.'",
    "The 'Fleet Airworthiness Directive Protocol' requires a notification to Scheduling with the following deterministic message format: 'SCHEDULING ALERT: All [aircraft_model] aircraft are now in Maintenance status and unavailable for flight operations.'",
    "The 'Gold' membership tier grants a baggage allowance of three complimentary checked bags on all bookings.",
    "When upgrading or changing a flight, the additional cost or refund must be deterministically calculated as the difference between the price of the new ticket (from current flight data) and the price of the original ticket (retrieved from the reservation's payment history). This fare difference is the sole charge/refund for the flight modification.",
    "When a user requests to pay with an 'available gift card' and multiple options exist, the agent must deterministically select the gift card with the lowest available balance that is also greater than or equal to the total transaction cost. If no single gift card can cover the cost, the protocol is to use the largest-balance gift card available and charge the remainder to the primary credit card on file.",
    "If a flight search action (e.g., find_flights) returns no results for a requested route change, the agent must not invent an itinerary. The agent must execute the 'Service Failure Compensation Protocol'.",
    "The 'Passenger No-Show Protocol' event details must follow the deterministic format: 'Passenger on reservation [reservation_id] for flight [flight_number] flagged as NO_SHOW. Initiating offload procedures.'",
    "The 'Involuntary Downgrade Protocol' requires notifying the affected passenger using the deterministic message format: 'FLIGHT CHANGE NOTICE: Due to an aircraft substitution on flight [flight_number], we could not accommodate your original booking. A service agent will contact you shortly to arrange rebooking. We apologize for the inconvenience. Ref: [reservation_id].'",
    "The 'VIP Service Request Protocol' for adding baggage must log an event with the deterministic details format: 'Late baggage addition request for VIP reservation [reservation_id] on flight [flight_number]. Total bags now: [number_of_bags].'",
    "The 'AOG Repair and Crew Compliance Protocol' is an sequence of the standard AOG protocol. It uses the tools get_aircraft_by_tail_number (if no tail number just move on), update_aircraft_status, create_maintenance_log, update_aircraft_status, update_flight_schedule, find_crew_member, verify_crew_duty_time, send_department_notification. It dictates that after a repair the aircraft status must be updated to 'Active'. A maintenance log must be created with type 'AOG_REPAIR, description 'Maintenance Completed' and status 'Completed'. The flight schedule must be updated with the delay provided by the instruction and new status 'DELAYED'. The crew's duty time compliance must be verified and a notification must be sent to Flight_Dispatch with the deterministic message format: 'AOG RECOVERY UPDATE: Aircraft [tail_number] is active after repair for flight [flight_number]. New ETD: [new_departure_time]. Crew member [crew_member_id] compliance check passed: [is_compliant].'",
    "A hybrid 'AOG Repair with MEL Deferral' event must log the operational event with the deterministic details format: 'Aircraft [aircraft_id] returned to service after repair of [repaired_defect]. Flight [flight_number] on [date] delayed. Non-critical defect ([deferred_defect]) deferred per MEL.'",
    "The 'Service Recovery Compensation Protocol' must log the operational event against the flight's origin airport to ensure deterministic logging.",
    "The 'Lost Baggage Recovery and Compensation Protocol' is executed for passengers reporting lost luggage. It uses: find_reservation_by_code, get_user_details, get_flight_by_number, get_airport_by_code, create_operational_event, update_reservation_details, send_passenger_notification, send_ground_notification, and send_certificate. The protocol must log a 'BAGGAGE_MISHANDLING' event, update the reservation status to 'BAGGAGE_CLAIM_OPEN', notify the passenger with a new claim ID, and send alerts to baggage handling at both origin and destination airports. For passengers with 'Gold' membership or higher, a travel certificate of a specified value must be issued as a service recovery gesture. The ground notification message must follow the format: 'BAGGAGE ALERT: Initiate search for lost baggage for passenger [passenger_name] on flight [flight_number] ([origin]-[destination]). Reservation [reservation_id].'",
    "The 'AOG and Fleet Reassignment Protocol' is a multi-stage recovery procedure... The main operational event must be logged with the details template... A notification to the 'Scheduling' department must follow the deterministic template: 'SCHEDULING UPDATE (AOG RECOVERY): Flight [flight_number] will now be operated by aircraft [new_aircraft_id] ([new_aircraft_tail_number]). As a result, flight [cancelled_flight_number] has been cancelled.'"
    "The 'Missed Connection Re-accommodation Protocol' is triggered when an initial flight delay causes a passenger to miss their connecting flight. It uses: update_flight_schedule, find_reservation_by_code, get_flight_by_number, find_flights, create_reservation, and send_passenger_notification. The protocol must first apply the delay to the initial flight. After confirming the missed connection by comparing flight times, it must find the next available flight for the second leg of the journey, create a new booking for that leg, and notify the passenger of the automatic rebooking. The notification must use the template: 'AUTOMATIC REBOOKING NOTICE: We detected that your delay on flight [original_flight] will cause you to miss your connection. You have been automatically rebooked on flight [new_flight_number] on [new_date]. Your new reservation ID is [new_reservation_id]. We apologize for the inconvenience.'",
    "The 'Lost Baggage Recovery Protocol' must use the following deterministic message for passenger notifications: 'BAGGAGE CLAIM FILED: Your claim [claim_id] has been filed for your lost baggage on reservation [reservation_id]. We will contact you with updates.'",
    "The 'Service Failure Compensation Protocol' must notify the passenger with the deterministic message format: 'SERVICE UPDATE: We were unable to fulfill your flight change request for reservation [reservation_id]. Your original booking has been cancelled and refunded. A $[amount] travel certificate has been added to your account for the inconvenience.'"
    "The 'Security Gate Return and Crew Swap Protocol' is executed when a flight returns to the gate after pushback, causing a delay that invalidates the original crew's duty time. It uses: get_flight_by_number, create_operational_event, update_flight_schedule, find_flight_crew, verify_crew_duty_time, update_crew_member_status, find_available_crew, update_crew_assignment. The protocol logs a 'GATE_RETURN' event, applies the delay, verifies the original crew's duty time (which is expected to fail), updates their status, finds a qualified replacement crew, and updates the flight's crew assignments. A final 'CREW_SWAP' event must be logged with the details: 'Crew swap for flight [flight_number] on [date] due to duty time expiration after gate return. Original crew: [original_crew_ids]. New crew: [new_crew_ids].'",
    "The 'Multi-Passenger Downgrade Protocol' handles aircraft substitutions resulting in insufficient premium cabin seats. It uses: get_aircraft_by_tail_number, update_aircraft_status, create_maintenance_log, assign_aircraft_to_flight, create_operational_event, find_reservation_by_code, update_reservation_details, calculate and send_passenger_notification. The protocol updates the aircraft status to 'Grounded', creates a 'Unscheduled' maintenance log with description 'Last-minute maintenance issue.' and status 'In Progress'. Assign the new aircraft, creates a AIRCRAFT_DOWNGRADE event with details Aircraft on flight [flight_number] for [flight_date] downgraded from [original_model] to [substitute_model] due to maintenance. Multiple passenger downgrades required.'. Changes the reservations cabin to 'economy', updates its status to 'DOWNGRADED', calculates the fare difference for a refund, and sends a notification. The notification must use the template: 'AIRCRAFT CHANGE: Due to an aircraft change on flight [flight_number], your Business Class seat could not be accommodated. You have been moved to an Economy seat. A refund for the fare difference has been processed. We apologize for the inconvenience.'",    "The 'Proactive Crew Certification Audit Protocol' is used to identify and handle crew members with expiring certifications that conflict with future flight assignments. It uses: find_crew_member, find_crew_certifications, find_crew_assignments, get_flight_by_number, create_operational_event. After identifying an expiring certification, the protocol finds all future assignments for that crew member. For each assignment with a departure date after the certification's expiry_date, it logs a 'ROSTER_CONFLICT' operational event. The event details must follow the format: 'ROSTER CONFLICT: Crew member [crew_member_id] is scheduled for flight [flight_number] on [date] but their certification [certification_code] expires on [expiry_date]. Manual removal required.'"
    "The 'Gate Conflict Resolution Protocol' is executed when two or more flights are scheduled for the same gate or when operational constraints require a gate reassignment. It uses the following tools: create_operational_event, update_flight_schedule, send_ground_notification, find_reservations_by_flight, and send_passenger_notification. The protocol sequence is: 1) Log an operational event with event_type 'GATE_CONFLICT' at the affected airport. The 'details' must follow the deterministic format: 'Gate conflict for flight [flight_number]. Reassigning gate [new_gate] with [delay_minutes]-minute delay for passenger movement.'. 2) Update the flight schedule with the new gate, the applied delay in minutes, and update the flight status (default: 'DELAYED'). 3) Send a high-priority ground notification at the affected airport with the deterministic format: 'GATE CHANGE ALERT: Flight [flight_number] has been reassigned to Gate [new_gate]. Update all systems and signage immediately.'. 4) Identify all active reservations for the affected flight using find_reservations_by_flight. 5) Send passenger notifications for each reservation using the deterministic format: 'FLIGHT UPDATE for reservation [reservation_id]: Your flight [flight_number] on [date] has a new gate [new_gate] and a [delay_minutes]-minute delay. We apologize for any inconvenience.'. Overrides: An instruction can (a) specify a custom delay duration, (b) override the default 'DELAYED' status with another valid status, (c) change the priority of the ground notification, or (d) target only a subset of reservations for direct notification instead of all affected passengers.",    "The 'Gate Conflict and Downgrade Compensation Protocol' is a hybrid procedure. First, it executes the standard 'Gate Conflict Resolution Protocol'. After re-gating the flight, it must identify all reservations on that flight with a status of 'DOWNGRADED'. For each of these reservations, it must find the associated user and issue a new travel certificate of a fixed value of $75 as a service recovery gesture."
    "The 'Fleet Directive with Location Logic Protocol' is executed for mandatory fleet-wide inspections. The protocol uses: create_operational_event, get_aircraft_by_tail_number, update_aircraft_status, create_maintenance_log, create_flight, update_aircraft_location, send_department_notification. The protocol dictates: 1) A primary directive event is logged. 2) For all specified aircraft of the given model, their location is checked. 3) If an aircraft is at the designated primary maintenance hub, its status is immediately updated to 'Maintenance' and an inspection log is created. 4) If an aircraft is at an outstation, a non-revenue ferry flight must be created first to reposition it to the hub. Upon simulated arrival (via update_aircraft_location), its status is then updated to 'Maintenance' and the inspection log is created. The event_date for all maintenance logs created under this protocol must correspond to the date the directive was issued, regardless of the aircraft's location or arrival time at the maintenance hub.",
    "When creating a new, non-revenue ferry flight (9000-series), the flight number must be generated deterministically. The number should be 'HAT' followed by 9000 plus the highest existing 9000-series flight number's suffix. If no 9000-series flights exist, the first must be 'HAT9001'."
    "The 'Gate Return, Crew Swap, and Conflict Resolution Protocol' is a multi-stage procedure for when a flight returns to the gate, causing significant delays. It uses: get_flight_by_number, create_operational_event, update_flight_schedule, find_flight_crew, verify_crew_duty_time, update_crew_member_status, find_available_crew, update_crew_assignment, send_ground_notification, and find_reservations_by_flight. The protocol sequence is: 1) Log the initial 'GATE_RETURN' event. 2) Apply the significant delay to the flight. 3) Verify the original crew's duty time, which is expected to fail. 4) Update the original crew's status to 'Standby'. 5) Find a qualified replacement crew at the origin airport. 6) Update the flight's crew assignments. 7) Log a final 'CREW_SWAP' event. 8) If the new departure time creates a gate conflict with another flight, the lower-priority flight is re-gated and a minor subsequent delay is applied. 9) A ground notification is sent for the gate change, and all passengers on the re-gated flight are notified.",
    "The 'Gate Return Protocol' must log a 'GATE_RETURN' event with a deterministic 'details' format: 'Flight [flight_number] returned to gate on [date] due to [reason]. Initiating operational recovery procedures.'"
    "Events of type 'GROUND_SERVICE_FAILURE' must be logged with a 'details' field following the deterministic format: 'Ground service failure impacting flight [flight_number] on [date].'"
    "The 'Strategic Cancellation and VIP Re-accommodation Protocol' is executed for high-yield flight cancellations. It uses: update_flight_status, find_reservations_by_flight, update_reservation_status, find_flights, create_reservation, send_passenger_notification, and send_certificate. The protocol dictates: 1) The original flight is cancelled. 2) For EACH reservation on the flight: their status is updated to 'REBOOKED', a new reservation is created for them on the next available flight (earliest departure), and the passenger is notified. 3) As a final step, a travel certificate of a specified value is issued to the primary user of EACH original reservation.",
    "The 'A-Check Escalation to AOG Protocol' is triggered when a critical issue is found during routine maintenance. It uses: update_maintenance_log_status, update_aircraft_status, create_maintenance_log, create_operational_event, update_flight_status, and send_department_notification. The protocol sequence is: 1) The original routine maintenance log's status is updated to 'Halted'. 2) The aircraft's status is updated to 'Grounded'. 3) A new, critical maintenance log is created for the AOG issue. 4) An operational event is logged detailing the finding. 5) The aircraft's next scheduled flight is cancelled. 6) A notification is sent to the Scheduling department about the aircraft's long-term unavailability using format: 'AIRCRAFT ALERT: Aircraft [tail_number] is Grounded indefinitely due to [reason]. Remove from all future schedules until further notice.'. The AOG operational event 'details' must follow the format: 'AOG ESCALATION: Critical finding during routine maintenance on aircraft [aircraft_id].'"
    "The 'In-Flight Service Failure and Baggage Damage Protocol' is a multi-stage customer recovery procedure. It uses: find_reservation_by_code, get_user_details, create_operational_event, send_certificate, update_reservation_details, send_passenger_notification. The protocol dictates: 1) Log an initial 'SERVICE_FAILURE' event detailing the onboard issue. 2) Issue a compensation certificate for the service failure. 3) Log a second 'BAGGAGE_MISHANDLING' event detailing the baggage issue. 4) Update the reservation status to reflect the open baggage claim. 5) Issue a second, separate compensation certificate for the baggage damage. 6) Notify the passenger of all actions taken. The event 'details' for the service failure must use the template: 'In-flight service failure reported for reservation [reservation_id]. Issue: [issue_description].'. The 'details' for baggage mishandling must use the template: 'Damaged baggage claim initiated for reservation [reservation_id]. Claim ID: [claim_id].'",
    "The 'Security Cancellation and Special Assistance Re-accommodation Protocol' is executed for cancellations following a security event. It uses: create_operational_event, update_flight_status, find_reservation_by_code, update_reservation_status, find_flights, create_reservation, send_passenger_notification, send_ground_notification. The protocol sequence is: 1) Log the 'SECURITY_EVENT' with a provided reference code. 2) Cancel the flight. 3) Find and update the affected reservation to 'REBOOKED'. 4) Find the earliest available flight on the next day and create a new booking. 5) Notify the passenger. 6) If special assistance is required, send high-priority notifications to ground staff at both origin and destination airports. The ground notification message must follow the template: 'SPECIAL ASSISTANCE: Wheelchair service required for passenger [passenger_name] on new reservation [new_reservation_id] for flight [new_flight_number] on [new_date]. Please confirm arrangements.'"
    "The 'AOG Recovery via Aircraft Swap and Crew Re-validation Protocol' is used to recover a flight by substituting another aircraft. It uses: get_aircraft_by_tail_number, update_aircraft_status, create_maintenance_log, find_crew_member, find_crew_certifications, assign_aircraft_to_flight, create_operational_event, update_flight_schedule, find_reservations_by_flight, send_passenger_notification. The protocol dictates: 1) The original aircraft is grounded and a maintenance log is created with the specified reason. 2) The proposed replacement aircraft is identified. 3) The assigned crew's certification for the replacement aircraft model is verified. 4) If validation passes, the new aircraft is assigned, a 'AOG_RECOVERY' event is logged, the flight schedule is updated with any resulting delay, and all passengers are notified. The event 'details' must use the template: 'AOG RECOVERY: Aircraft [original_aircraft_id] grounded. Flight [flight_number] reassigned to [new_aircraft_id]. Crew re-validation passed.' The passenger notification must use the standard 'Schedule Change Notification Protocol' template."
    "The 'Passenger No-Show and Service Protection Protocol' is executed when a passenger fails to board a flight that also carries high-value customers. It uses: find_reservation_by_code, update_reservation_status, create_operational_event, send_ground_notification, send_department_notification. The protocol dictates: 1) The no-show passenger's reservation is updated to 'NO_SHOW'. 2) An operational event for the offload is logged using the template from the 'Passenger No-Show Protocol'. 3) Standard notifications are sent to Baggage Handling and Revenue Management. 4) A notification is sent to the Station Manager using the template: 'STATION INFO: Passenger offload for reservation [reservation_id] from flight [flight_number] completed successfully.' 5) A second, separate 'VIP_SERVICE_PROTECTED' operational event is logged with the template: 'VIP Service Integrity: On-time departure of flight [flight_number] protected by efficient offload of no-show passenger from reservation [no_show_reservation_id]. VIP reservation: [vip_reservation_id].'",
    "The 'Deadhead Crew and Ferry Flight Protocol' is used to reposition a crew to operate a ferry flight from an outstation. It uses: find_available_crew, find_flights, create_reservation, create_flight, assign_crew_to_flight, create_operational_event, update_aircraft_location. The protocol is: 1) Find a qualified and available crew at a hub. 2) Book them on a commercial flight to the outstation where the ferry aircraft is located (this is a 'deadhead' flight). 3) Create the non-revenue ferry flight from the outstation back to the hub. 4) Assign the positioned crew to the new ferry flight. 5) Log the full operation with the details template: 'Deadhead and Ferry Operation Initiated. Crew [crew_member_id] repositioned on flight [commercial_flight_number] to operate ferry flight [ferry_flight_number].' 6) Finally, update the aircraft's location upon simulated completion of the ferry flight."
    "The 'Fleet Uniformity Mandate Protocol' is executed to standardize fleet operations at a specific base. It uses: get_aircraft_by_tail_number, create_flight, update_aircraft_location, create_operational_event (only one event needed if multiple aircrafts), send_department_notification. The protocol dictates: 1) A primary operational event is logged for the initiative. 2) For each specified aircraft not of the target model type at the base, a non-revenue ferry flight is created to reposition it to another hub. 3) Upon simulated arrival, the aircraft's location is updated. 4) The Scheduling and Fleet Management departments are notified of each aircraft's movement. The event type must be 'FLEET_UNIFORMITY_MANDATE' and the details must use the template: 'Fleet Uniformity Mandate initiated at [airport_iata]. Non-standard aircraft models are being repositioned.' The departmental notification 'message' must use the template: 'FLEET UPDATE: As part of the [airport_iata] fleet uniformity mandate, aircraft [tail_number] ([aircraft_id]) has been repositioned to [destination_iata].'",
    "The 'Involuntary Downgrade and Compensation Protocol' is executed when an aircraft swap results in insufficient premium cabin seats. It uses: get_aircraft_by_tail_number, update_aircraft_status, create_maintenance_log, assign_aircraft_to_flight, find_reservations_by_flight, update_reservation_status, create_operational_event, send_passenger_notification, send_certificate. The protocol is: 1) The original aircraft is grounded, and a Unscheduled maintenance log is created with description 'Last-minute maintenance issue.' and status 'In Progress'. 2) The new, smaller aircraft is assigned to the flight. 3) An INVOLUNTARY_DOWNGRADE event is logged with the 'details' template: 'Aircraft downgrade on flight [flight_number] from [original_model] to [new_model] due to maintenance. Downgrade and compensation required for reservation [reservation_id].' ) The specified passenger's reservation is updated to 'REBOOKED_DOWNGRADE'. 5) The passenger is notified with the template: 'FLIGHT CHANGE NOTICE: Due to an aircraft change on flight [flight_number], we could not accommodate your Business Class seat. You have been moved to Economy and a travel certificate has been issued for the inconvenience. Ref: [reservation_id].' 6) A travel certificate of a specified value is issued to the affected user.",   
    "The 'Airport Security Lockdown Protocol' is initiated following a security breach affecting gate operations. It uses: create_operational_event, update_flight_schedule, find_crew_member, verify_crew_duty_time, find_reservations_by_flight, send_passenger_notification. The protocol dictates: 1) An initial 'SECURITY_LOCKDOWN' event is logged with the reason provided. 2) A specified delay is applied to all affected departing flights. 3) A mandatory duty time re-verification must be performed for the flight crew of any primary flights affected by a significant delay. 4) All passengers on all affected flights must be notified of the delay using the standard 'Schedule Change Notification Protocol' template."
    "The 'Aircraft Reactivation and Repositioning for Heavy Maintenance Protocol' manages moving a stored aircraft to a maintenance hub. It uses: get_aircraft_by_tail_number, create_flight, update_aircraft_location, update_aircraft_status, create_maintenance_log, create_operational_event. The protocol dictates: 1) A ferry flight is created to move the aircraft from its storage location to the maintenance hub. 2) The aircraft's location is updated upon simulated arrival. 3) The aircraft's status is updated to 'Maintenance'. 4) A new maintenance log for the required heavy check (e.g., C-Check) is created with 'description' following format: 'Induction for scheduled C-Check.'. 5) An operational event is logged to formally record the start of the process, using the template: 'Aircraft [tail_number] ([aircraft_id]) repositioned from [origin_iata] to [destination_iata] and inducted for heavy maintenance.'"
    "The 'Weather Avoidance Rerouting Protocol' is used when a flight is rerouted to avoid weather without changing its final destination. It uses: create_operational_event, update_flight_schedule, find_reservations_by_flight, send_passenger_notification, send_ground_notification. The protocol dictates: 1) A 'WEATHER_REROUTE' event is logged with the provided reason. 2) The flight's schedule is updated with the new arrival time and a 'Delayed' status. 3) Passengers are notified of the delay using the standard 'Schedule Change Notification Protocol' template, but with the reason for the rerouting included in the message. 4) Ground staff at the destination are notified of the updated ETA. The event 'details' must use the template: 'Flight [flight_number] rerouted to avoid weather.'"
    "The 'Fleet Realignment Protocol' is executed to reconfigure a base for a specific fleet type. It uses: create_operational_event, get_aircraft_by_tail_number, create_flight, update_aircraft_location, send_department_notification. The protocol dictates: 1) A primary 'FLEET_REALIGNMENT' event is logged. 2) All specified non-standard aircraft at the target base are repositioned to a new location via individual ferry flights. 3) All specified standard aircraft from other bases are repositioned to the target base via individual ferry flights. 4) The location of each aircraft is updated upon its simulated arrival. 5) A notification is sent to Fleet Management for each aircraft moved, using the template: 'FLEET REALIGNMENT: Aircraft [tail_number] ([aircraft_id]) has been repositioned from [origin_iata] to [destination_iata] as part of the [target_base_iata] fleet strategy.'"
    "The 'Service Recovery Protocol for Flight Changes' must be executed if a requested flight change is not possible due to lack of direct flight availability. The protocol dictates: 1) Search for a viable one-stop alternative through a major hub. When multiple valid itineraries are available, the agent must deterministically select the itinerary with the lowest total ticket cost. 2) If the original ticket is non-refundable, cancel it and issue its value as a new travel certificate. 3) Use the new certificate towards the payment of the new booking. If the certificate does not cover the full amount, use the user's gift card with the smallest available balance to pay for the remainder."
    "When a user requests to pay with their 'smallest balance' gift card, the agent must identify all gift cards in the user's payment methods and select the one with the lowest current 'amount'. If that single gift card cannot cover the total cost, the protocol is to use the user's gift card with the largest available balance instead, charging any remaining amount to the primary credit card on file."
    "The 'Proactive Maintenance Swap Protocol' is used to optimize fleet health by swapping aircraft before a scheduled flight. It uses: get_aircraft_by_tail_number, find_crew_member, find_crew_certifications, create_operational_event, send_department_notification. The protocol dictates: 1) Identify the aircraft to be swapped out and the proposed replacement. 2) Verify if the assigned flight crew is certified for the replacement aircraft. 3) If the crew is not certified, the swap must be aborted. An operational event with type 'SWAP_FAILED' must be logged, and a notification sent to Maintenance Planning. The event 'details' must use the template: 'Proactive aircraft swap for flight [flight_number] failed. Reason: Crew member [crew_member_id] not certified for replacement aircraft model [aircraft_model].'"
    "The 'Priority Re-accommodation Protocol' is executed when a flight cancellation results in insufficient seats on the next available flight for all affected passengers. It uses: update_flight_status, find_reservations_by_flight, get_user_details, find_flights, create_reservation, send_passenger_notification. The protocol dictates: 1) The original flight is cancelled. 2) All affected reservations are retrieved. 3) Passengers are sorted by membership status (Gold > Silver > Regular). 4) The highest-priority passengers are rebooked on the earliest available flight. 5) For the remaining passengers, a search is conducted for the next subsequent available flight, and they are rebooked on it. 6) Each party is notified of their new, separate itinerary."
    "The 'In-Flight Service Failure and Baggage Damage Protocol' is a multi-stage customer recovery procedure. It uses: find_reservation_by_code, get_user_details, create_operational_event, send_certificate, update_reservation_details, send_passenger_notification. The protocol dictates: 1) Log an initial 'SERVICE_FAILURE' event detailing the onboard issue. 2) Issue a compensation certificate for the service failure. 3) Log a second 'BAGGAGE_MISHANDLING' event detailing the baggage issue. 4) Update the reservation status to reflect the open baggage claim. 5) Issue a second, separate compensation certificate for the baggage damage. 6) Notify the passenger of all actions taken. The event 'details' for the service failure must use the template: 'In-flight service failure reported for reservation [reservation_id]. Issue: [issue_description].'. The 'details' for baggage mishandling must use the template: 'Damaged baggage claim initiated for reservation [reservation_id]. Claim ID: [claim_id].'",
    "The 'Security Cancellation and Special Assistance Re-accommodation Protocol' is executed for cancellations following a security event. It uses: create_operational_event, update_flight_status, find_reservation_by_code, update_reservation_status, find_flights, create_reservation, send_passenger_notification, send_ground_notification. The protocol sequence is: 1) Log the 'SECURITY_EVENT' with a provided reference code. 2) Cancel the flight. 3) Find and update the affected reservation to 'REBOOKED'. 4) Find the earliest available flight on the next day and create a new booking. 5) Notify the passenger. 6) If special assistance is required, send high-priority notifications to ground staff at both origin and destination airports. The ground notification message must follow the template: 'SPECIAL ASSISTANCE: Wheelchair service required for passenger [passenger_name] on new reservation [new_reservation_id] for flight [new_flight_number] on [new_date]. Please confirm arrangements.'"
    "When a user requests to pay with multiple, specific payment types, the agent must apply them in the order specified in the instruction. The 'Multi-Method Payment Protocol' dictates: 1) Calculate the total cost of the transaction. 2) Apply the full balance of the first specified payment method (e.g., gift card). 3) Apply the full balance of the second specified payment method (e.g., travel certificate) to the remaining cost. 4) Charge any final remaining amount to the third specified payment method (e.g., primary credit card).",
    "The 'Proactive Congestion Diversion Protocol' is executed to prevent tarmac delays at a congested airport. It uses: create_operational_event, update_flight_schedule, send_passenger_notification, send_ground_notification. The protocol is: 1) Log the 'CONGESTION_DIVERT' event with the provided reason. 2) Update the flight's status to 'Diverted', including the new airport and ETA. 3) Notify passengers with the template: 'FLIGHT DIVERSION: To avoid extensive delays upon arrival, your flight [flight_number] on [date] is being diverted to [diversion_airport_iata]. Ground transportation to [original_destination_iata] will be provided.' 4) Notify ground staff at both the original and new airports. The notification to the diversion airport must use the template: 'UNSCHEDULED ARRIVAL: Flight [flight_number] diverting to your station due to congestion at [original_destination_iata]. ETA [new_arrival_time]. Prepare for ground handling and passenger deplaning.'"
    "The 'Partial Cancellation and Downgrade Protocol' is a multi-step financial process for modifying a reservation. It uses: get_reservation_details, get_user_details, update_reservation_passengers, get_flight_by_number, calculate, update_reservation_flights, send_certificate. The protocol dictates: 1) The original reservation details are retrieved. 2) The passenger list is updated as requested. 3) The new, lower cabin class price is retrieved. 4) The total refund amount is calculated based on the price difference for remaining passengers plus the full price for removed passengers. 5) The reservation is updated with the new cabin class and a placeholder payment. 6) The final calculated refund amount is issued to the user as a new travel certificate.",
    "The 'AOG Ferry with Logistics Support Protocol' manages complex aircraft recovery. It uses: create_maintenance_log, create_flight, create_operational_event, update_aircraft_location. The protocol is: 1) An initial AOG maintenance log is created for the grounded aircraft. 2) A separate, cargo-only logistics flight is created to transport necessary equipment to the AOG aircraft's location. 3) The main ferry flight is created to reposition the AOG aircraft, scheduled to depart only after the logistics flight has arrived. 4) A single operational event is logged to track the entire recovery mission, with the template: 'AOG recovery for [tail_number] initiated. Logistics support flight [logistics_flight_number] dispatched. Ferry flight is [ferry_flight_number].' 5) The AOG aircraft's location is updated upon simulated arrival at the maintenance hub."
    "The 'Complex Reservation Modification Protocol' is used for multi-part changes to a single booking. It uses: get_reservation_details, get_user_details, update_reservation_passengers, update_reservation_baggages, calculate. The protocol dictates: 1) A fixed change fee is applied to the total cost. 2) The passenger list is updated. 3) Baggage counts are updated. 4) All fees (change fee + new baggage fees) are charged to a specified payment method. The standard change fee is $50."
    "The 'Proactive Maintenance Swap Protocol' is used to optimize fleet health by swapping aircraft before a scheduled flight. It uses: get_aircraft_by_tail_number, find_crew_member, find_crew_certifications, create_operational_event, send_department_notification. The protocol dictates: 1) Identify the aircraft to be swapped out and the proposed replacement. 2) Verify if the assigned flight crew is certified for the replacement aircraft. 3) If the crew is not certified, the swap must be aborted. An operational event with type 'SWAP_FAILED' must be logged, and a notification sent to Maintenance Planning. The event 'details' must use the template: 'Proactive aircraft swap for flight [flight_number] failed. Reason: Crew member [crew_member_id] not certified for replacement aircraft model [aircraft_model].'",
    "The 'Fleet Swap Protocol' is executed when an aircraft substitution is required to optimize utilization, address maintenance positioning, or resolve operational needs. It uses the tools: create_operational_event, assign_aircraft_to_flight, update_aircraft_location, update_flight_schedule, and send_passenger_notification. The protocol sequence is: 1) Log an operational event with event_type 'FLEET_SWAP' at the affected airport. The 'details' must follow the deterministic format: 'Fleet swap executed for flight [flight_number] on [date]. New aircraft assigned: [new_aircraft_id].'. 2) Assign the new aircraft to the flight using assign_aircraft_to_flight. 3) Confirm and update the new aircraft's position at the origin airport using update_aircraft_location. 4) Update the flight schedule with any required delay in minutes, the new gate assignment, and flight status (default: 'DELAYED'). 5) Notify all impacted passengers. The passenger notification 'message' must follow the deterministic format: 'FLEET SWAP UPDATE: Flight [flight_number] on [date] will now depart from Gate [new_gate] with a [delay_minutes]-minute delay.'."  
    ]
