from domains.dto import Task, Action

TASKS = [
    Task(
        annotator="faris",
        user_id="faris_1",
        instruction="You must onboard a new Software Engineer, Alex Chen. Their start date is 2024-09-01, their email is alex.chen@example.com, and their manager is jane.doe@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Alex Chen', 'role_title': 'Software Engineer', 'start_date': '2024-09-01', 'candidate_email': 'alex.chen@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['alex.chen@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_2",
        instruction="You must process the hiring of a new Product Manager, Brenda Starr. Their start date is 2024-09-01, their email is brenda.starr@example.com, and their manager is john.smith@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Brenda Starr', 'role_title': 'Product Manager', 'start_date': '2024-09-01', 'candidate_email': 'brenda.starr@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['brenda.starr@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_3",
        instruction="You must onboard a new Data Analyst, Carlos Diaz. Their start date is 2024-09-08, their email is carlos.diaz@example.com, and their manager is jane.doe@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Carlos Diaz', 'role_title': 'Data Analyst', 'start_date': '2024-09-08', 'candidate_email': 'carlos.diaz@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['carlos.diaz@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_4",
        instruction="You must get the new UX Designer, Diana Prince, set up for her start date of 2024-09-08. Her email is diana.prince@example.com, and her manager is john.smith@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Diana Prince', 'role_title': 'UX Designer', 'start_date': '2024-09-08', 'candidate_email': 'diana.prince@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['diana.prince@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_5",
        instruction="Your goal is to process a new Marketing Specialist, Edward Nygma. Their start date is 2024-09-15, their email is edward.nygma@example.com, and their manager is jane.doe@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Edward Nygma', 'role_title': 'Marketing Specialist', 'start_date': '2024-09-15', 'candidate_email': 'edward.nygma@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['edward.nygma@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_6",
        instruction="You need to onboard a senior software engineer, Felicia Hardy. Her start date is 2024-09-15, her email is felicia.hardy@example.com, and her manager is john.smith@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Felicia Hardy', 'role_title': 'senior software engineer', 'start_date': '2024-09-15', 'candidate_email': 'felicia.hardy@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['felicia.hardy@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_7",
        instruction="You must handle the onboarding for a junior product manager, George Stacy. Their start date is 2024-09-22, their email is george.stacy@example.com, and their manager is jane.doe@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'George Stacy', 'role_title': 'junior product manager', 'start_date': '2024-09-22', 'candidate_email': 'george.stacy@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['george.stacy@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_8",
        instruction="You must process a new hire, Helen Cho, who is a data scientist. Her start date is 2024-09-22, her email is helen.cho@example.com, and her manager is john.smith@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Helen Cho', 'role_title': 'data scientist', 'start_date': '2024-09-22', 'candidate_email': 'helen.cho@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['helen.cho@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_9",
        instruction="You must onboard the new UI designer, Ivan Vanko. Their start date is 2024-09-29, their email is ivan.vanko@example.com, and their manager is jane.doe@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Ivan Vanko', 'role_title': 'UI designer', 'start_date': '2024-09-29', 'candidate_email': 'ivan.vanko@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['ivan.vanko@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_10",
        instruction="You need to set up the new SEO specialist, Jessica Jones. Her start date is 2024-09-29, her email is jessica.jones@example.com, and her manager is john.smith@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Jessica Jones', 'role_title': 'SEO specialist', 'start_date': '2024-09-29', 'candidate_email': 'jessica.jones@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['jessica.jones@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),

    Task(
        annotator="faris",
        user_id="faris_11",
        instruction="You must onboard two new Financial Analysts, Sarah Chen and Michael Rodriguez. Their start date is 2024-10-08. Sarah's email is sarah.chen@example.com and Michael's is michael.rodriguez@example.com. Do not email Michael Rodriguez. Their manager is iris.west@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Sarah Chen', 'role_title': 'Financial Analyst', 'start_date': '2024-10-08', 'candidate_email': 'sarah.chen@example.com', 'manager_email': 'iris.west@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Michael Rodriguez', 'role_title': 'Financial Analyst', 'start_date': '2024-10-08', 'candidate_email': 'michael.rodriguez@example.com', 'manager_email': 'iris.west@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['sarah.chen@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_12",
        instruction="You must ping candidates who are more than 3 days behind on their tasks. Please use a threshold of 3. You should target those with an onboarding status of 'Started'",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Started'}),
            Action(name="get_overdue_checklist_items", kwargs={'days_overdue_threshold': 3}),
            Action(name="send_batch_reminder_emails", kwargs={'candidate_ids': ['cand_6'], 'days_overdue_threshold': 3}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_6'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_6'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_13",
        instruction="You must check for and remind candidates with overdue checklist items using a 3 day threshold. You should target those with an onboarding status of 'Started'.",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Started'}),
            Action(name="get_overdue_checklist_items", kwargs={'days_overdue_threshold': 3}),
            Action(name="send_batch_reminder_emails", kwargs={'candidate_ids': ['cand_6'], 'days_overdue_threshold': 3}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_6'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_6'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_14",
        instruction="You must escalate system access issues for all candidates who have an onboarding status of 'Access Issues'. Use failure notes SSO access failure.",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="analyze_system_access_failures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'failure_notes': "SSO access failure"}}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'cand_4'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_4'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_15",
        instruction="You must escalate onboarding issues for candidates who have items that are 10 days overdue. They should be in the 'Onboarded' status.",
        actions=[
            Action(name="get_overdue_checklist_items", kwargs={'days_overdue_threshold': 10}),
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Onboarded'}),
            Action(name="analyze_system_access_failures", kwargs={'candidate_id': 'cand_3'}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_3', 'notification_type': 'overdue_escalation'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'cand_3'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_3'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_3'}),
        ],
        outputs=[],
    ),

    Task(
        annotator="faris",
        user_id="faris_16",
        instruction="You must schedule orientation for all new hires who are starting in the next 14 days. You should then apply label_6 to the emails sent to the users.",
        actions=[
            Action(name="get_candidates_needing_orientation_scheduling", kwargs={'days_until_start': 14}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_5', 'cand_2', 'cand_1']}),
            Action(name="apply_email_labels_and_threading", kwargs={'label_assignments': {'msg_015': ['label_6'], 'msg_017': ['label_6'], 'msg_019': ['label_6']}}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_5', 'cand_2', 'cand_1'], 'fields_to_update': {'onboarding_status': 'Packet Sent', 'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_17",
        instruction="You must send out orientation invites for all cand_2, cand_1, and cand_4, cand_6, cand_7 and any others who are starting within 7 days.",
        actions=[
            Action(name="get_candidates_needing_orientation_scheduling", kwargs={'days_until_start': 7}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_4', 'cand_6', 'cand_7']}),
            Action(name="apply_email_labels_and_threading", kwargs={'label_assignments': {'msg_015': ['label_4'], 'msg_017': ['label_4'], 'msg_019': ['label_4'], 'msg_021': ['label_4'], 'msg_023': ['label_4'], 'msg_025': ['label_4']}}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_4', 'cand_6', 'cand_7'], 'fields_to_update': {'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_18",
        instruction="You must finalize the orientation schedule for next week's new hires, which includes anyone starting in the next 7 days. Apply the 'Orientation-Invite' (label_4) and 'Welcome-Packet' (label_6) labels to the orientation invitation emails. Finally, you must return the full name of any candidate who has a pending asset request.",
        actions=[
            Action(name="get_candidates_needing_orientation_scheduling", kwargs={'days_until_start': 7}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_5']}),
            Action(name="apply_email_labels_and_threading", kwargs={'label_assignments': {'msg_015': ['label_4', 'label_6']}}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'cand_5', 'new_status': 'Packet Sent'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_5'}),
            Action(name="get_email_thread_conversations", kwargs={'candidate_id': 'cand_5'}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'expected_email_types': ['orientation invitation']}),
            Action(name="get_pending_asset_requests", kwargs={'status_filter': 'Pending'}),
        ],
        outputs=[{"full_name": "Robert Singh"}],
    ),
    Task(
        annotator="faris",
        user_id="faris_19",
        instruction="You must send orientation invites to all ready candidates starting in the next 19 days. You should then apply label_4 to all of the orientation invite emails sent to the users.",
        actions=[
            Action(name="get_candidates_needing_orientation_scheduling", kwargs={'days_until_start': 19}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_7']}),
            Action(name="apply_email_labels_and_threading", kwargs={'label_assignments': {'msg_015': ['label_4'], 'msg_017': ['label_4'], 'msg_019': ['label_4'], 'msg_021': ['label_4']}}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_7'], 'fields_to_update': {'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_20",
        instruction="You must initiate the orientation and manager intro process for all candidates who are starting in the next 30 days. You should then apply label_4 to the emails sent to the users.",
        actions=[
            Action(name="get_candidates_needing_orientation_scheduling", kwargs={'days_until_start': 30}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_7']}),
            Action(name="apply_email_labels_and_threading", kwargs={'label_assignments': {'msg_015': ['label_4'], 'msg_017': ['label_4'], 'msg_019': ['label_4'], 'msg_021': ['label_4']}}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_7'], 'fields_to_update': {'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),

    Task(
        annotator="faris",
        user_id="faris_21",
        instruction="You must investigate and resolve SSO access failures for candidates who are in the 'Access Issues' status. You should set the note to 'Resolved by IT.' and use the notification type 'access_issue'. Return the full name of the candidate who has a pending asset request.",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="analyze_system_access_failures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {"Email": {"failure_notes": ["Mailbox creation failed. Exchange server issue reported."]},"SSO": {"failure_notes": ["Identity provider sync pending. Expected resolution by 2024-08-10."]},"Slack": {"failure_notes": ["Account depends on SSO resolution."]}}}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="resolve_sso_access_issue", kwargs={'candidate_id': 'cand_4'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_4'}),
            Action(name="get_pending_asset_requests", kwargs={'status_filter': 'Pending'}),
        ],
        outputs=[{"full_name": "Robert Singh"}],
    ),
    Task(
        annotator="faris",
        user_id="faris_22",
        instruction="You must address GitHub access problems for candidate cand_3. You should analyze the 'GitHub' system, notify manager, update records and set the note to 'Resolved by IT.'",
        actions=[
            Action(name="analyze_system_access_failures", kwargs={'system_name': 'GitHub'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_3', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'GitHub': {'failure_notes': ['Account not yet provisioned. IT ticket #12345 created.']}}}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_3', 'notification_type': 'access_issue'}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_3', 'system_name': 'GitHub', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_3'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_3'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_23",
        instruction="You must fix access issues for candidates who have an 'Access Issues' status. You should set the note to 'Resolved by IT.' and use the notification type 'access_issue'.",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="analyze_system_access_failures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {"Email": {"failure_notes": ["Mailbox creation failed. Exchange server issue reported."]},"SSO": {"failure_notes": ["Identity provider sync pending. Expected resolution by 2024-08-10."]},"Slack": {"failure_notes": ["Account depends on SSO resolution."]}}}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_4', 'system_name': 'Email', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_4', 'system_name': 'SSO', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_4', 'system_name': 'Slack', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_4'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_24",
        instruction="You must run a diagnostic and fix Email access for candidate cand_1. You should set the note to 'Resolved by IT.' and use the notification type 'access_issue'. Use failure notes Email access failure.",
        actions=[
            Action(name="analyze_system_access_failures", kwargs={'candidate_id': 'cand_1'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_1', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'failure_notes': 'Email access failure'}}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_1', 'notification_type': 'access_issue'}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_1', 'system_name': 'Email', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_1'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_1'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_25",
        instruction="You must clear all candidates who are currently in the 'Access Issues' state by resolving their SSO issues. You should set the failure notes to 'SSO access failure' and use the notification type 'access_issue'.",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="analyze_system_access_failures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'failure_notes': 'SSO access failure'}}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="resolve_sso_access_issue", kwargs={'candidate_id': 'cand_4'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_4'}),
        ],
        outputs=[],
    ),

    Task(
        annotator="faris",
        user_id="faris_26",
        instruction="Your task is to get, and then process and fulfill all pending hardware requests that have a status of 'Pending'. Use the asset_fulfillment_notification template to notify the candidate and manager.",
        actions=[
            Action(name="get_pending_asset_requests", kwargs={'status_filter': 'Pending'}),
            Action(name="query_available_assets_by_type", kwargs={'asset_type': 'Laptop', 'status_filter': 'Available'}),
            Action(name="assign_asset_to_candidate", kwargs={'asset_request_id': 'asset_req_5', 'asset_tag': 'LT-MBP-001'}),
            Action(name="update_asset_request_status", kwargs={'request_id': 'asset_req_5', 'new_status': 'Completed'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_7'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_7', 'template_name': 'asset_fulfillment_notification', 'to_emails': ['robert.singh@example.com'], 'cc_emails': ['sarah.wilson@example.com'], 'template_context': {'asset_name': 'MacBook Pro 16-inch M3, 32GB RAM, 1TB SSD', 'asset_tag': 'LT-MBP-001'}}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_27",
        instruction="You must create a High priority Laptop (MacBook) asset request for John Doe (cand_1). You should then fulfill any 'Pending' asset requests. Do not notify the newly created asset request candidate (cand_1).",
        actions=[
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'cand_1', 'asset_type': 'Laptop', 'urgency_level': 'High'}),
            Action(name="get_pending_asset_requests", kwargs={'status_filter': 'Pending'}),
            Action(name="query_available_assets_by_type", kwargs={'asset_type': 'Laptop', 'status_filter': 'Available'}),
            Action(name="assign_asset_to_candidate", kwargs={'asset_request_id': 'asset_req_5', 'asset_tag': 'LT-MBP-001'}),
            Action(name="assign_asset_to_candidate", kwargs={'asset_request_id': 'asset_req_007', 'asset_tag': 'LT-MBP-002'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_7'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_7', 'template_name': 'asset_fulfillment_notification', 'to_emails': ['robert.singh@example.com'], 'cc_emails': ['sarah.wilson@example.com'], 'template_context': {'asset_name': 'MacBook Pro 16-inch M3, 32GB RAM, 1TB SSD', 'asset_tag': 'LT-MBP-001'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_1'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_28",
        instruction="You must create a Medium priority Laptop (MacBook) asset request for Jane Smith (cand_2). You should then fulfill the newly created asset request.",
        actions=[
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'cand_2', 'asset_type': 'Laptop', 'urgency_level': 'Medium'}),
            Action(name="get_pending_asset_requests", kwargs={'status_filter': 'Pending'}),
            Action(name="query_available_assets_by_type", kwargs={'asset_type': 'Laptop', 'status_filter': 'Available'}),
            Action(name="assign_asset_to_candidate", kwargs={'asset_request_id': 'asset_req_007', 'asset_tag': 'LT-MBP-001'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_2'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_2', 'template_name': 'asset_fulfillment_notification', 'to_emails': ['jane.smith@example.com'], 'cc_emails': ['mike.chen@example.com'], 'template_context': {'asset_name': 'MacBook Pro 16-inch M3, 32GB RAM, 1TB SSD', 'asset_tag': 'LT-MBP-001'}}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_29",
        instruction="You must create a Medium priority Keyboard asset request for Emily Chen (cand_6). You should then fulfill the newly created asset request.",
        actions=[
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'cand_6', 'asset_type': 'Keyboard', 'urgency_level': 'Medium'}),
            Action(name="get_pending_asset_requests", kwargs={'status_filter': 'Pending'}),
            Action(name="query_available_assets_by_type", kwargs={'asset_type': 'Keyboard', 'status_filter': 'Available'}),
            Action(name="assign_asset_to_candidate", kwargs={'asset_request_id': 'asset_req_007', 'asset_tag': 'KB-LOGI-001'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_6'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_6', 'template_name': 'asset_fulfillment_notification', 'to_emails': ['emily.chen@example.com'], 'cc_emails': ['jennifer.davis@example.com'], 'template_context': {'asset_name': 'Logitech MX Keys Advanced Wireless', 'asset_tag': 'KB-LOGI-001'}}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_30",
        instruction="You must create a Medium priority Keyboard asset request for Emily Chen (cand_6). You should then fulfill the newly created asset request.",
        actions=[
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'cand_6', 'asset_type': 'Keyboard', 'urgency_level': 'Medium'}),
            Action(name="get_pending_asset_requests", kwargs={'status_filter': 'Pending'}),
            Action(name="query_available_assets_by_type", kwargs={'asset_type': 'Keyboard', 'status_filter': 'Available'}),
            Action(name="assign_asset_to_candidate", kwargs={'asset_request_id': 'asset_req_007', 'asset_tag': 'KB-LOGI-001'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_6'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_6', 'template_name': 'asset_fulfillment_notification', 'to_emails': ['emily.chen@example.com'], 'cc_emails': ['jennifer.davis@example.com'], 'template_context': {'asset_name': 'Logitech MX Keys Advanced Wireless', 'asset_tag': 'KB-LOGI-001'}}),
        ],
        outputs=[],
    ),

    Task(
        annotator="faris",
        user_id="faris_31",
        instruction="You must review the onboarding progress for all new hires managed by sarah.wilson@example.com. You should then remediate any identified gaps by creating missing checklists for John Doe (cand_1) and reviewing the other candidates.",
        actions=[
            Action(name="get_manager_candidate_assignments", kwargs={'manager_email': 'sarah.wilson@example.com'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_1'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'cand_1'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_1'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_5'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_7'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_32",
        instruction="You must verify that 'john.doe@example.com' is not a manager. You should then perform the necessary onboarding steps for the candidate John Doe (cand_1), including creating his checklist, sending his welcome packet, and updating his status.",
        actions=[
            Action(name="get_manager_candidate_assignments", kwargs={'manager_email': 'john.doe@example.com'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_1'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'cand_1'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'cand_1'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_1', 'template_name': 'welcome', 'to_emails': ['john.doe@example.com'], 'cc_emails': ['sarah.wilson@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'cand_1', 'new_status': 'Packet Sent'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_33",
        instruction="You must verify the assignments for manager 'jane.doe@example.com'. If the manager is not found, you should then perform the initial onboarding steps for the candidate Jane Smith (cand_2).",
        actions=[
            Action(name="get_manager_candidate_assignments", kwargs={'manager_email': 'jane.doe@example.com'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_2'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'cand_2'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'cand_2'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_2', 'template_name': 'welcome', 'to_emails': ['jane.smith@example.com'], 'cc_emails': ['mike.chen@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'cand_2', 'new_status': 'Packet Sent'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_34",
        instruction="You must audit the hires assigned to 'mike.chen@example.com'. You should then schedule orientation for all ready candidates. The meeting will be at 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="get_manager_candidate_assignments", kwargs={'manager_email': 'mike.chen@example.com'}),
            Action(name="get_candidates_needing_orientation_scheduling", kwargs={'days_until_start': 30}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_7'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_7'], 'fields_to_update': {'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="check_email_communication_gaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_35",
        instruction="You must get the new UX Designer, Doono Price, set up for her start date of 2024-09-08. Her email is doono.price@example.com, and her manager is john.smith@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Doono Price', 'role_title': 'UX Designer', 'start_date': '2024-09-08', 'candidate_email': 'doono.price@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['doono.price@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_36",
        instruction="You must onboard a new Software Engineer, Victor Frankenstein. Their start date is 2024-09-01, their email is victor.frankenstein@example.com, and their manager is mary.shelley@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Victor Frankenstein', 'role_title': 'Software Engineer', 'start_date': '2024-09-01', 'candidate_email': 'victor.frankenstein@example.com', 'manager_email': 'mary.shelley@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['victor.frankenstein@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_37",
        instruction="You must process the hiring of a new Product Manager, Elizabeth Bennet. Their start date is 2024-09-01, their email is elizabeth.bennet@example.com, and their manager is jane.austen@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Elizabeth Bennet', 'role_title': 'Product Manager', 'start_date': '2024-09-01', 'candidate_email': 'elizabeth.bennet@example.com', 'manager_email': 'jane.austen@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['elizabeth.bennet@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_38",
        instruction="You must onboard a new Data Analyst, Jay Gatsby. Their start date is 2024-09-08, their email is jay.gatsby@example.com, and their manager is f.scott.fitzgerald@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Jay Gatsby', 'role_title': 'Data Analyst', 'start_date': '2024-09-08', 'candidate_email': 'jay.gatsby@example.com', 'manager_email': 'f.scott.fitzgerald@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['jay.gatsby@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_39",
        instruction="You must get the new UX Designer, Hester Prynne, set up for her start date of 2024-09-08. Her email is hester.prynne@example.com, and her manager is nathaniel.hawthorne@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Hester Prynne', 'role_title': 'UX Designer', 'start_date': '2024-09-08', 'candidate_email': 'hester.prynne@example.com', 'manager_email': 'nathaniel.hawthorne@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['hester.prynne@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_40",
        instruction="Your goal is to process a new Marketing Specialist, Holden Caulfield. Their start date is 2024-09-15, their email is holden.caulfield@example.com, and their manager is j.d.salinger@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Holden Caulfield', 'role_title': 'Marketing Specialist', 'start_date': '2024-09-15', 'candidate_email': 'holden.caulfield@example.com', 'manager_email': 'j.d.salinger@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['holden.caulfield@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_41",
        instruction="You need to onboard a senior software engineer, Captain Ahab. Her start date is 2024-09-15, her email is captain.ahab@example.com, and her manager is herman.melville@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Captain Ahab', 'role_title': 'senior software engineer', 'start_date': '2024-09-15', 'candidate_email': 'captain.ahab@example.com', 'manager_email': 'herman.melville@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['captain.ahab@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_42",
        instruction="You must handle the onboarding for a junior product manager, Atticus Finch. Their start date is 2024-09-22, their email is atticus.finch@example.com, and their manager is harper.lee@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Atticus Finch', 'role_title': 'junior product manager', 'start_date': '2024-09-22', 'candidate_email': 'atticus.finch@example.com', 'manager_email': 'harper.lee@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['atticus.finch@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_43",
        instruction="You must process a new hire, Jane Eyre, who is a data scientist. Her start date is 2024-09-22, her email is jane.eyre@example.com, and her manager is charlotte.bronte@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Jane Eyre', 'role_title': 'data scientist', 'start_date': '2024-09-22', 'candidate_email': 'jane.eyre@example.com', 'manager_email': 'charlotte.bronte@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['jane.eyre@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_44",
        instruction="You must onboard the new UI designer, Ishmael. Their start date is 2024-09-29, their email is ishmael@example.com, and their manager is herman.melville@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Ishmael', 'role_title': 'UI designer', 'start_date': '2024-09-29', 'candidate_email': 'ishmael@example.com', 'manager_email': 'herman.melville@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['ishmael@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_45",
        instruction="You need to set up the new SEO specialist, Scout Finch. Her start date is 2024-09-29, her email is scout.finch@example.com, and her manager is harper.lee@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Scout Finch', 'role_title': 'SEO specialist', 'start_date': '2024-09-29', 'candidate_email': 'scout.finch@example.com', 'manager_email': 'harper.lee@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['scout.finch@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_46",
        instruction="You must address all overdue onboarding tasks. For any candidate with items that are 1 or more days overdue, you must send them a reminder and log a follow-up in their record then verify all overdue tasks are resolved by checking their full context.",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Started'}),
            Action(name="get_overdue_checklist_items", kwargs={'days_overdue_threshold': 1}),
            Action(name="send_batch_reminder_emails", kwargs={'candidate_ids': ['cand_2', 'cand_3', 'cand_4', 'cand_5', 'cand_6', 'cand_7'], 'days_overdue_threshold': 1}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_2', 'cand_3', 'cand_4', 'cand_5', 'cand_6', 'cand_7'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_2'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_3'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_4'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_5'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_6'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_7'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_47",
        instruction="You must resolve all GitHub access failures. For any candidate with a failed GitHub access check, you must send a support request to IT, notify the manager, update the access check to 'Success', and log the resolution. Finally, check for any remaining pending asset requests.",
        actions=[
            Action(name="analyze_system_access_failures", kwargs={'system_name': 'GitHub'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_3'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_3', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'failure_notes': 'Account not yet provisioned. IT ticket #12345 created.'}}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_3', 'notification_type': 'access_issue'}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_3', 'system_name': 'GitHub', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_3'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_3'}),
            Action(name="get_pending_asset_requests", kwargs={'status_filter': 'Pending'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_48",
        instruction="You must ensure all new hires have received a welcome packet. For any candidate in the 'Started' status who is missing a welcome email, you must generate their welcome file, send the email, and update their status to 'Packet Sent'.",
        actions=[
            Action(name="check_email_communication_gaps", kwargs={'expected_email_types': ['welcome']}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['cand_1', 'cand_6']}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_1'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_6'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_1', 'template_name': 'welcome', 'to_emails': ['john.doe@example.com'], 'cc_emails': ['sarah.wilson@example.com']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_6', 'template_name': 'welcome', 'to_emails': ['emily.chen@example.com'], 'cc_emails': ['jennifer.davis@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['cand_1', 'cand_6'], 'new_status': 'Packet Sent'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_49",
        instruction="You must schedule orientation for all candidates who need it. For any candidate who is missing an orientation invite, you must send the invitation email, apply the correct label, and update their record with the invitation timestamp. The meeting will be at 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="get_candidates_needing_orientation_scheduling", kwargs={'days_until_start': 30}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_1'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="apply_email_labels_and_threading", kwargs={'label_assignments': {'msg_015': ['label_4']}}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_1'], 'fields_to_update': {'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_50",
        instruction="You must fulfill all pending asset requests for candidates in the 'Asset Pending' status. You must confirm the asset is available, assign it to the candidate, send a fulfillment notification, and update the candidate's status to 'Onboarded'. Finally, verify that no asset requests remain pending.",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Asset Pending'}),
            Action(name="get_pending_asset_requests", kwargs={'candidate_id': 'cand_7'}),
            Action(name="query_available_assets_by_type", kwargs={'asset_type': 'Laptop', 'status_filter': 'Available'}),
            Action(name="assign_asset_to_candidate", kwargs={'asset_request_id': 'asset_req_5', 'asset_tag': 'LT-MBP-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_7', 'template_name': 'asset_fulfillment_notification', 'to_emails': ['robert.singh@example.com'], 'cc_emails': ['sarah.wilson@example.com'], 'template_context': {'asset_name': 'MacBook Pro 16-inch M3, 32GB RAM, 1TB SSD', 'asset_tag': 'LT-MBP-001'}}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'cand_7', 'new_status': 'Onboarded'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_7'}),
            Action(name="get_pending_asset_requests", kwargs={'status_filter': 'Pending'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_51",
        instruction="You must onboard a new Data Analyst, Carlos Diaz. Their start date is 2024-09-08, their email is carlos.diaz@example.com, and their manager is jane.doe@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Carlos Diaz', 'role_title': 'Data Analyst', 'start_date': '2024-09-08', 'candidate_email': 'carlos.diaz@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['carlos.diaz@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_52",
        instruction="You must get the new UX Designer, Diana Prince, set up for her start date of 2024-09-08. Her email is diana.prince@example.com, and her manager is john.smith@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Diana Prince', 'role_title': 'UX Designer', 'start_date': '2024-09-08', 'candidate_email': 'diana.prince@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['diana.prince@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_53",
        instruction="Your goal is to process a new Marketing Specialist, Edward Nygma. Their start date is 2024-09-15, their email is edward.nygma@example.com, and their manager is jane.doe@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Edward Nygma', 'role_title': 'Marketing Specialist', 'start_date': '2024-09-15', 'candidate_email': 'edward.nygma@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['edward.nygma@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_54",
        instruction="You need to onboard a senior software engineer, Felicia Hardy. Her start date is 2024-09-15, her email is felicia.hardy@example.com, and her manager is john.smith@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Felicia Hardy', 'role_title': 'senior software engineer', 'start_date': '2024-09-15', 'candidate_email': 'felicia.hardy@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['felicia.hardy@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_55",
        instruction="You must handle the onboarding for a junior product manager, George Stacy. Their start date is 2024-09-22, their email is george.stacy@example.com, and their manager is jane.doe@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'George Stacy', 'role_title': 'junior product manager', 'start_date': '2024-09-22', 'candidate_email': 'george.stacy@example.com', 'manager_email': 'jane.doe@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['george.stacy@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_56",
        instruction="You must process the hiring of a new Product Manager, Brenda Starr. Their start date is 2024-09-01, their email is brenda.starr@example.com, and their manager is john.smith@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Brenda Starr', 'role_title': 'Product Manager', 'start_date': '2024-09-01', 'candidate_email': 'brenda.starr@example.com', 'manager_email': 'john.smith@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['brenda.starr@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
        Task(
        annotator="faris",
        user_id="faris_57",
        instruction="You must onboard two new DevOps Engineers, Bruce Wayne and Dick Grayson. Their start date is 2024-10-01. Bruce's email is bruce.wayne@example.com and Dick's is dick.grayson@example.com. Do not email Bruce Wayne. Their manager is alfred.pennyworth@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Bruce Wayne', 'role_title': 'DevOps Engineer', 'start_date': '2024-10-01', 'candidate_email': 'bruce.wayne@example.com', 'manager_email': 'alfred.pennyworth@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Dick Grayson', 'role_title': 'DevOps Engineer', 'start_date': '2024-10-01', 'candidate_email': 'dick.grayson@example.com', 'manager_email': 'alfred.pennyworth@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-002', 'template_name': 'welcome', 'to_emails': ['dick.grayson@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_58",
        instruction="You must onboard two new Sales Representatives, Clark Kent and Lois Lane. Their start date is 2024-10-01. Clark's email is clark.kent@example.com and Lois's is lois.lane@example.com. Do not email Lois. Their manager is perry.white@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Clark Kent', 'role_title': 'Sales Representative', 'start_date': '2024-10-01', 'candidate_email': 'clark.kent@example.com', 'manager_email': 'perry.white@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Lois Lane', 'role_title': 'Sales Representative', 'start_date': '2024-10-01', 'candidate_email': 'lois.lane@example.com', 'manager_email': 'perry.white@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['clark.kent@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_59",
        instruction="You must onboard two new HR Specialists, Diana Prince and Steve Trevor. Their start date is 2024-10-08. Diana's email is diana.prince@example.com and Steve's is steve.trevor@example.com. Do not email Steve. Their manager is hippolyta@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Diana Prince', 'role_title': 'HR Specialist', 'start_date': '2024-10-08', 'candidate_email': 'diana.prince@example.com', 'manager_email': 'hippolyta@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Steve Trevor', 'role_title': 'HR Specialist', 'start_date': '2024-10-08', 'candidate_email': 'steve.trevor@example.com', 'manager_email': 'hippolyta@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['diana.prince@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_60",
        instruction="You must onboard two new Financial Analysts, Barry Allen and Wally West. Their start date is 2024-10-08. Barry's email is barry.allen@example.com and Wally's is wally.west@example.com. Do not email Wally West. Their manager is iris.west@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Barry Allen', 'role_title': 'Financial Analyst', 'start_date': '2024-10-08', 'candidate_email': 'barry.allen@example.com', 'manager_email': 'iris.west@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Wally West', 'role_title': 'Financial Analyst', 'start_date': '2024-10-08', 'candidate_email': 'wally.west@example.com', 'manager_email': 'iris.west@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['barry.allen@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_61",
        instruction="You must onboard two new Content Writers, Arthur Curry and Garth. Their start date is 2024-10-15. Arthur's email is arthur.curry@example.com and Garth's is garth@example.com. Do not email Garth. Their manager is mera@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Arthur Curry', 'role_title': 'Content Writer', 'start_date': '2024-10-15', 'candidate_email': 'arthur.curry@example.com', 'manager_email': 'mera@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Garth', 'role_title': 'Content Writer', 'start_date': '2024-10-15', 'candidate_email': 'garth@example.com', 'manager_email': 'mera@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['arthur.curry@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_62",
        instruction="You must onboard two new Customer Success Managers, Hal Jordan and John Stewart. Their start date is 2024-10-15. Hal's email is hal.jordan@example.com and John's is john.stewart@example.com. Do not email John Stewart. Their manager is carol.ferris@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Hal Jordan', 'role_title': 'Customer Success Manager', 'start_date': '2024-10-15', 'candidate_email': 'hal.jordan@example.com', 'manager_email': 'carol.ferris@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'John Stewart', 'role_title': 'Customer Success Manager', 'start_date': '2024-10-15', 'candidate_email': 'john.stewart@example.com', 'manager_email': 'carol.ferris@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['hal.jordan@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_63",
        instruction="You must onboard two new QA Engineers, Jonn Jonzz and Mgann Morzz. Their start date is 2024-10-22. Jonn's email is jonn.jonzz@example.com and Mgann's is mgann.morzz@example.com. Do not email Mgann. Their manager is silas.stone@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Jonn Jonzz', 'role_title': 'QA Engineer', 'start_date': '2024-10-22', 'candidate_email': 'jonn.jonzz@example.com', 'manager_email': 'silas.stone@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Mgann Morzz', 'role_title': 'QA Engineer', 'start_date': '2024-10-22', 'candidate_email': 'mgann.morzz@example.com', 'manager_email': 'silas.stone@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['jonn.jonzz@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_64",
        instruction="You must onboard two new Business Analysts, Oliver Queen and Roy Harper. Their start date is 2024-10-22. Oliver's email is oliver.queen@example.com and Roy's is roy.harper@example.com. Do not email Roy. Their manager is dinah.lance@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Oliver Queen', 'role_title': 'Business Analyst', 'start_date': '2024-10-22', 'candidate_email': 'oliver.queen@example.com', 'manager_email': 'dinah.lance@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Roy Harper', 'role_title': 'Business Analyst', 'start_date': '2024-10-22', 'candidate_email': 'roy.harper@example.com', 'manager_email': 'dinah.lance@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['oliver.queen@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_65",
        instruction="You must onboard two new Graphic Designers, Selina Kyle and Pamela Isley. Their start date is 2024-10-29. Selina's email is selina.kyle@example.com and Pamela's is pamela.isley@example.com. Do not email Pamela. Their manager is holly.robinson@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Selina Kyle', 'role_title': 'Graphic Designer', 'start_date': '2024-10-29', 'candidate_email': 'selina.kyle@example.com', 'manager_email': 'holly.robinson@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Pamela Isley', 'role_title': 'Graphic Designer', 'start_date': '2024-10-29', 'candidate_email': 'pamela.isley@example.com', 'manager_email': 'holly.robinson@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['selina.kyle@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_66",
        instruction="You must onboard two new Project Managers, Carter Hall and Kendra Saunders. Their start date is 2024-10-29. Carter's email is carter.hall@example.com and Kendra's is kendra.saunders@example.com. Do not email Kendra. Their manager is shiera.sanders@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Carter Hall', 'role_title': 'Project Manager', 'start_date': '2024-10-29', 'candidate_email': 'carter.hall@example.com', 'manager_email': 'shiera.sanders@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Kendra Saunders', 'role_title': 'Project Manager', 'start_date': '2024-10-29', 'candidate_email': 'kendra.saunders@example.com', 'manager_email': 'shiera.sanders@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['carter.hall@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_67",
        instruction="Your task is to follow up with candidates who have tasks that are overdue by 3 days or more. Focus on new hires who are in the 'Started' phase of onboarding.",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Started'}),
            Action(name="get_overdue_checklist_items", kwargs={'days_overdue_threshold': 3}),
            Action(name="send_batch_reminder_emails", kwargs={'candidate_ids': ['cand_6'], 'days_overdue_threshold': 3}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_6'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_6'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_68",
        instruction="Your goal is to handle escalations for candidates with an 'Access Issues' status. You must use the failure note 'SSO access failure' when communicating with IT.",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="analyze_system_access_failures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'failure_notes': "SSO access failure"}}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'cand_4'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_4'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_69",
        instruction="You are responsible for escalating issues for 'Onboarded' candidates who still have tasks that are 10 or more days overdue.",
        actions=[
            Action(name="get_overdue_checklist_items", kwargs={'days_overdue_threshold': 10}),
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Onboarded'}),
            Action(name="analyze_system_access_failures", kwargs={'candidate_id': 'cand_3'}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_3', 'notification_type': 'overdue_escalation'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'cand_3'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_3'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_3'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_70",
        instruction="You need to resolve the GitHub access problem for candidate cand_3. Make sure to analyze the failure, inform the manager, update the records, and mark the issue as 'Resolved by IT.'",
        actions=[
            Action(name="analyze_system_access_failures", kwargs={'system_name': 'GitHub'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_3', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'GitHub': {'failure_notes': ['Account not yet provisioned. IT ticket #12345 created.']}}}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_3', 'notification_type': 'access_issue'}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_3', 'system_name': 'GitHub', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_3'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_3'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_71",
        instruction="Your objective is to diagnose and resolve the Email access issue for candidate cand_1. Use the note 'Resolved by IT.' and the 'access_issue' notification type. The failure note should be 'Email access failure'.",
        actions=[
            Action(name="analyze_system_access_failures", kwargs={'candidate_id': 'cand_1'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_1', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'failure_notes': 'Email access failure'}}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_1', 'notification_type': 'access_issue'}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_1', 'system_name': 'Email', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_1'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_1'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_72",
        instruction="You are to resolve all SSO issues for candidates in the 'Access Issues' state. Set the failure note to 'SSO access failure' and use the 'access_issue' notification type for manager communications.",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="analyze_system_access_failures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {'failure_notes': 'SSO access failure'}}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="resolve_sso_access_issue", kwargs={'candidate_id': 'cand_4'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_4'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_73",
        instruction="You must onboard two new Financial Analysts, Emma Thompson and David Kim. Their start date is 2024-10-08. Emma's email is emma.thompson@example.com and David's is david.kim@example.com. Do not email David Kim. Their manager is iris.west@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Emma Thompson', 'role_title': 'Financial Analyst', 'start_date': '2024-10-08', 'candidate_email': 'emma.thompson@example.com', 'manager_email': 'iris.west@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'David Kim', 'role_title': 'Financial Analyst', 'start_date': '2024-10-08', 'candidate_email': 'david.kim@example.com', 'manager_email': 'iris.west@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['emma.thompson@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_74",
        instruction="You are responsible for sending orientation invitations to cand_2, cand_1, and cand_4, cand_6, cand_7 and any others who are starting in the next 7 days.",
        actions=[
            Action(name="get_candidates_needing_orientation_scheduling", kwargs={'days_until_start': 7}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_4', 'cand_6', 'cand_7']}),
            Action(name="apply_email_labels_and_threading", kwargs={'label_assignments': {'msg_015': ['label_4'], 'msg_017': ['label_4'], 'msg_019': ['label_4'], 'msg_021': ['label_4'], 'msg_023': ['label_4'], 'msg_025': ['label_4']}}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_4', 'cand_6', 'cand_7'], 'fields_to_update': {'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_75",
        instruction="Your goal is to ensure all cand_2, cand_1, and cand_4, cand_6, cand_7 and any others starting within a week receive their orientation invitations. You must send the invites and then verify that the communication gap has been closed.",
        actions=[
            Action(name="get_candidates_needing_orientation_scheduling", kwargs={'days_until_start': 7}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_4', 'cand_6', 'cand_7']}),
            Action(name="apply_email_labels_and_threading", kwargs={'label_assignments': {'msg_015': ['label_4'], 'msg_017': ['label_4'], 'msg_019': ['label_4'], 'msg_021': ['label_4'], 'msg_023': ['label_4'], 'msg_025': ['label_4']}}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_5', 'cand_2', 'cand_1', 'cand_4', 'cand_6', 'cand_7'], 'fields_to_update': {'orientation_invite_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'expected_email_types': ['orientation invitation']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_76",
        instruction="You must resolve access issues for candidates in the 'Access Issues' state. You must set the note to 'Resolved by IT.' and use the notification type 'access_issue' when escalating.",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="analyze_system_access_failures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {"Email": {"failure_notes": ["Mailbox creation failed. Exchange server issue reported."]},"SSO": {"failure_notes": ["Identity provider sync pending. Expected resolution by 2024-08-10."]},"Slack": {"failure_notes": ["Account depends on SSO resolution."]}}}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_4', 'system_name': 'Email', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_4', 'system_name': 'SSO', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_4', 'system_name': 'Slack', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_4'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_77",
        instruction="Your task is to fix all access problems for new hires who are in the 'Access Issues' status. You must set the resolution note to 'Resolved by IT.'",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Access Issues'}),
            Action(name="analyze_system_access_failures", kwargs={'candidate_id': 'cand_4'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_4', 'template_name': 'it_support_request', 'to_emails': ['it-support@example.com'], 'template_context': {"Email": {"failure_notes": ["Mailbox creation failed. Exchange server issue reported."]},"SSO": {"failure_notes": ["Identity provider sync pending. Expected resolution by 2024-08-10."]},"Slack": {"failure_notes": ["Account depends on SSO resolution."]}}}),
            Action(name="notify_manager", kwargs={'candidate_id': 'cand_4', 'notification_type': 'access_issue'}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_4', 'system_name': 'Email', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_4', 'system_name': 'SSO', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_4', 'system_name': 'Slack', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_4'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_4'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_78",
        instruction="You are responsible for handling all overdue tasks. For any candidate with items overdue by one day or more, you must send a reminder and log the follow-up action.",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Started'}),
            Action(name="get_overdue_checklist_items", kwargs={'days_overdue_threshold': 1}),
            Action(name="send_batch_reminder_emails", kwargs={'candidate_ids': ['cand_2', 'cand_3', 'cand_4', 'cand_5', 'cand_6', 'cand_7'], 'days_overdue_threshold': 1}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_2', 'cand_3', 'cand_4', 'cand_5', 'cand_6', 'cand_7'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_2'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_3'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_4'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_5'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_6'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_7'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_79",
        instruction="You must handle the onboarding of two new DevOps Engineers, Tim Drake and Jason Todd. Their start date is 2024-10-01. Tim's email is tim.drake@example.com and Jason's is jason.todd@example.com. Do not email Tim Drake. Their manager is barbara.gordon@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Tim Drake', 'role_title': 'DevOps Engineer', 'start_date': '2024-10-01', 'candidate_email': 'tim.drake@example.com', 'manager_email': 'barbara.gordon@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Jason Todd', 'role_title': 'DevOps Engineer', 'start_date': '2024-10-01', 'candidate_email': 'jason.todd@example.com', 'manager_email': 'barbara.gordon@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-002', 'template_name': 'welcome', 'to_emails': ['jason.todd@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_80",
        instruction="Your goal is to clear the overdue task queue. You must process all items that are at least one day late by sending reminders, logging the action, and verifying the context for all affected candidates.",
        actions=[
            Action(name="find_candidates_by_onboarding_status", kwargs={'onboarding_status': 'Started'}),
            Action(name="get_overdue_checklist_items", kwargs={'days_overdue_threshold': 1}),
            Action(name="send_batch_reminder_emails", kwargs={'candidate_ids': ['cand_2', 'cand_3', 'cand_4', 'cand_5', 'cand_6', 'cand_7'], 'days_overdue_threshold': 1}),
            Action(name="update_candidates_record", kwargs={'candidate_ids': ['cand_2', 'cand_3', 'cand_4', 'cand_5', 'cand_6', 'cand_7'], 'fields_to_update': {'checklist_follow_up_ts_nullable': '2024-08-15T12:00:00Z'}}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_2'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_3'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_4'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_5'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_6'}),
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_7'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_81",
        instruction="You are to process the hiring of two DevOps Engineers, Damian Wayne and Cassandra Cain. Their start date is 2024-10-01. Damian's email is damian.wayne@example.com and Cassandra's is cassandra.cain@example.com. Do not email Cassandra Cain. Their manager is selina.kyle@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Damian Wayne', 'role_title': 'DevOps Engineer', 'start_date': '2024-10-01', 'candidate_email': 'damian.wayne@example.com', 'manager_email': 'selina.kyle@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Cassandra Cain', 'role_title': 'DevOps Engineer', 'start_date': '2024-10-01', 'candidate_email': 'cassandra.cain@example.com', 'manager_email': 'selina.kyle@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['damian.wayne@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_82",
        instruction="You must onboard two new Business Analysts, Lex Luthor and Mercy Graves. Their start date is 2024-11-22. Lex's email is lex.luthor@example.com and Mercy's is mercy.graves@example.com. Do not email Mercy Graves. Their manager is lionel.luthor@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Lex Luthor', 'role_title': 'Business Analyst', 'start_date': '2024-11-22', 'candidate_email': 'lex.luthor@example.com', 'manager_email': 'lionel.luthor@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Mercy Graves', 'role_title': 'Business Analyst', 'start_date': '2024-11-22', 'candidate_email': 'mercy.graves@example.com', 'manager_email': 'lionel.luthor@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['lex.luthor@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_83",
        instruction="You must onboard a new Sales Representative, Peter Parker. Their start date is 2024-11-01, their email is peter.parker@example.com, and their manager is may.parker@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Peter Parker', 'role_title': 'Sales Representative', 'start_date': '2024-11-01', 'candidate_email': 'peter.parker@example.com', 'manager_email': 'may.parker@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['peter.parker@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_84",
        instruction="You must onboard a new HR Specialist, Mary Jane Watson. Their start date is 2024-11-01, their email is mary.jane.watson@example.com, and their manager is anna.watson@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Mary Jane Watson', 'role_title': 'HR Specialist', 'start_date': '2024-11-01', 'candidate_email': 'mary.jane.watson@example.com', 'manager_email': 'anna.watson@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['mary.jane.watson@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_85",
        instruction="You must onboard a new Financial Analyst, Harry Osborn. Their start date is 2024-11-08, their email is harry.osborn@example.com, and their manager is norman.osborn@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Harry Osborn', 'role_title': 'Financial Analyst', 'start_date': '2024-11-08', 'candidate_email': 'harry.osborn@example.com', 'manager_email': 'norman.osborn@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['harry.osborn@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_86",
        instruction="You must onboard a new Content Writer, Gwen Stacy. Their start date is 2024-11-08, their email is gwen.stacy@example.com, and their manager is george.stacy@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Gwen Stacy', 'role_title': 'Content Writer', 'start_date': '2024-11-08', 'candidate_email': 'gwen.stacy@example.com', 'manager_email': 'george.stacy@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['gwen.stacy@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_87",
        instruction="You must onboard a new Customer Success Manager, Miles Morales. Their start date is 2024-11-15, their email is miles.morales@example.com, and their manager is jefferson.davis@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Miles Morales', 'role_title': 'Customer Success Manager', 'start_date': '2024-11-15', 'candidate_email': 'miles.morales@example.com', 'manager_email': 'jefferson.davis@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['miles.morales@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_88",
        instruction="You must onboard a new QA Engineer, Cindy Moon. Their start date is 2024-11-15, their email is cindy.moon@example.com, and their manager is albert.moon@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Cindy Moon', 'role_title': 'QA Engineer', 'start_date': '2024-11-15', 'candidate_email': 'cindy.moon@example.com', 'manager_email': 'albert.moon@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_id': 'CAND-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['cindy.moon@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'CAND-001', 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_id': 'CAND-001'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_89 ",
        instruction="You must perform a final audit for candidate cand_3. You should resolve any outstanding issues, including sending missing emails, completing overdue tasks, and resolving system access failures, then update their status to 'Onboarded'. The meeting will be at 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_3'}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'candidate_id': 'cand_3', 'expected_email_types': ['welcome', 'orientation invitation', 'introduction']}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_3'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="update_task_completion_status", kwargs={'item_ids': ['item_3']}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_3', 'system_name': 'GitHub', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'cand_3', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_90",
        instruction="You must perform a final audit for candidate cand_5. You should resolve any outstanding issues, including completing all pending tasks, then update their status to 'Onboarded'.",
        actions=[
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_5'}),
            Action(name="get_overdue_checklist_items", kwargs={'candidate_id': 'cand_5', 'days_overdue_threshold': 0}),
            Action(name="update_task_completion_status", kwargs={'item_ids': ['item_13', 'item_14']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'cand_5', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_91",
        instruction="You must perform a final audit for candidate cand_1. You should resolve any outstanding issues, including sending missing emails and resolving pending system access, then update their status to 'Onboarded'. The meeting will be at 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_1'}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'candidate_id': 'cand_1', 'expected_email_types': ['welcome', 'orientation invitation', 'introduction']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_1', 'template_name': 'welcome', 'to_emails': ['john.doe@example.com'], 'cc_emails': ['sarah.wilson@example.com']}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_1'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_1', 'system_name': 'Email', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'cand_1', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_92",
        instruction="You must perform a final audit for candidate cand_2. You should resolve any outstanding issues, including sending missing emails and completing pending tasks, then update their status to 'Onboarded'. The meeting will be at 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_2'}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'candidate_id': 'cand_2', 'expected_email_types': ['orientation invitation', 'introduction']}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_2'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="update_task_completion_status", kwargs={'item_ids': ['item_4', 'item_5', 'item_6', 'item_7']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'cand_2', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_93",
        instruction="You must perform a final audit for candidate cand_3. You should resolve any outstanding issues, including sending missing emails, completing overdue tasks, and resolving system access failures, then update their status to 'Onboarded'. The meeting will be at 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_3'}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'candidate_id': 'cand_3', 'expected_email_types': ['orientation invitation', 'introduction']}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_3'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="update_task_completion_status", kwargs={'item_ids': ['item_3']}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_3', 'system_name': 'GitHub', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'cand_3', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_94",
        instruction="You must perform a final audit for candidate cand_4. You should resolve any outstanding issues, including sending missing emails, completing pending tasks, and resolving system access failures, then update their status to 'Onboarded'. The meeting will be at 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_4'}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'candidate_id': 'cand_4', 'expected_email_types': ['orientation invitation', 'introduction']}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_4'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="update_task_completion_status", kwargs={'item_ids': ['item_8', 'item_9', 'item_10']}),
            Action(name="resolve_sso_access_issue", kwargs={'candidate_id': 'cand_4'}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'cand_4', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_95",
        instruction="You must onboard two new Project Managers, Steve Rogers and Bucky Barnes. Their start date is 2024-11-29. Steve's email is steve.rogers@example.com and Bucky's is bucky.barnes@example.com. Do not email Bucky Barnes. Their manager is peggy.carter@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Steve Rogers', 'role_title': 'Project Manager', 'start_date': '2024-11-29', 'candidate_email': 'steve.rogers@example.com', 'manager_email': 'peggy.carter@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Bucky Barnes', 'role_title': 'Project Manager', 'start_date': '2024-11-29', 'candidate_email': 'bucky.barnes@example.com', 'manager_email': 'peggy.carter@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['steve.rogers@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),

    Task(
        annotator="faris",
        user_id="faris_96",
        instruction="You must perform a final audit for candidate cand_6. You should resolve any outstanding issues, including sending missing emails and completing overdue tasks, then update their status to 'Onboarded'. The meeting will be at 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_6'}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'candidate_id': 'cand_6', 'expected_email_types': ['welcome', 'orientation invitation', 'introduction']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_6', 'template_name': 'welcome', 'to_emails': ['emily.chen@example.com'], 'cc_emails': ['jennifer.davis@example.com']}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_6'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="update_task_completion_status", kwargs={'item_ids': ['item_17']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'cand_6', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_97",
        instruction="You must perform a final audit for candidate cand_7. You should resolve any outstanding issues, including completing all pending tasks and fulfilling their asset request, then update their status to 'Onboarded'.",
        actions=[
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_7'}),
            Action(name="update_task_completion_status", kwargs={'item_ids': ['item_15', 'item_16']}),
            Action(name="query_available_assets_by_type", kwargs={'asset_type': 'Laptop', 'status_filter': 'Available'}),
            Action(name="assign_asset_to_candidate", kwargs={'asset_request_id': 'asset_req_5', 'asset_tag': 'LT-MBP-001'}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_7', 'template_name': 'asset_fulfillment_notification', 'to_emails': ['robert.singh@example.com'], 'cc_emails': ['sarah.wilson@example.com'], 'template_context': {'asset_name': 'MacBook Pro 16-inch M3, 32GB RAM, 1TB SSD', 'asset_tag': 'LT-MBP-001'}}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'cand_7', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_98",
        instruction="You must perform a final audit for candidate cand_1. You should resolve any outstanding issues, including sending missing emails and resolving pending system access, then update their status to 'Onboarded'. The meeting will be at 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_1'}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'candidate_id': 'cand_1', 'expected_email_types': ['welcome', 'orientation invitation', 'introduction']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'cand_1', 'template_name': 'welcome', 'to_emails': ['john.doe@example.com'], 'cc_emails': ['sarah.wilson@example.com']}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_1'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="update_access_check_status", kwargs={'candidate_id': 'cand_1', 'system_name': 'Email', 'new_status': 'Success', 'note': 'Resolved by IT.'}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'cand_1', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_99",
        instruction="You must perform a final audit for candidate cand_2. You should resolve any outstanding issues, including sending missing emails and completing pending tasks, then update their status to 'Onboarded'. The meeting will be at 2024-08-20T10:00:00Z in Virtual Meeting Room 3.",
        actions=[
            Action(name="get_candidate_with_full_context", kwargs={'candidate_id': 'cand_2'}),
            Action(name="get_available_email_types", kwargs={}),
            Action(name="check_email_communication_gaps", kwargs={'candidate_id': 'cand_2', 'expected_email_types': ['orientation invitation', 'introduction']}),
            Action(name="create_orientation_invitation_emails", kwargs={'ready_candidate_ids': ['cand_2'], 'orientation_details': {'meeting_time': '2024-08-20T10:00:00Z', 'meeting_location': 'Virtual Meeting Room 3'}}),
            Action(name="update_task_completion_status", kwargs={'item_ids': ['item_4', 'item_5', 'item_6', 'item_7']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_id': 'cand_2', 'new_status': 'Onboarded'}),
        ],
        outputs=[],
    ),
    Task(
        annotator="faris",
        user_id="faris_89",
        instruction="You must onboard two new Graphic Designers, Tony Stark and Pepper Potts. Their start date is 2024-11-29. Tony's email is tony.stark@example.com and Pepper's is pepper.potts@example.com. Do not email Pepper Potts. Their manager is happy.hogan@example.com.",
        actions=[
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Tony Stark', 'role_title': 'Graphic Designer', 'start_date': '2024-11-29', 'candidate_email': 'tony.stark@example.com', 'manager_email': 'happy.hogan@example.com'}),
            Action(name="create_new_candidate_record", kwargs={'candidate_name': 'Pepper Potts', 'role_title': 'Graphic Designer', 'start_date': '2024-11-29', 'candidate_email': 'pepper.potts@example.com', 'manager_email': 'happy.hogan@example.com'}),
            Action(name="generate_personalized_welcome_file", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_role_based_checklist_tasks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="create_asset_request_with_notification", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
            Action(name="send_email_with_attachments", kwargs={'candidate_id': 'CAND-001', 'template_name': 'welcome', 'to_emails': ['tony.stark@example.com']}),
            Action(name="update_candidate_onboarding_status", kwargs={'candidate_ids': ['CAND-001', 'CAND-002'], 'new_status': 'Packet Sent'}),
            Action(name="run_and_record_system_access_checks", kwargs={'candidate_ids': ['CAND-001', 'CAND-002']}),
        ],
        outputs=[],
    ),
]
